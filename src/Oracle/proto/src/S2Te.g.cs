// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2_te.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from s2_te.proto</summary>
  public static partial class S2TeReflection {

    #region Descriptor
    /// <summary>File descriptor for s2_te.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S2TeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtzMl90ZS5wcm90bxIPZ29vZ2xlLnByb3RvYnVmGhZuZXR3b3JrYmFzZXR5",
            "cGVzLnByb3RvImkKE0NNc2dURUFybW9yUmljb2NoZXQSKAoDcG9zGAEgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISKAoDZGlyGAIgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3Ii4QEKDkNNc2dURUJhc2VCZWFt",
            "EhIKCm1vZGVsaW5kZXgYASABKAYSEQoJaGFsb2luZGV4GAIgASgGEhIKCnN0",
            "YXJ0ZnJhbWUYAyABKA0SEQoJZnJhbWVyYXRlGAQgASgNEgwKBGxpZmUYBSAB",
            "KAISDQoFd2lkdGgYBiABKAISEAoIZW5kd2lkdGgYByABKAISEgoKZmFkZWxl",
            "bmd0aBgIIAEoDRIRCglhbXBsaXR1ZGUYCSABKAISDQoFY29sb3IYCiABKAcS",
            "DQoFc3BlZWQYCyABKA0SDQoFZmxhZ3MYDCABKA0iwQEKEkNNc2dURUJlYW1F",
            "bnRQb2ludBItCgRiYXNlGAEgASgLMh8uZ29vZ2xlLnByb3RvYnVmLkNNc2dU",
            "RUJhc2VCZWFtEhMKC3N0YXJ0ZW50aXR5GAIgASgNEhEKCWVuZGVudGl0eRgD",
            "IAEoDRIqCgVzdGFydBgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVj",
            "dG9yEigKA2VuZBgFIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9y",
            "ImcKDkNNc2dURUJlYW1FbnRzEi0KBGJhc2UYASABKAsyHy5nb29nbGUucHJv",
            "dG9idWYuQ01zZ1RFQmFzZUJlYW0SEwoLc3RhcnRlbnRpdHkYAiABKA0SEQoJ",
            "ZW5kZW50aXR5GAMgASgNIpcBChBDTXNnVEVCZWFtUG9pbnRzEi0KBGJhc2UY",
            "ASABKAsyHy5nb29nbGUucHJvdG9idWYuQ01zZ1RFQmFzZUJlYW0SKgoFc3Rh",
            "cnQYAiABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIoCgNlbmQY",
            "AyABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvciJnCg5DTXNnVEVC",
            "ZWFtUmluZxItCgRiYXNlGAEgASgLMh8uZ29vZ2xlLnByb3RvYnVmLkNNc2dU",
            "RUJhc2VCZWFtEhMKC3N0YXJ0ZW50aXR5GAIgASgNEhEKCWVuZGVudGl0eRgD",
            "IAEoDSKdAgoQQ01zZ1RFQnJlYWtNb2RlbBIrCgZvcmlnaW4YASABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIrCgZhbmdsZXMYAiABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuQ01zZ1FBbmdsZRIpCgRzaXplGAMgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISLQoIdmVsb2NpdHkYBCABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIVCg1yYW5kb21pemF0aW9uGAUg",
            "ASgNEhIKCm1vZGVsaW5kZXgYBiABKAYSDQoFY291bnQYByABKA0SDAoEdGlt",
            "ZRgIIAEoAhINCgVmbGFncxgJIAEoDSK1AQoOQ01zZ1RFQlNQRGVjYWwSKwoG",
            "b3JpZ2luGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISKwoG",
            "bm9ybWFsGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISKgoF",
            "c2F4aXMYAyABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIOCgZl",
            "bnRpdHkYBCABKA0SDQoFaW5kZXgYBSABKA0ikwEKDUNNc2dURUJ1YmJsZXMS",
            "KQoEbWlucxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEikK",
            "BG1heHMYAiABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIOCgZo",
            "ZWlnaHQYAyABKAISDQoFY291bnQYBCABKA0SDQoFc3BlZWQYBSABKAIilwEK",
            "EUNNc2dURUJ1YmJsZVRyYWlsEikKBG1pbnMYASABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuQ01zZ1ZlY3RvchIpCgRtYXhzGAIgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkNNc2dWZWN0b3ISDgoGd2F0ZXJ6GAMgASgCEg0KBWNvdW50GAQgASgN",
            "Eg0KBXNwZWVkGAUgASgCIpUBCgtDTXNnVEVEZWNhbBIrCgZvcmlnaW4YASAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIqCgVzdGFydBgCIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEg4KBmVudGl0eRgDIAEo",
            "DRIOCgZoaXRib3gYBCABKA0SDQoFaW5kZXgYBSABKA0i3QMKDkNNc2dFZmZl",
            "Y3REYXRhEisKBm9yaWdpbhgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNn",
            "VmVjdG9yEioKBXN0YXJ0GAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dW",
            "ZWN0b3ISKwoGbm9ybWFsGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dW",
            "ZWN0b3ISKwoGYW5nbGVzGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dR",
            "QW5nbGUSDgoGZW50aXR5GAUgASgHEhMKC290aGVyZW50aXR5GAYgASgHEg0K",
            "BXNjYWxlGAcgASgCEhEKCW1hZ25pdHVkZRgIIAEoAhIOCgZyYWRpdXMYCSAB",
            "KAISEwoLc3VyZmFjZXByb3AYCiABKAcSEwoLZWZmZWN0aW5kZXgYCyABKAYS",
            "EgoKZGFtYWdldHlwZRgMIAEoDRIQCghtYXRlcmlhbBgNIAEoDRIOCgZoaXRi",
            "b3gYDiABKA0SDQoFY29sb3IYDyABKA0SDQoFZmxhZ3MYECABKA0SFwoPYXR0",
            "YWNobWVudGluZGV4GBEgASgFEhIKCmVmZmVjdG5hbWUYEiABKA0SFgoOYXR0",
            "YWNobWVudG5hbWUYEyABKA0iSwoUQ01zZ1RFRWZmZWN0RGlzcGF0Y2gSMwoK",
            "ZWZmZWN0ZGF0YRgBIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5DTXNnRWZmZWN0",
            "RGF0YSJ7ChJDTXNnVEVFbmVyZ3lTcGxhc2gSKAoDcG9zGAEgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISKAoDZGlyGAIgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkNNc2dWZWN0b3ISEQoJZXhwbG9zaXZlGAMgASgIIj4KCkNN",
            "c2dURUZpenoSDgoGZW50aXR5GAEgASgNEg8KB2RlbnNpdHkYAiABKA0SDwoH",
            "Y3VycmVudBgDIAEoBSK5AgoUQ01zZ1RFU2hhdHRlclN1cmZhY2USKwoGb3Jp",
            "Z2luGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISKwoGYW5n",
            "bGVzGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dRQW5nbGUSKgoFZm9y",
            "Y2UYAyABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchItCghmb3Jj",
            "ZXBvcxgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEg0KBXdp",
            "ZHRoGAUgASgCEg4KBmhlaWdodBgGIAEoAhIRCglzaGFyZHNpemUYByABKAIS",
            "EwoLc3VyZmFjZXR5cGUYCCABKA0SEgoKZnJvbnRjb2xvchgJIAEoBxIRCgli",
            "YWNrY29sb3IYCiABKAcicAoQQ01zZ1RFR2xvd1Nwcml0ZRIrCgZvcmlnaW4Y",
            "ASABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchINCgVzY2FsZRgC",
            "IAEoAhIMCgRsaWZlGAMgASgCEhIKCmJyaWdodG5lc3MYBCABKA0idgoMQ01z",
            "Z1RFSW1wYWN0EisKBm9yaWdpbhgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5D",
            "TXNnVmVjdG9yEisKBm5vcm1hbBgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5D",
            "TXNnVmVjdG9yEgwKBHR5cGUYAyABKA0iigEKEUNNc2dURU11enpsZUZsYXNo",
            "EisKBm9yaWdpbhgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9y",
            "EisKBmFuZ2xlcxgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnUUFuZ2xl",
            "Eg0KBXNjYWxlGAMgASgCEgwKBHR5cGUYBCABKA0ijwEKEUNNc2dURUJsb29k",
            "U3RyZWFtEisKBm9yaWdpbhgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNn",
            "VmVjdG9yEi4KCWRpcmVjdGlvbhgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5D",
            "TXNnVmVjdG9yEg0KBWNvbG9yGAMgASgHEg4KBmFtb3VudBgEIAEoDSLuAQoP",
            "Q01zZ1RFRXhwbG9zaW9uEisKBm9yaWdpbhgBIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5DTXNnVmVjdG9yEhEKCWZyYW1lcmF0ZRgCIAEoDRINCgVmbGFncxgD",
            "IAEoDRIrCgZub3JtYWwYBCABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1Zl",
            "Y3RvchIUCgxtYXRlcmlhbHR5cGUYBSABKA0SDgoGcmFkaXVzGAYgASgNEhEK",
            "CW1hZ25pdHVkZRgHIAEoDRINCgVzY2FsZRgIIAEoAhIXCg9hZmZlY3RfcmFn",
            "ZG9sbHMYCSABKAgihgEKCkNNc2dURUR1c3QSKwoGb3JpZ2luGAEgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISDAoEc2l6ZRgCIAEoAhINCgVz",
            "cGVlZBgDIAEoAhIuCglkaXJlY3Rpb24YBCABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuQ01zZ1ZlY3RvciJSChFDTXNnVEVMYXJnZUZ1bm5lbBIrCgZvcmlnaW4Y",
            "ASABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIQCghyZXZlcnNl",
            "ZBgCIAEoDSKOAQoMQ01zZ1RFU3BhcmtzEisKBm9yaWdpbhgBIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEhEKCW1hZ25pdHVkZRgCIAEoDRIO",
            "CgZsZW5ndGgYAyABKA0SLgoJZGlyZWN0aW9uGAQgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkNNc2dWZWN0b3IimgIKEUNNc2dURVBoeXNpY3NQcm9wEisKBm9y",
            "aWdpbhgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEi0KCHZl",
            "bG9jaXR5GAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISKwoG",
            "YW5nbGVzGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dRQW5nbGUSDAoE",
            "c2tpbhgEIAEoBxINCgVmbGFncxgFIAEoDRIPCgdlZmZlY3RzGAYgASgNEg0K",
            "BWNvbG9yGAcgASgHEhIKCm1vZGVsaW5kZXgYCCABKAYSHAoUYnJlYWttb2Rl",
            "bHNub3R0b21ha2UYCSABKA0SDQoFc2NhbGUYCiABKAIiYAoRQ01zZ1RFUGxh",
            "eWVyRGVjYWwSKwoGb3JpZ2luGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNN",
            "c2dWZWN0b3ISDgoGcGxheWVyGAIgASgNEg4KBmVudGl0eRgDIAEoDSKRAQoU",
            "Q01zZ1RFUHJvamVjdGVkRGVjYWwSKwoGb3JpZ2luGAEgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkNNc2dWZWN0b3ISKwoGYW5nbGVzGAIgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkNNc2dRQW5nbGUSDQoFaW5kZXgYAyABKA0SEAoIZGlzdGFu",
            "Y2UYBCABKAIiSQoLQ01zZ1RFU21va2USKwoGb3JpZ2luGAEgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISDQoFc2NhbGUYAiABKAIiewoQQ01z",
            "Z1RFV29ybGREZWNhbBIrCgZvcmlnaW4YASABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuQ01zZ1ZlY3RvchIrCgZub3JtYWwYAiABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuQ01zZ1ZlY3RvchINCgVpbmRleBgDIAEoDSriBAoORVRFUHJvdG9idWZJ",
            "ZHMSDQoJVEVfVUtOT1dOEAASGAoTVEVfRWZmZWN0RGlzcGF0Y2hJZBCQAxIX",
            "ChJURV9Bcm1vclJpY29jaGV0SWQQkQMSFgoRVEVfQmVhbUVudFBvaW50SWQQ",
            "kgMSEgoNVEVfQmVhbUVudHNJZBCTAxIUCg9URV9CZWFtUG9pbnRzSWQQlAMS",
            "EgoNVEVfQmVhbVJpbmdJZBCVAxIUCg9URV9CcmVha01vZGVsSWQQlgMSEgoN",
            "VEVfQlNQRGVjYWxJZBCXAxIRCgxURV9CdWJibGVzSWQQmAMSFQoQVEVfQnVi",
            "YmxlVHJhaWxJZBCZAxIPCgpURV9EZWNhbElkEJoDEhQKD1RFX1dvcmxkRGVj",
            "YWxJZBCbAxIWChFURV9FbmVyZ3lTcGxhc2hJZBCcAxIOCglURV9GaXp6SWQQ",
            "nQMSGAoTVEVfU2hhdHRlclN1cmZhY2VJZBCeAxIUCg9URV9HbG93U3ByaXRl",
            "SWQQnwMSEAoLVEVfSW1wYWN0SWQQoAMSFQoQVEVfTXV6emxlRmxhc2hJZBCh",
            "AxIVChBURV9CbG9vZFN0cmVhbUlkEKIDEhMKDlRFX0V4cGxvc2lvbklkEKMD",
            "Eg4KCVRFX0R1c3RJZBCkAxIVChBURV9MYXJnZUZ1bm5lbElkEKUDEhAKC1RF",
            "X1NwYXJrc0lkEKYDEhUKEFRFX1BoeXNpY3NQcm9wSWQQpwMSFQoQVEVfUGxh",
            "eWVyRGVjYWxJZBCoAxIYChNURV9Qcm9qZWN0ZWREZWNhbElkEKkDEg8KClRF",
            "X1Ntb2tlSWQQqgNCEkgBgAEAqgIKUHJvdG8uRG90YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.Dota.NetworkbasetypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.ETEProtobufIds), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEArmorRicochet), global::Proto.Dota.CMsgTEArmorRicochet.Parser, new[]{ "Pos", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBaseBeam), global::Proto.Dota.CMsgTEBaseBeam.Parser, new[]{ "Modelindex", "Haloindex", "Startframe", "Framerate", "Life", "Width", "Endwidth", "Fadelength", "Amplitude", "Color", "Speed", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBeamEntPoint), global::Proto.Dota.CMsgTEBeamEntPoint.Parser, new[]{ "Base", "Startentity", "Endentity", "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBeamEnts), global::Proto.Dota.CMsgTEBeamEnts.Parser, new[]{ "Base", "Startentity", "Endentity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBeamPoints), global::Proto.Dota.CMsgTEBeamPoints.Parser, new[]{ "Base", "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBeamRing), global::Proto.Dota.CMsgTEBeamRing.Parser, new[]{ "Base", "Startentity", "Endentity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBreakModel), global::Proto.Dota.CMsgTEBreakModel.Parser, new[]{ "Origin", "Angles", "Size", "Velocity", "Randomization", "Modelindex", "Count", "Time", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBSPDecal), global::Proto.Dota.CMsgTEBSPDecal.Parser, new[]{ "Origin", "Normal", "Saxis", "Entity", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBubbles), global::Proto.Dota.CMsgTEBubbles.Parser, new[]{ "Mins", "Maxs", "Height", "Count", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBubbleTrail), global::Proto.Dota.CMsgTEBubbleTrail.Parser, new[]{ "Mins", "Maxs", "Waterz", "Count", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEDecal), global::Proto.Dota.CMsgTEDecal.Parser, new[]{ "Origin", "Start", "Entity", "Hitbox", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgEffectData), global::Proto.Dota.CMsgEffectData.Parser, new[]{ "Origin", "Start", "Normal", "Angles", "Entity", "Otherentity", "Scale", "Magnitude", "Radius", "Surfaceprop", "Effectindex", "Damagetype", "Material", "Hitbox", "Color", "Flags", "Attachmentindex", "Effectname", "Attachmentname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEEffectDispatch), global::Proto.Dota.CMsgTEEffectDispatch.Parser, new[]{ "Effectdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEEnergySplash), global::Proto.Dota.CMsgTEEnergySplash.Parser, new[]{ "Pos", "Dir", "Explosive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEFizz), global::Proto.Dota.CMsgTEFizz.Parser, new[]{ "Entity", "Density", "Current" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEShatterSurface), global::Proto.Dota.CMsgTEShatterSurface.Parser, new[]{ "Origin", "Angles", "Force", "Forcepos", "Width", "Height", "Shardsize", "Surfacetype", "Frontcolor", "Backcolor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEGlowSprite), global::Proto.Dota.CMsgTEGlowSprite.Parser, new[]{ "Origin", "Scale", "Life", "Brightness" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEImpact), global::Proto.Dota.CMsgTEImpact.Parser, new[]{ "Origin", "Normal", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEMuzzleFlash), global::Proto.Dota.CMsgTEMuzzleFlash.Parser, new[]{ "Origin", "Angles", "Scale", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEBloodStream), global::Proto.Dota.CMsgTEBloodStream.Parser, new[]{ "Origin", "Direction", "Color", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEExplosion), global::Proto.Dota.CMsgTEExplosion.Parser, new[]{ "Origin", "Framerate", "Flags", "Normal", "Materialtype", "Radius", "Magnitude", "Scale", "AffectRagdolls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEDust), global::Proto.Dota.CMsgTEDust.Parser, new[]{ "Origin", "Size", "Speed", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTELargeFunnel), global::Proto.Dota.CMsgTELargeFunnel.Parser, new[]{ "Origin", "Reversed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTESparks), global::Proto.Dota.CMsgTESparks.Parser, new[]{ "Origin", "Magnitude", "Length", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEPhysicsProp), global::Proto.Dota.CMsgTEPhysicsProp.Parser, new[]{ "Origin", "Velocity", "Angles", "Skin", "Flags", "Effects", "Color", "Modelindex", "Breakmodelsnottomake", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEPlayerDecal), global::Proto.Dota.CMsgTEPlayerDecal.Parser, new[]{ "Origin", "Player", "Entity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEProjectedDecal), global::Proto.Dota.CMsgTEProjectedDecal.Parser, new[]{ "Origin", "Angles", "Index", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTESmoke), global::Proto.Dota.CMsgTESmoke.Parser, new[]{ "Origin", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgTEWorldDecal), global::Proto.Dota.CMsgTEWorldDecal.Parser, new[]{ "Origin", "Normal", "Index" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ETEProtobufIds {
    [pbr::OriginalName("TE_UKNOWN")] TeUknown = 0,
    [pbr::OriginalName("TE_EffectDispatchId")] TeEffectDispatchId = 400,
    [pbr::OriginalName("TE_ArmorRicochetId")] TeArmorRicochetId = 401,
    [pbr::OriginalName("TE_BeamEntPointId")] TeBeamEntPointId = 402,
    [pbr::OriginalName("TE_BeamEntsId")] TeBeamEntsId = 403,
    [pbr::OriginalName("TE_BeamPointsId")] TeBeamPointsId = 404,
    [pbr::OriginalName("TE_BeamRingId")] TeBeamRingId = 405,
    [pbr::OriginalName("TE_BreakModelId")] TeBreakModelId = 406,
    [pbr::OriginalName("TE_BSPDecalId")] TeBspdecalId = 407,
    [pbr::OriginalName("TE_BubblesId")] TeBubblesId = 408,
    [pbr::OriginalName("TE_BubbleTrailId")] TeBubbleTrailId = 409,
    [pbr::OriginalName("TE_DecalId")] TeDecalId = 410,
    [pbr::OriginalName("TE_WorldDecalId")] TeWorldDecalId = 411,
    [pbr::OriginalName("TE_EnergySplashId")] TeEnergySplashId = 412,
    [pbr::OriginalName("TE_FizzId")] TeFizzId = 413,
    [pbr::OriginalName("TE_ShatterSurfaceId")] TeShatterSurfaceId = 414,
    [pbr::OriginalName("TE_GlowSpriteId")] TeGlowSpriteId = 415,
    [pbr::OriginalName("TE_ImpactId")] TeImpactId = 416,
    [pbr::OriginalName("TE_MuzzleFlashId")] TeMuzzleFlashId = 417,
    [pbr::OriginalName("TE_BloodStreamId")] TeBloodStreamId = 418,
    [pbr::OriginalName("TE_ExplosionId")] TeExplosionId = 419,
    [pbr::OriginalName("TE_DustId")] TeDustId = 420,
    [pbr::OriginalName("TE_LargeFunnelId")] TeLargeFunnelId = 421,
    [pbr::OriginalName("TE_SparksId")] TeSparksId = 422,
    [pbr::OriginalName("TE_PhysicsPropId")] TePhysicsPropId = 423,
    [pbr::OriginalName("TE_PlayerDecalId")] TePlayerDecalId = 424,
    [pbr::OriginalName("TE_ProjectedDecalId")] TeProjectedDecalId = 425,
    [pbr::OriginalName("TE_SmokeId")] TeSmokeId = 426,
  }

  #endregion

  #region Messages
  public sealed partial class CMsgTEArmorRicochet : pb::IMessage<CMsgTEArmorRicochet> {
    private static readonly pb::MessageParser<CMsgTEArmorRicochet> _parser = new pb::MessageParser<CMsgTEArmorRicochet>(() => new CMsgTEArmorRicochet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEArmorRicochet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEArmorRicochet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEArmorRicochet(CMsgTEArmorRicochet other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEArmorRicochet Clone() {
      return new CMsgTEArmorRicochet(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Proto.Dota.CMsgVector pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private global::Proto.Dota.CMsgVector dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEArmorRicochet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEArmorRicochet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEArmorRicochet other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Proto.Dota.CMsgVector();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::Proto.Dota.CMsgVector();
        }
        Dir.MergeFrom(other.Dir);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            if (dir_ == null) {
              dir_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(dir_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBaseBeam : pb::IMessage<CMsgTEBaseBeam> {
    private static readonly pb::MessageParser<CMsgTEBaseBeam> _parser = new pb::MessageParser<CMsgTEBaseBeam>(() => new CMsgTEBaseBeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBaseBeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBaseBeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBaseBeam(CMsgTEBaseBeam other) : this() {
      modelindex_ = other.modelindex_;
      haloindex_ = other.haloindex_;
      startframe_ = other.startframe_;
      framerate_ = other.framerate_;
      life_ = other.life_;
      width_ = other.width_;
      endwidth_ = other.endwidth_;
      fadelength_ = other.fadelength_;
      amplitude_ = other.amplitude_;
      color_ = other.color_;
      speed_ = other.speed_;
      flags_ = other.flags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBaseBeam Clone() {
      return new CMsgTEBaseBeam(this);
    }

    /// <summary>Field number for the "modelindex" field.</summary>
    public const int ModelindexFieldNumber = 1;
    private ulong modelindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Modelindex {
      get { return modelindex_; }
      set {
        modelindex_ = value;
      }
    }

    /// <summary>Field number for the "haloindex" field.</summary>
    public const int HaloindexFieldNumber = 2;
    private ulong haloindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Haloindex {
      get { return haloindex_; }
      set {
        haloindex_ = value;
      }
    }

    /// <summary>Field number for the "startframe" field.</summary>
    public const int StartframeFieldNumber = 3;
    private uint startframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Startframe {
      get { return startframe_; }
      set {
        startframe_ = value;
      }
    }

    /// <summary>Field number for the "framerate" field.</summary>
    public const int FramerateFieldNumber = 4;
    private uint framerate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Framerate {
      get { return framerate_; }
      set {
        framerate_ = value;
      }
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 5;
    private float life_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 6;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "endwidth" field.</summary>
    public const int EndwidthFieldNumber = 7;
    private float endwidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Endwidth {
      get { return endwidth_; }
      set {
        endwidth_ = value;
      }
    }

    /// <summary>Field number for the "fadelength" field.</summary>
    public const int FadelengthFieldNumber = 8;
    private uint fadelength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fadelength {
      get { return fadelength_; }
      set {
        fadelength_ = value;
      }
    }

    /// <summary>Field number for the "amplitude" field.</summary>
    public const int AmplitudeFieldNumber = 9;
    private float amplitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amplitude {
      get { return amplitude_; }
      set {
        amplitude_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 10;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 11;
    private uint speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 12;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBaseBeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBaseBeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Modelindex != other.Modelindex) return false;
      if (Haloindex != other.Haloindex) return false;
      if (Startframe != other.Startframe) return false;
      if (Framerate != other.Framerate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Life, other.Life)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Endwidth, other.Endwidth)) return false;
      if (Fadelength != other.Fadelength) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amplitude, other.Amplitude)) return false;
      if (Color != other.Color) return false;
      if (Speed != other.Speed) return false;
      if (Flags != other.Flags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Modelindex != 0UL) hash ^= Modelindex.GetHashCode();
      if (Haloindex != 0UL) hash ^= Haloindex.GetHashCode();
      if (Startframe != 0) hash ^= Startframe.GetHashCode();
      if (Framerate != 0) hash ^= Framerate.GetHashCode();
      if (Life != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Life);
      if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (Endwidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Endwidth);
      if (Fadelength != 0) hash ^= Fadelength.GetHashCode();
      if (Amplitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amplitude);
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Modelindex != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Modelindex);
      }
      if (Haloindex != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(Haloindex);
      }
      if (Startframe != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Startframe);
      }
      if (Framerate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Framerate);
      }
      if (Life != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Life);
      }
      if (Width != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Width);
      }
      if (Endwidth != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Endwidth);
      }
      if (Fadelength != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Fadelength);
      }
      if (Amplitude != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Amplitude);
      }
      if (Color != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Color);
      }
      if (Speed != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Speed);
      }
      if (Flags != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Modelindex != 0UL) {
        size += 1 + 8;
      }
      if (Haloindex != 0UL) {
        size += 1 + 8;
      }
      if (Startframe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Startframe);
      }
      if (Framerate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Framerate);
      }
      if (Life != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Endwidth != 0F) {
        size += 1 + 4;
      }
      if (Fadelength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fadelength);
      }
      if (Amplitude != 0F) {
        size += 1 + 4;
      }
      if (Color != 0) {
        size += 1 + 4;
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBaseBeam other) {
      if (other == null) {
        return;
      }
      if (other.Modelindex != 0UL) {
        Modelindex = other.Modelindex;
      }
      if (other.Haloindex != 0UL) {
        Haloindex = other.Haloindex;
      }
      if (other.Startframe != 0) {
        Startframe = other.Startframe;
      }
      if (other.Framerate != 0) {
        Framerate = other.Framerate;
      }
      if (other.Life != 0F) {
        Life = other.Life;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Endwidth != 0F) {
        Endwidth = other.Endwidth;
      }
      if (other.Fadelength != 0) {
        Fadelength = other.Fadelength;
      }
      if (other.Amplitude != 0F) {
        Amplitude = other.Amplitude;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Modelindex = input.ReadFixed64();
            break;
          }
          case 17: {
            Haloindex = input.ReadFixed64();
            break;
          }
          case 24: {
            Startframe = input.ReadUInt32();
            break;
          }
          case 32: {
            Framerate = input.ReadUInt32();
            break;
          }
          case 45: {
            Life = input.ReadFloat();
            break;
          }
          case 53: {
            Width = input.ReadFloat();
            break;
          }
          case 61: {
            Endwidth = input.ReadFloat();
            break;
          }
          case 64: {
            Fadelength = input.ReadUInt32();
            break;
          }
          case 77: {
            Amplitude = input.ReadFloat();
            break;
          }
          case 85: {
            Color = input.ReadFixed32();
            break;
          }
          case 88: {
            Speed = input.ReadUInt32();
            break;
          }
          case 96: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBeamEntPoint : pb::IMessage<CMsgTEBeamEntPoint> {
    private static readonly pb::MessageParser<CMsgTEBeamEntPoint> _parser = new pb::MessageParser<CMsgTEBeamEntPoint>(() => new CMsgTEBeamEntPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBeamEntPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamEntPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamEntPoint(CMsgTEBeamEntPoint other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      startentity_ = other.startentity_;
      endentity_ = other.endentity_;
      start_ = other.start_ != null ? other.start_.Clone() : null;
      end_ = other.end_ != null ? other.end_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamEntPoint Clone() {
      return new CMsgTEBeamEntPoint(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Proto.Dota.CMsgTEBaseBeam base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgTEBaseBeam Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "startentity" field.</summary>
    public const int StartentityFieldNumber = 2;
    private uint startentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Startentity {
      get { return startentity_; }
      set {
        startentity_ = value;
      }
    }

    /// <summary>Field number for the "endentity" field.</summary>
    public const int EndentityFieldNumber = 3;
    private uint endentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Endentity {
      get { return endentity_; }
      set {
        endentity_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 4;
    private global::Proto.Dota.CMsgVector start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private global::Proto.Dota.CMsgVector end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBeamEntPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBeamEntPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (Startentity != other.Startentity) return false;
      if (Endentity != other.Endentity) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (Startentity != 0) hash ^= Startentity.GetHashCode();
      if (Endentity != 0) hash ^= Endentity.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (Startentity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Startentity);
      }
      if (Endentity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Endentity);
      }
      if (start_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (Startentity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Startentity);
      }
      if (Endentity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Endentity);
      }
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBeamEntPoint other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Proto.Dota.CMsgTEBaseBeam();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.Startentity != 0) {
        Startentity = other.Startentity;
      }
      if (other.Endentity != 0) {
        Endentity = other.Endentity;
      }
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Proto.Dota.CMsgVector();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          end_ = new global::Proto.Dota.CMsgVector();
        }
        End.MergeFrom(other.End);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Proto.Dota.CMsgTEBaseBeam();
            }
            input.ReadMessage(base_);
            break;
          }
          case 16: {
            Startentity = input.ReadUInt32();
            break;
          }
          case 24: {
            Endentity = input.ReadUInt32();
            break;
          }
          case 34: {
            if (start_ == null) {
              start_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(start_);
            break;
          }
          case 42: {
            if (end_ == null) {
              end_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(end_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBeamEnts : pb::IMessage<CMsgTEBeamEnts> {
    private static readonly pb::MessageParser<CMsgTEBeamEnts> _parser = new pb::MessageParser<CMsgTEBeamEnts>(() => new CMsgTEBeamEnts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBeamEnts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamEnts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamEnts(CMsgTEBeamEnts other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      startentity_ = other.startentity_;
      endentity_ = other.endentity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamEnts Clone() {
      return new CMsgTEBeamEnts(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Proto.Dota.CMsgTEBaseBeam base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgTEBaseBeam Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "startentity" field.</summary>
    public const int StartentityFieldNumber = 2;
    private uint startentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Startentity {
      get { return startentity_; }
      set {
        startentity_ = value;
      }
    }

    /// <summary>Field number for the "endentity" field.</summary>
    public const int EndentityFieldNumber = 3;
    private uint endentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Endentity {
      get { return endentity_; }
      set {
        endentity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBeamEnts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBeamEnts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (Startentity != other.Startentity) return false;
      if (Endentity != other.Endentity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (Startentity != 0) hash ^= Startentity.GetHashCode();
      if (Endentity != 0) hash ^= Endentity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (Startentity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Startentity);
      }
      if (Endentity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Endentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (Startentity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Startentity);
      }
      if (Endentity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Endentity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBeamEnts other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Proto.Dota.CMsgTEBaseBeam();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.Startentity != 0) {
        Startentity = other.Startentity;
      }
      if (other.Endentity != 0) {
        Endentity = other.Endentity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Proto.Dota.CMsgTEBaseBeam();
            }
            input.ReadMessage(base_);
            break;
          }
          case 16: {
            Startentity = input.ReadUInt32();
            break;
          }
          case 24: {
            Endentity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBeamPoints : pb::IMessage<CMsgTEBeamPoints> {
    private static readonly pb::MessageParser<CMsgTEBeamPoints> _parser = new pb::MessageParser<CMsgTEBeamPoints>(() => new CMsgTEBeamPoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBeamPoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamPoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamPoints(CMsgTEBeamPoints other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      start_ = other.start_ != null ? other.start_.Clone() : null;
      end_ = other.end_ != null ? other.end_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamPoints Clone() {
      return new CMsgTEBeamPoints(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Proto.Dota.CMsgTEBaseBeam base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgTEBaseBeam Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private global::Proto.Dota.CMsgVector start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private global::Proto.Dota.CMsgVector end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBeamPoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBeamPoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (start_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBeamPoints other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Proto.Dota.CMsgTEBaseBeam();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Proto.Dota.CMsgVector();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          end_ = new global::Proto.Dota.CMsgVector();
        }
        End.MergeFrom(other.End);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Proto.Dota.CMsgTEBaseBeam();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (start_ == null) {
              start_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(start_);
            break;
          }
          case 26: {
            if (end_ == null) {
              end_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(end_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBeamRing : pb::IMessage<CMsgTEBeamRing> {
    private static readonly pb::MessageParser<CMsgTEBeamRing> _parser = new pb::MessageParser<CMsgTEBeamRing>(() => new CMsgTEBeamRing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBeamRing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamRing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamRing(CMsgTEBeamRing other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      startentity_ = other.startentity_;
      endentity_ = other.endentity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBeamRing Clone() {
      return new CMsgTEBeamRing(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Proto.Dota.CMsgTEBaseBeam base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgTEBaseBeam Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "startentity" field.</summary>
    public const int StartentityFieldNumber = 2;
    private uint startentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Startentity {
      get { return startentity_; }
      set {
        startentity_ = value;
      }
    }

    /// <summary>Field number for the "endentity" field.</summary>
    public const int EndentityFieldNumber = 3;
    private uint endentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Endentity {
      get { return endentity_; }
      set {
        endentity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBeamRing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBeamRing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (Startentity != other.Startentity) return false;
      if (Endentity != other.Endentity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (Startentity != 0) hash ^= Startentity.GetHashCode();
      if (Endentity != 0) hash ^= Endentity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (Startentity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Startentity);
      }
      if (Endentity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Endentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (Startentity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Startentity);
      }
      if (Endentity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Endentity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBeamRing other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Proto.Dota.CMsgTEBaseBeam();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.Startentity != 0) {
        Startentity = other.Startentity;
      }
      if (other.Endentity != 0) {
        Endentity = other.Endentity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Proto.Dota.CMsgTEBaseBeam();
            }
            input.ReadMessage(base_);
            break;
          }
          case 16: {
            Startentity = input.ReadUInt32();
            break;
          }
          case 24: {
            Endentity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBreakModel : pb::IMessage<CMsgTEBreakModel> {
    private static readonly pb::MessageParser<CMsgTEBreakModel> _parser = new pb::MessageParser<CMsgTEBreakModel>(() => new CMsgTEBreakModel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBreakModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBreakModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBreakModel(CMsgTEBreakModel other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      angles_ = other.angles_ != null ? other.angles_.Clone() : null;
      size_ = other.size_ != null ? other.size_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      randomization_ = other.randomization_;
      modelindex_ = other.modelindex_;
      count_ = other.count_;
      time_ = other.time_;
      flags_ = other.flags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBreakModel Clone() {
      return new CMsgTEBreakModel(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "angles" field.</summary>
    public const int AnglesFieldNumber = 2;
    private global::Proto.Dota.CMsgQAngle angles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgQAngle Angles {
      get { return angles_; }
      set {
        angles_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private global::Proto.Dota.CMsgVector size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 4;
    private global::Proto.Dota.CMsgVector velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "randomization" field.</summary>
    public const int RandomizationFieldNumber = 5;
    private uint randomization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Randomization {
      get { return randomization_; }
      set {
        randomization_ = value;
      }
    }

    /// <summary>Field number for the "modelindex" field.</summary>
    public const int ModelindexFieldNumber = 6;
    private ulong modelindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Modelindex {
      get { return modelindex_; }
      set {
        modelindex_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 7;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 8;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 9;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBreakModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBreakModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Angles, other.Angles)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (Randomization != other.Randomization) return false;
      if (Modelindex != other.Modelindex) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (Flags != other.Flags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (angles_ != null) hash ^= Angles.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (Randomization != 0) hash ^= Randomization.GetHashCode();
      if (Modelindex != 0UL) hash ^= Modelindex.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (angles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Angles);
      }
      if (size_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Size);
      }
      if (velocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Velocity);
      }
      if (Randomization != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Randomization);
      }
      if (Modelindex != 0UL) {
        output.WriteRawTag(49);
        output.WriteFixed64(Modelindex);
      }
      if (Count != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Count);
      }
      if (Time != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Time);
      }
      if (Flags != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (angles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angles);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (Randomization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Randomization);
      }
      if (Modelindex != 0UL) {
        size += 1 + 8;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBreakModel other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.angles_ != null) {
        if (angles_ == null) {
          angles_ = new global::Proto.Dota.CMsgQAngle();
        }
        Angles.MergeFrom(other.Angles);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::Proto.Dota.CMsgVector();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Proto.Dota.CMsgVector();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.Randomization != 0) {
        Randomization = other.Randomization;
      }
      if (other.Modelindex != 0UL) {
        Modelindex = other.Modelindex;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (angles_ == null) {
              angles_ = new global::Proto.Dota.CMsgQAngle();
            }
            input.ReadMessage(angles_);
            break;
          }
          case 26: {
            if (size_ == null) {
              size_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(size_);
            break;
          }
          case 34: {
            if (velocity_ == null) {
              velocity_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 40: {
            Randomization = input.ReadUInt32();
            break;
          }
          case 49: {
            Modelindex = input.ReadFixed64();
            break;
          }
          case 56: {
            Count = input.ReadUInt32();
            break;
          }
          case 69: {
            Time = input.ReadFloat();
            break;
          }
          case 72: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBSPDecal : pb::IMessage<CMsgTEBSPDecal> {
    private static readonly pb::MessageParser<CMsgTEBSPDecal> _parser = new pb::MessageParser<CMsgTEBSPDecal>(() => new CMsgTEBSPDecal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBSPDecal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBSPDecal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBSPDecal(CMsgTEBSPDecal other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      normal_ = other.normal_ != null ? other.normal_.Clone() : null;
      saxis_ = other.saxis_ != null ? other.saxis_.Clone() : null;
      entity_ = other.entity_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBSPDecal Clone() {
      return new CMsgTEBSPDecal(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 2;
    private global::Proto.Dota.CMsgVector normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "saxis" field.</summary>
    public const int SaxisFieldNumber = 3;
    private global::Proto.Dota.CMsgVector saxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Saxis {
      get { return saxis_; }
      set {
        saxis_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 4;
    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 5;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBSPDecal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBSPDecal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (!object.Equals(Saxis, other.Saxis)) return false;
      if (Entity != other.Entity) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (saxis_ != null) hash ^= Saxis.GetHashCode();
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (normal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Normal);
      }
      if (saxis_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Saxis);
      }
      if (Entity != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Entity);
      }
      if (Index != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (saxis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Saxis);
      }
      if (Entity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entity);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBSPDecal other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = new global::Proto.Dota.CMsgVector();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.saxis_ != null) {
        if (saxis_ == null) {
          saxis_ = new global::Proto.Dota.CMsgVector();
        }
        Saxis.MergeFrom(other.Saxis);
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (normal_ == null) {
              normal_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(normal_);
            break;
          }
          case 26: {
            if (saxis_ == null) {
              saxis_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(saxis_);
            break;
          }
          case 32: {
            Entity = input.ReadUInt32();
            break;
          }
          case 40: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBubbles : pb::IMessage<CMsgTEBubbles> {
    private static readonly pb::MessageParser<CMsgTEBubbles> _parser = new pb::MessageParser<CMsgTEBubbles>(() => new CMsgTEBubbles());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBubbles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBubbles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBubbles(CMsgTEBubbles other) : this() {
      mins_ = other.mins_ != null ? other.mins_.Clone() : null;
      maxs_ = other.maxs_ != null ? other.maxs_.Clone() : null;
      height_ = other.height_;
      count_ = other.count_;
      speed_ = other.speed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBubbles Clone() {
      return new CMsgTEBubbles(this);
    }

    /// <summary>Field number for the "mins" field.</summary>
    public const int MinsFieldNumber = 1;
    private global::Proto.Dota.CMsgVector mins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Mins {
      get { return mins_; }
      set {
        mins_ = value;
      }
    }

    /// <summary>Field number for the "maxs" field.</summary>
    public const int MaxsFieldNumber = 2;
    private global::Proto.Dota.CMsgVector maxs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Maxs {
      get { return maxs_; }
      set {
        maxs_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBubbles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBubbles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mins, other.Mins)) return false;
      if (!object.Equals(Maxs, other.Maxs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mins_ != null) hash ^= Mins.GetHashCode();
      if (maxs_ != null) hash ^= Maxs.GetHashCode();
      if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mins_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mins);
      }
      if (maxs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Maxs);
      }
      if (Height != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Height);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (Speed != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mins_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mins);
      }
      if (maxs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maxs);
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBubbles other) {
      if (other == null) {
        return;
      }
      if (other.mins_ != null) {
        if (mins_ == null) {
          mins_ = new global::Proto.Dota.CMsgVector();
        }
        Mins.MergeFrom(other.Mins);
      }
      if (other.maxs_ != null) {
        if (maxs_ == null) {
          maxs_ = new global::Proto.Dota.CMsgVector();
        }
        Maxs.MergeFrom(other.Maxs);
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mins_ == null) {
              mins_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(mins_);
            break;
          }
          case 18: {
            if (maxs_ == null) {
              maxs_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(maxs_);
            break;
          }
          case 29: {
            Height = input.ReadFloat();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 45: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBubbleTrail : pb::IMessage<CMsgTEBubbleTrail> {
    private static readonly pb::MessageParser<CMsgTEBubbleTrail> _parser = new pb::MessageParser<CMsgTEBubbleTrail>(() => new CMsgTEBubbleTrail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBubbleTrail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBubbleTrail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBubbleTrail(CMsgTEBubbleTrail other) : this() {
      mins_ = other.mins_ != null ? other.mins_.Clone() : null;
      maxs_ = other.maxs_ != null ? other.maxs_.Clone() : null;
      waterz_ = other.waterz_;
      count_ = other.count_;
      speed_ = other.speed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBubbleTrail Clone() {
      return new CMsgTEBubbleTrail(this);
    }

    /// <summary>Field number for the "mins" field.</summary>
    public const int MinsFieldNumber = 1;
    private global::Proto.Dota.CMsgVector mins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Mins {
      get { return mins_; }
      set {
        mins_ = value;
      }
    }

    /// <summary>Field number for the "maxs" field.</summary>
    public const int MaxsFieldNumber = 2;
    private global::Proto.Dota.CMsgVector maxs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Maxs {
      get { return maxs_; }
      set {
        maxs_ = value;
      }
    }

    /// <summary>Field number for the "waterz" field.</summary>
    public const int WaterzFieldNumber = 3;
    private float waterz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Waterz {
      get { return waterz_; }
      set {
        waterz_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBubbleTrail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBubbleTrail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mins, other.Mins)) return false;
      if (!object.Equals(Maxs, other.Maxs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Waterz, other.Waterz)) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mins_ != null) hash ^= Mins.GetHashCode();
      if (maxs_ != null) hash ^= Maxs.GetHashCode();
      if (Waterz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Waterz);
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mins_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mins);
      }
      if (maxs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Maxs);
      }
      if (Waterz != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Waterz);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (Speed != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mins_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mins);
      }
      if (maxs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maxs);
      }
      if (Waterz != 0F) {
        size += 1 + 4;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBubbleTrail other) {
      if (other == null) {
        return;
      }
      if (other.mins_ != null) {
        if (mins_ == null) {
          mins_ = new global::Proto.Dota.CMsgVector();
        }
        Mins.MergeFrom(other.Mins);
      }
      if (other.maxs_ != null) {
        if (maxs_ == null) {
          maxs_ = new global::Proto.Dota.CMsgVector();
        }
        Maxs.MergeFrom(other.Maxs);
      }
      if (other.Waterz != 0F) {
        Waterz = other.Waterz;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mins_ == null) {
              mins_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(mins_);
            break;
          }
          case 18: {
            if (maxs_ == null) {
              maxs_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(maxs_);
            break;
          }
          case 29: {
            Waterz = input.ReadFloat();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 45: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEDecal : pb::IMessage<CMsgTEDecal> {
    private static readonly pb::MessageParser<CMsgTEDecal> _parser = new pb::MessageParser<CMsgTEDecal>(() => new CMsgTEDecal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEDecal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEDecal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEDecal(CMsgTEDecal other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      start_ = other.start_ != null ? other.start_.Clone() : null;
      entity_ = other.entity_;
      hitbox_ = other.hitbox_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEDecal Clone() {
      return new CMsgTEDecal(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private global::Proto.Dota.CMsgVector start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 3;
    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "hitbox" field.</summary>
    public const int HitboxFieldNumber = 4;
    private uint hitbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hitbox {
      get { return hitbox_; }
      set {
        hitbox_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 5;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEDecal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEDecal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (Entity != other.Entity) return false;
      if (Hitbox != other.Hitbox) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (Hitbox != 0) hash ^= Hitbox.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (start_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (Entity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Entity);
      }
      if (Hitbox != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Hitbox);
      }
      if (Index != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (Entity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entity);
      }
      if (Hitbox != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hitbox);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEDecal other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Proto.Dota.CMsgVector();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      if (other.Hitbox != 0) {
        Hitbox = other.Hitbox;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (start_ == null) {
              start_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(start_);
            break;
          }
          case 24: {
            Entity = input.ReadUInt32();
            break;
          }
          case 32: {
            Hitbox = input.ReadUInt32();
            break;
          }
          case 40: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgEffectData : pb::IMessage<CMsgEffectData> {
    private static readonly pb::MessageParser<CMsgEffectData> _parser = new pb::MessageParser<CMsgEffectData>(() => new CMsgEffectData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgEffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgEffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgEffectData(CMsgEffectData other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      start_ = other.start_ != null ? other.start_.Clone() : null;
      normal_ = other.normal_ != null ? other.normal_.Clone() : null;
      angles_ = other.angles_ != null ? other.angles_.Clone() : null;
      entity_ = other.entity_;
      otherentity_ = other.otherentity_;
      scale_ = other.scale_;
      magnitude_ = other.magnitude_;
      radius_ = other.radius_;
      surfaceprop_ = other.surfaceprop_;
      effectindex_ = other.effectindex_;
      damagetype_ = other.damagetype_;
      material_ = other.material_;
      hitbox_ = other.hitbox_;
      color_ = other.color_;
      flags_ = other.flags_;
      attachmentindex_ = other.attachmentindex_;
      effectname_ = other.effectname_;
      attachmentname_ = other.attachmentname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgEffectData Clone() {
      return new CMsgEffectData(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private global::Proto.Dota.CMsgVector start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 3;
    private global::Proto.Dota.CMsgVector normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "angles" field.</summary>
    public const int AnglesFieldNumber = 4;
    private global::Proto.Dota.CMsgQAngle angles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgQAngle Angles {
      get { return angles_; }
      set {
        angles_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 5;
    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "otherentity" field.</summary>
    public const int OtherentityFieldNumber = 6;
    private uint otherentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Otherentity {
      get { return otherentity_; }
      set {
        otherentity_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 7;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "magnitude" field.</summary>
    public const int MagnitudeFieldNumber = 8;
    private float magnitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Magnitude {
      get { return magnitude_; }
      set {
        magnitude_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 9;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "surfaceprop" field.</summary>
    public const int SurfacepropFieldNumber = 10;
    private uint surfaceprop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Surfaceprop {
      get { return surfaceprop_; }
      set {
        surfaceprop_ = value;
      }
    }

    /// <summary>Field number for the "effectindex" field.</summary>
    public const int EffectindexFieldNumber = 11;
    private ulong effectindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Effectindex {
      get { return effectindex_; }
      set {
        effectindex_ = value;
      }
    }

    /// <summary>Field number for the "damagetype" field.</summary>
    public const int DamagetypeFieldNumber = 12;
    private uint damagetype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damagetype {
      get { return damagetype_; }
      set {
        damagetype_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 13;
    private uint material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "hitbox" field.</summary>
    public const int HitboxFieldNumber = 14;
    private uint hitbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hitbox {
      get { return hitbox_; }
      set {
        hitbox_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 15;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 16;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "attachmentindex" field.</summary>
    public const int AttachmentindexFieldNumber = 17;
    private int attachmentindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attachmentindex {
      get { return attachmentindex_; }
      set {
        attachmentindex_ = value;
      }
    }

    /// <summary>Field number for the "effectname" field.</summary>
    public const int EffectnameFieldNumber = 18;
    private uint effectname_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectname {
      get { return effectname_; }
      set {
        effectname_ = value;
      }
    }

    /// <summary>Field number for the "attachmentname" field.</summary>
    public const int AttachmentnameFieldNumber = 19;
    private uint attachmentname_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attachmentname {
      get { return attachmentname_; }
      set {
        attachmentname_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgEffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgEffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (!object.Equals(Angles, other.Angles)) return false;
      if (Entity != other.Entity) return false;
      if (Otherentity != other.Otherentity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Magnitude, other.Magnitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (Surfaceprop != other.Surfaceprop) return false;
      if (Effectindex != other.Effectindex) return false;
      if (Damagetype != other.Damagetype) return false;
      if (Material != other.Material) return false;
      if (Hitbox != other.Hitbox) return false;
      if (Color != other.Color) return false;
      if (Flags != other.Flags) return false;
      if (Attachmentindex != other.Attachmentindex) return false;
      if (Effectname != other.Effectname) return false;
      if (Attachmentname != other.Attachmentname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (angles_ != null) hash ^= Angles.GetHashCode();
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (Otherentity != 0) hash ^= Otherentity.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Magnitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Magnitude);
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (Surfaceprop != 0) hash ^= Surfaceprop.GetHashCode();
      if (Effectindex != 0UL) hash ^= Effectindex.GetHashCode();
      if (Damagetype != 0) hash ^= Damagetype.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      if (Hitbox != 0) hash ^= Hitbox.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Attachmentindex != 0) hash ^= Attachmentindex.GetHashCode();
      if (Effectname != 0) hash ^= Effectname.GetHashCode();
      if (Attachmentname != 0) hash ^= Attachmentname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (start_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (normal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Normal);
      }
      if (angles_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Angles);
      }
      if (Entity != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(Entity);
      }
      if (Otherentity != 0) {
        output.WriteRawTag(53);
        output.WriteFixed32(Otherentity);
      }
      if (Scale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Scale);
      }
      if (Magnitude != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Magnitude);
      }
      if (Radius != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Radius);
      }
      if (Surfaceprop != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Surfaceprop);
      }
      if (Effectindex != 0UL) {
        output.WriteRawTag(89);
        output.WriteFixed64(Effectindex);
      }
      if (Damagetype != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Damagetype);
      }
      if (Material != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Material);
      }
      if (Hitbox != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Hitbox);
      }
      if (Color != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Color);
      }
      if (Flags != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Flags);
      }
      if (Attachmentindex != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Attachmentindex);
      }
      if (Effectname != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Effectname);
      }
      if (Attachmentname != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Attachmentname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (angles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angles);
      }
      if (Entity != 0) {
        size += 1 + 4;
      }
      if (Otherentity != 0) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Magnitude != 0F) {
        size += 1 + 4;
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (Surfaceprop != 0) {
        size += 1 + 4;
      }
      if (Effectindex != 0UL) {
        size += 1 + 8;
      }
      if (Damagetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damagetype);
      }
      if (Material != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Material);
      }
      if (Hitbox != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hitbox);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (Flags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (Attachmentindex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Attachmentindex);
      }
      if (Effectname != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Effectname);
      }
      if (Attachmentname != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Attachmentname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgEffectData other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Proto.Dota.CMsgVector();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = new global::Proto.Dota.CMsgVector();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.angles_ != null) {
        if (angles_ == null) {
          angles_ = new global::Proto.Dota.CMsgQAngle();
        }
        Angles.MergeFrom(other.Angles);
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      if (other.Otherentity != 0) {
        Otherentity = other.Otherentity;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Magnitude != 0F) {
        Magnitude = other.Magnitude;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.Surfaceprop != 0) {
        Surfaceprop = other.Surfaceprop;
      }
      if (other.Effectindex != 0UL) {
        Effectindex = other.Effectindex;
      }
      if (other.Damagetype != 0) {
        Damagetype = other.Damagetype;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.Hitbox != 0) {
        Hitbox = other.Hitbox;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Attachmentindex != 0) {
        Attachmentindex = other.Attachmentindex;
      }
      if (other.Effectname != 0) {
        Effectname = other.Effectname;
      }
      if (other.Attachmentname != 0) {
        Attachmentname = other.Attachmentname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (start_ == null) {
              start_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(start_);
            break;
          }
          case 26: {
            if (normal_ == null) {
              normal_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(normal_);
            break;
          }
          case 34: {
            if (angles_ == null) {
              angles_ = new global::Proto.Dota.CMsgQAngle();
            }
            input.ReadMessage(angles_);
            break;
          }
          case 45: {
            Entity = input.ReadFixed32();
            break;
          }
          case 53: {
            Otherentity = input.ReadFixed32();
            break;
          }
          case 61: {
            Scale = input.ReadFloat();
            break;
          }
          case 69: {
            Magnitude = input.ReadFloat();
            break;
          }
          case 77: {
            Radius = input.ReadFloat();
            break;
          }
          case 85: {
            Surfaceprop = input.ReadFixed32();
            break;
          }
          case 89: {
            Effectindex = input.ReadFixed64();
            break;
          }
          case 96: {
            Damagetype = input.ReadUInt32();
            break;
          }
          case 104: {
            Material = input.ReadUInt32();
            break;
          }
          case 112: {
            Hitbox = input.ReadUInt32();
            break;
          }
          case 120: {
            Color = input.ReadUInt32();
            break;
          }
          case 128: {
            Flags = input.ReadUInt32();
            break;
          }
          case 136: {
            Attachmentindex = input.ReadInt32();
            break;
          }
          case 144: {
            Effectname = input.ReadUInt32();
            break;
          }
          case 152: {
            Attachmentname = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEEffectDispatch : pb::IMessage<CMsgTEEffectDispatch> {
    private static readonly pb::MessageParser<CMsgTEEffectDispatch> _parser = new pb::MessageParser<CMsgTEEffectDispatch>(() => new CMsgTEEffectDispatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEEffectDispatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEEffectDispatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEEffectDispatch(CMsgTEEffectDispatch other) : this() {
      effectdata_ = other.effectdata_ != null ? other.effectdata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEEffectDispatch Clone() {
      return new CMsgTEEffectDispatch(this);
    }

    /// <summary>Field number for the "effectdata" field.</summary>
    public const int EffectdataFieldNumber = 1;
    private global::Proto.Dota.CMsgEffectData effectdata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgEffectData Effectdata {
      get { return effectdata_; }
      set {
        effectdata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEEffectDispatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEEffectDispatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Effectdata, other.Effectdata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectdata_ != null) hash ^= Effectdata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectdata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Effectdata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effectdata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEEffectDispatch other) {
      if (other == null) {
        return;
      }
      if (other.effectdata_ != null) {
        if (effectdata_ == null) {
          effectdata_ = new global::Proto.Dota.CMsgEffectData();
        }
        Effectdata.MergeFrom(other.Effectdata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectdata_ == null) {
              effectdata_ = new global::Proto.Dota.CMsgEffectData();
            }
            input.ReadMessage(effectdata_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEEnergySplash : pb::IMessage<CMsgTEEnergySplash> {
    private static readonly pb::MessageParser<CMsgTEEnergySplash> _parser = new pb::MessageParser<CMsgTEEnergySplash>(() => new CMsgTEEnergySplash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEEnergySplash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEEnergySplash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEEnergySplash(CMsgTEEnergySplash other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      explosive_ = other.explosive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEEnergySplash Clone() {
      return new CMsgTEEnergySplash(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Proto.Dota.CMsgVector pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private global::Proto.Dota.CMsgVector dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "explosive" field.</summary>
    public const int ExplosiveFieldNumber = 3;
    private bool explosive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Explosive {
      get { return explosive_; }
      set {
        explosive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEEnergySplash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEEnergySplash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Explosive != other.Explosive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Explosive != false) hash ^= Explosive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dir);
      }
      if (Explosive != false) {
        output.WriteRawTag(24);
        output.WriteBool(Explosive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Explosive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEEnergySplash other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Proto.Dota.CMsgVector();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::Proto.Dota.CMsgVector();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Explosive != false) {
        Explosive = other.Explosive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            if (dir_ == null) {
              dir_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 24: {
            Explosive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEFizz : pb::IMessage<CMsgTEFizz> {
    private static readonly pb::MessageParser<CMsgTEFizz> _parser = new pb::MessageParser<CMsgTEFizz>(() => new CMsgTEFizz());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEFizz> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEFizz() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEFizz(CMsgTEFizz other) : this() {
      entity_ = other.entity_;
      density_ = other.density_;
      current_ = other.current_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEFizz Clone() {
      return new CMsgTEFizz(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "density" field.</summary>
    public const int DensityFieldNumber = 2;
    private uint density_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Density {
      get { return density_; }
      set {
        density_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 3;
    private int current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEFizz);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEFizz other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (Density != other.Density) return false;
      if (Current != other.Current) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (Density != 0) hash ^= Density.GetHashCode();
      if (Current != 0) hash ^= Current.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Entity);
      }
      if (Density != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Density);
      }
      if (Current != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entity);
      }
      if (Density != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Density);
      }
      if (Current != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Current);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEFizz other) {
      if (other == null) {
        return;
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      if (other.Density != 0) {
        Density = other.Density;
      }
      if (other.Current != 0) {
        Current = other.Current;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = input.ReadUInt32();
            break;
          }
          case 16: {
            Density = input.ReadUInt32();
            break;
          }
          case 24: {
            Current = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEShatterSurface : pb::IMessage<CMsgTEShatterSurface> {
    private static readonly pb::MessageParser<CMsgTEShatterSurface> _parser = new pb::MessageParser<CMsgTEShatterSurface>(() => new CMsgTEShatterSurface());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEShatterSurface> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEShatterSurface() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEShatterSurface(CMsgTEShatterSurface other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      angles_ = other.angles_ != null ? other.angles_.Clone() : null;
      force_ = other.force_ != null ? other.force_.Clone() : null;
      forcepos_ = other.forcepos_ != null ? other.forcepos_.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
      shardsize_ = other.shardsize_;
      surfacetype_ = other.surfacetype_;
      frontcolor_ = other.frontcolor_;
      backcolor_ = other.backcolor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEShatterSurface Clone() {
      return new CMsgTEShatterSurface(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "angles" field.</summary>
    public const int AnglesFieldNumber = 2;
    private global::Proto.Dota.CMsgQAngle angles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgQAngle Angles {
      get { return angles_; }
      set {
        angles_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 3;
    private global::Proto.Dota.CMsgVector force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "forcepos" field.</summary>
    public const int ForceposFieldNumber = 4;
    private global::Proto.Dota.CMsgVector forcepos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Forcepos {
      get { return forcepos_; }
      set {
        forcepos_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 6;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "shardsize" field.</summary>
    public const int ShardsizeFieldNumber = 7;
    private float shardsize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shardsize {
      get { return shardsize_; }
      set {
        shardsize_ = value;
      }
    }

    /// <summary>Field number for the "surfacetype" field.</summary>
    public const int SurfacetypeFieldNumber = 8;
    private uint surfacetype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Surfacetype {
      get { return surfacetype_; }
      set {
        surfacetype_ = value;
      }
    }

    /// <summary>Field number for the "frontcolor" field.</summary>
    public const int FrontcolorFieldNumber = 9;
    private uint frontcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frontcolor {
      get { return frontcolor_; }
      set {
        frontcolor_ = value;
      }
    }

    /// <summary>Field number for the "backcolor" field.</summary>
    public const int BackcolorFieldNumber = 10;
    private uint backcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Backcolor {
      get { return backcolor_; }
      set {
        backcolor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEShatterSurface);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEShatterSurface other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Angles, other.Angles)) return false;
      if (!object.Equals(Force, other.Force)) return false;
      if (!object.Equals(Forcepos, other.Forcepos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Shardsize, other.Shardsize)) return false;
      if (Surfacetype != other.Surfacetype) return false;
      if (Frontcolor != other.Frontcolor) return false;
      if (Backcolor != other.Backcolor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (angles_ != null) hash ^= Angles.GetHashCode();
      if (force_ != null) hash ^= Force.GetHashCode();
      if (forcepos_ != null) hash ^= Forcepos.GetHashCode();
      if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (Shardsize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Shardsize);
      if (Surfacetype != 0) hash ^= Surfacetype.GetHashCode();
      if (Frontcolor != 0) hash ^= Frontcolor.GetHashCode();
      if (Backcolor != 0) hash ^= Backcolor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (angles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Angles);
      }
      if (force_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Force);
      }
      if (forcepos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Forcepos);
      }
      if (Width != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Height);
      }
      if (Shardsize != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Shardsize);
      }
      if (Surfacetype != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Surfacetype);
      }
      if (Frontcolor != 0) {
        output.WriteRawTag(77);
        output.WriteFixed32(Frontcolor);
      }
      if (Backcolor != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Backcolor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (angles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angles);
      }
      if (force_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Force);
      }
      if (forcepos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forcepos);
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (Shardsize != 0F) {
        size += 1 + 4;
      }
      if (Surfacetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Surfacetype);
      }
      if (Frontcolor != 0) {
        size += 1 + 4;
      }
      if (Backcolor != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEShatterSurface other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.angles_ != null) {
        if (angles_ == null) {
          angles_ = new global::Proto.Dota.CMsgQAngle();
        }
        Angles.MergeFrom(other.Angles);
      }
      if (other.force_ != null) {
        if (force_ == null) {
          force_ = new global::Proto.Dota.CMsgVector();
        }
        Force.MergeFrom(other.Force);
      }
      if (other.forcepos_ != null) {
        if (forcepos_ == null) {
          forcepos_ = new global::Proto.Dota.CMsgVector();
        }
        Forcepos.MergeFrom(other.Forcepos);
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.Shardsize != 0F) {
        Shardsize = other.Shardsize;
      }
      if (other.Surfacetype != 0) {
        Surfacetype = other.Surfacetype;
      }
      if (other.Frontcolor != 0) {
        Frontcolor = other.Frontcolor;
      }
      if (other.Backcolor != 0) {
        Backcolor = other.Backcolor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (angles_ == null) {
              angles_ = new global::Proto.Dota.CMsgQAngle();
            }
            input.ReadMessage(angles_);
            break;
          }
          case 26: {
            if (force_ == null) {
              force_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(force_);
            break;
          }
          case 34: {
            if (forcepos_ == null) {
              forcepos_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(forcepos_);
            break;
          }
          case 45: {
            Width = input.ReadFloat();
            break;
          }
          case 53: {
            Height = input.ReadFloat();
            break;
          }
          case 61: {
            Shardsize = input.ReadFloat();
            break;
          }
          case 64: {
            Surfacetype = input.ReadUInt32();
            break;
          }
          case 77: {
            Frontcolor = input.ReadFixed32();
            break;
          }
          case 85: {
            Backcolor = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEGlowSprite : pb::IMessage<CMsgTEGlowSprite> {
    private static readonly pb::MessageParser<CMsgTEGlowSprite> _parser = new pb::MessageParser<CMsgTEGlowSprite>(() => new CMsgTEGlowSprite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEGlowSprite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEGlowSprite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEGlowSprite(CMsgTEGlowSprite other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      scale_ = other.scale_;
      life_ = other.life_;
      brightness_ = other.brightness_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEGlowSprite Clone() {
      return new CMsgTEGlowSprite(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 3;
    private float life_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "brightness" field.</summary>
    public const int BrightnessFieldNumber = 4;
    private uint brightness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Brightness {
      get { return brightness_; }
      set {
        brightness_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEGlowSprite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEGlowSprite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Life, other.Life)) return false;
      if (Brightness != other.Brightness) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Life != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Life);
      if (Brightness != 0) hash ^= Brightness.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Life != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Life);
      }
      if (Brightness != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Brightness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Life != 0F) {
        size += 1 + 4;
      }
      if (Brightness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Brightness);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEGlowSprite other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Life != 0F) {
        Life = other.Life;
      }
      if (other.Brightness != 0) {
        Brightness = other.Brightness;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Life = input.ReadFloat();
            break;
          }
          case 32: {
            Brightness = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEImpact : pb::IMessage<CMsgTEImpact> {
    private static readonly pb::MessageParser<CMsgTEImpact> _parser = new pb::MessageParser<CMsgTEImpact>(() => new CMsgTEImpact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEImpact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEImpact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEImpact(CMsgTEImpact other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      normal_ = other.normal_ != null ? other.normal_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEImpact Clone() {
      return new CMsgTEImpact(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 2;
    private global::Proto.Dota.CMsgVector normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEImpact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEImpact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (normal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Normal);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEImpact other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = new global::Proto.Dota.CMsgVector();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (normal_ == null) {
              normal_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(normal_);
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEMuzzleFlash : pb::IMessage<CMsgTEMuzzleFlash> {
    private static readonly pb::MessageParser<CMsgTEMuzzleFlash> _parser = new pb::MessageParser<CMsgTEMuzzleFlash>(() => new CMsgTEMuzzleFlash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEMuzzleFlash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEMuzzleFlash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEMuzzleFlash(CMsgTEMuzzleFlash other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      angles_ = other.angles_ != null ? other.angles_.Clone() : null;
      scale_ = other.scale_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEMuzzleFlash Clone() {
      return new CMsgTEMuzzleFlash(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "angles" field.</summary>
    public const int AnglesFieldNumber = 2;
    private global::Proto.Dota.CMsgQAngle angles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgQAngle Angles {
      get { return angles_; }
      set {
        angles_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEMuzzleFlash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEMuzzleFlash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Angles, other.Angles)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (angles_ != null) hash ^= Angles.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (angles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Angles);
      }
      if (Scale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Scale);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (angles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angles);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEMuzzleFlash other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.angles_ != null) {
        if (angles_ == null) {
          angles_ = new global::Proto.Dota.CMsgQAngle();
        }
        Angles.MergeFrom(other.Angles);
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (angles_ == null) {
              angles_ = new global::Proto.Dota.CMsgQAngle();
            }
            input.ReadMessage(angles_);
            break;
          }
          case 29: {
            Scale = input.ReadFloat();
            break;
          }
          case 32: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEBloodStream : pb::IMessage<CMsgTEBloodStream> {
    private static readonly pb::MessageParser<CMsgTEBloodStream> _parser = new pb::MessageParser<CMsgTEBloodStream>(() => new CMsgTEBloodStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEBloodStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBloodStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBloodStream(CMsgTEBloodStream other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      color_ = other.color_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEBloodStream Clone() {
      return new CMsgTEBloodStream(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::Proto.Dota.CMsgVector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private uint amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEBloodStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEBloodStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (Color != other.Color) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (direction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Direction);
      }
      if (Color != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(Color);
      }
      if (Amount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Color != 0) {
        size += 1 + 4;
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEBloodStream other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Proto.Dota.CMsgVector();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (direction_ == null) {
              direction_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 29: {
            Color = input.ReadFixed32();
            break;
          }
          case 32: {
            Amount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEExplosion : pb::IMessage<CMsgTEExplosion> {
    private static readonly pb::MessageParser<CMsgTEExplosion> _parser = new pb::MessageParser<CMsgTEExplosion>(() => new CMsgTEExplosion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEExplosion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEExplosion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEExplosion(CMsgTEExplosion other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      framerate_ = other.framerate_;
      flags_ = other.flags_;
      normal_ = other.normal_ != null ? other.normal_.Clone() : null;
      materialtype_ = other.materialtype_;
      radius_ = other.radius_;
      magnitude_ = other.magnitude_;
      scale_ = other.scale_;
      affectRagdolls_ = other.affectRagdolls_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEExplosion Clone() {
      return new CMsgTEExplosion(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "framerate" field.</summary>
    public const int FramerateFieldNumber = 2;
    private uint framerate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Framerate {
      get { return framerate_; }
      set {
        framerate_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 4;
    private global::Proto.Dota.CMsgVector normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "materialtype" field.</summary>
    public const int MaterialtypeFieldNumber = 5;
    private uint materialtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Materialtype {
      get { return materialtype_; }
      set {
        materialtype_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 6;
    private uint radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "magnitude" field.</summary>
    public const int MagnitudeFieldNumber = 7;
    private uint magnitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Magnitude {
      get { return magnitude_; }
      set {
        magnitude_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 8;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "affect_ragdolls" field.</summary>
    public const int AffectRagdollsFieldNumber = 9;
    private bool affectRagdolls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AffectRagdolls {
      get { return affectRagdolls_; }
      set {
        affectRagdolls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEExplosion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEExplosion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Framerate != other.Framerate) return false;
      if (Flags != other.Flags) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (Materialtype != other.Materialtype) return false;
      if (Radius != other.Radius) return false;
      if (Magnitude != other.Magnitude) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (AffectRagdolls != other.AffectRagdolls) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Framerate != 0) hash ^= Framerate.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (Materialtype != 0) hash ^= Materialtype.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Magnitude != 0) hash ^= Magnitude.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (AffectRagdolls != false) hash ^= AffectRagdolls.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Framerate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Framerate);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Flags);
      }
      if (normal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Normal);
      }
      if (Materialtype != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Materialtype);
      }
      if (Radius != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Radius);
      }
      if (Magnitude != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Magnitude);
      }
      if (Scale != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Scale);
      }
      if (AffectRagdolls != false) {
        output.WriteRawTag(72);
        output.WriteBool(AffectRagdolls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Framerate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Framerate);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (Materialtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Materialtype);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (Magnitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Magnitude);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (AffectRagdolls != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEExplosion other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Framerate != 0) {
        Framerate = other.Framerate;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = new global::Proto.Dota.CMsgVector();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.Materialtype != 0) {
        Materialtype = other.Materialtype;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Magnitude != 0) {
        Magnitude = other.Magnitude;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.AffectRagdolls != false) {
        AffectRagdolls = other.AffectRagdolls;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 16: {
            Framerate = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadUInt32();
            break;
          }
          case 34: {
            if (normal_ == null) {
              normal_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(normal_);
            break;
          }
          case 40: {
            Materialtype = input.ReadUInt32();
            break;
          }
          case 48: {
            Radius = input.ReadUInt32();
            break;
          }
          case 56: {
            Magnitude = input.ReadUInt32();
            break;
          }
          case 69: {
            Scale = input.ReadFloat();
            break;
          }
          case 72: {
            AffectRagdolls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEDust : pb::IMessage<CMsgTEDust> {
    private static readonly pb::MessageParser<CMsgTEDust> _parser = new pb::MessageParser<CMsgTEDust>(() => new CMsgTEDust());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEDust> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEDust() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEDust(CMsgTEDust other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      size_ = other.size_;
      speed_ = other.speed_;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEDust Clone() {
      return new CMsgTEDust(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private float size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::Proto.Dota.CMsgVector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEDust);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEDust other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Size, other.Size)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Size != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Size);
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Size != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Size);
      }
      if (Speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Speed);
      }
      if (direction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Size != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEDust other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Size != 0F) {
        Size = other.Size;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Proto.Dota.CMsgVector();
        }
        Direction.MergeFrom(other.Direction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 21: {
            Size = input.ReadFloat();
            break;
          }
          case 29: {
            Speed = input.ReadFloat();
            break;
          }
          case 34: {
            if (direction_ == null) {
              direction_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(direction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTELargeFunnel : pb::IMessage<CMsgTELargeFunnel> {
    private static readonly pb::MessageParser<CMsgTELargeFunnel> _parser = new pb::MessageParser<CMsgTELargeFunnel>(() => new CMsgTELargeFunnel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTELargeFunnel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTELargeFunnel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTELargeFunnel(CMsgTELargeFunnel other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      reversed_ = other.reversed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTELargeFunnel Clone() {
      return new CMsgTELargeFunnel(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "reversed" field.</summary>
    public const int ReversedFieldNumber = 2;
    private uint reversed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reversed {
      get { return reversed_; }
      set {
        reversed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTELargeFunnel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTELargeFunnel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Reversed != other.Reversed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Reversed != 0) hash ^= Reversed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Reversed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Reversed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Reversed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reversed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTELargeFunnel other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Reversed != 0) {
        Reversed = other.Reversed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 16: {
            Reversed = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTESparks : pb::IMessage<CMsgTESparks> {
    private static readonly pb::MessageParser<CMsgTESparks> _parser = new pb::MessageParser<CMsgTESparks>(() => new CMsgTESparks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTESparks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTESparks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTESparks(CMsgTESparks other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      magnitude_ = other.magnitude_;
      length_ = other.length_;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTESparks Clone() {
      return new CMsgTESparks(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "magnitude" field.</summary>
    public const int MagnitudeFieldNumber = 2;
    private uint magnitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Magnitude {
      get { return magnitude_; }
      set {
        magnitude_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private uint length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::Proto.Dota.CMsgVector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTESparks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTESparks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Magnitude != other.Magnitude) return false;
      if (Length != other.Length) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Magnitude != 0) hash ^= Magnitude.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Magnitude != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Magnitude);
      }
      if (Length != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Length);
      }
      if (direction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Magnitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Magnitude);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTESparks other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Magnitude != 0) {
        Magnitude = other.Magnitude;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Proto.Dota.CMsgVector();
        }
        Direction.MergeFrom(other.Direction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 16: {
            Magnitude = input.ReadUInt32();
            break;
          }
          case 24: {
            Length = input.ReadUInt32();
            break;
          }
          case 34: {
            if (direction_ == null) {
              direction_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(direction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEPhysicsProp : pb::IMessage<CMsgTEPhysicsProp> {
    private static readonly pb::MessageParser<CMsgTEPhysicsProp> _parser = new pb::MessageParser<CMsgTEPhysicsProp>(() => new CMsgTEPhysicsProp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEPhysicsProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEPhysicsProp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEPhysicsProp(CMsgTEPhysicsProp other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      angles_ = other.angles_ != null ? other.angles_.Clone() : null;
      skin_ = other.skin_;
      flags_ = other.flags_;
      effects_ = other.effects_;
      color_ = other.color_;
      modelindex_ = other.modelindex_;
      breakmodelsnottomake_ = other.breakmodelsnottomake_;
      scale_ = other.scale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEPhysicsProp Clone() {
      return new CMsgTEPhysicsProp(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Proto.Dota.CMsgVector velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "angles" field.</summary>
    public const int AnglesFieldNumber = 3;
    private global::Proto.Dota.CMsgQAngle angles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgQAngle Angles {
      get { return angles_; }
      set {
        angles_ = value;
      }
    }

    /// <summary>Field number for the "skin" field.</summary>
    public const int SkinFieldNumber = 4;
    private uint skin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skin {
      get { return skin_; }
      set {
        skin_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 5;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "effects" field.</summary>
    public const int EffectsFieldNumber = 6;
    private uint effects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effects {
      get { return effects_; }
      set {
        effects_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 7;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "modelindex" field.</summary>
    public const int ModelindexFieldNumber = 8;
    private ulong modelindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Modelindex {
      get { return modelindex_; }
      set {
        modelindex_ = value;
      }
    }

    /// <summary>Field number for the "breakmodelsnottomake" field.</summary>
    public const int BreakmodelsnottomakeFieldNumber = 9;
    private uint breakmodelsnottomake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Breakmodelsnottomake {
      get { return breakmodelsnottomake_; }
      set {
        breakmodelsnottomake_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 10;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEPhysicsProp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEPhysicsProp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Angles, other.Angles)) return false;
      if (Skin != other.Skin) return false;
      if (Flags != other.Flags) return false;
      if (Effects != other.Effects) return false;
      if (Color != other.Color) return false;
      if (Modelindex != other.Modelindex) return false;
      if (Breakmodelsnottomake != other.Breakmodelsnottomake) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (angles_ != null) hash ^= Angles.GetHashCode();
      if (Skin != 0) hash ^= Skin.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Effects != 0) hash ^= Effects.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Modelindex != 0UL) hash ^= Modelindex.GetHashCode();
      if (Breakmodelsnottomake != 0) hash ^= Breakmodelsnottomake.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (angles_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Angles);
      }
      if (Skin != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Skin);
      }
      if (Flags != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Flags);
      }
      if (Effects != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Effects);
      }
      if (Color != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(Color);
      }
      if (Modelindex != 0UL) {
        output.WriteRawTag(65);
        output.WriteFixed64(Modelindex);
      }
      if (Breakmodelsnottomake != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Breakmodelsnottomake);
      }
      if (Scale != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (angles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angles);
      }
      if (Skin != 0) {
        size += 1 + 4;
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (Effects != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effects);
      }
      if (Color != 0) {
        size += 1 + 4;
      }
      if (Modelindex != 0UL) {
        size += 1 + 8;
      }
      if (Breakmodelsnottomake != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Breakmodelsnottomake);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEPhysicsProp other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Proto.Dota.CMsgVector();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.angles_ != null) {
        if (angles_ == null) {
          angles_ = new global::Proto.Dota.CMsgQAngle();
        }
        Angles.MergeFrom(other.Angles);
      }
      if (other.Skin != 0) {
        Skin = other.Skin;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Effects != 0) {
        Effects = other.Effects;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Modelindex != 0UL) {
        Modelindex = other.Modelindex;
      }
      if (other.Breakmodelsnottomake != 0) {
        Breakmodelsnottomake = other.Breakmodelsnottomake;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              velocity_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 26: {
            if (angles_ == null) {
              angles_ = new global::Proto.Dota.CMsgQAngle();
            }
            input.ReadMessage(angles_);
            break;
          }
          case 37: {
            Skin = input.ReadFixed32();
            break;
          }
          case 40: {
            Flags = input.ReadUInt32();
            break;
          }
          case 48: {
            Effects = input.ReadUInt32();
            break;
          }
          case 61: {
            Color = input.ReadFixed32();
            break;
          }
          case 65: {
            Modelindex = input.ReadFixed64();
            break;
          }
          case 72: {
            Breakmodelsnottomake = input.ReadUInt32();
            break;
          }
          case 85: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEPlayerDecal : pb::IMessage<CMsgTEPlayerDecal> {
    private static readonly pb::MessageParser<CMsgTEPlayerDecal> _parser = new pb::MessageParser<CMsgTEPlayerDecal>(() => new CMsgTEPlayerDecal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEPlayerDecal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEPlayerDecal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEPlayerDecal(CMsgTEPlayerDecal other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      player_ = other.player_;
      entity_ = other.entity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEPlayerDecal Clone() {
      return new CMsgTEPlayerDecal(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private uint player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 3;
    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEPlayerDecal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEPlayerDecal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Player != other.Player) return false;
      if (Entity != other.Entity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Player);
      }
      if (Entity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Entity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Player);
      }
      if (Entity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEPlayerDecal other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 16: {
            Player = input.ReadUInt32();
            break;
          }
          case 24: {
            Entity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEProjectedDecal : pb::IMessage<CMsgTEProjectedDecal> {
    private static readonly pb::MessageParser<CMsgTEProjectedDecal> _parser = new pb::MessageParser<CMsgTEProjectedDecal>(() => new CMsgTEProjectedDecal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEProjectedDecal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEProjectedDecal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEProjectedDecal(CMsgTEProjectedDecal other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      angles_ = other.angles_ != null ? other.angles_.Clone() : null;
      index_ = other.index_;
      distance_ = other.distance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEProjectedDecal Clone() {
      return new CMsgTEProjectedDecal(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "angles" field.</summary>
    public const int AnglesFieldNumber = 2;
    private global::Proto.Dota.CMsgQAngle angles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgQAngle Angles {
      get { return angles_; }
      set {
        angles_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 4;
    private float distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEProjectedDecal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEProjectedDecal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Angles, other.Angles)) return false;
      if (Index != other.Index) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (angles_ != null) hash ^= Angles.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (angles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Angles);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
      if (Distance != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (angles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angles);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Distance != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEProjectedDecal other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.angles_ != null) {
        if (angles_ == null) {
          angles_ = new global::Proto.Dota.CMsgQAngle();
        }
        Angles.MergeFrom(other.Angles);
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Distance != 0F) {
        Distance = other.Distance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (angles_ == null) {
              angles_ = new global::Proto.Dota.CMsgQAngle();
            }
            input.ReadMessage(angles_);
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
          case 37: {
            Distance = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTESmoke : pb::IMessage<CMsgTESmoke> {
    private static readonly pb::MessageParser<CMsgTESmoke> _parser = new pb::MessageParser<CMsgTESmoke>(() => new CMsgTESmoke());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTESmoke> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTESmoke() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTESmoke(CMsgTESmoke other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      scale_ = other.scale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTESmoke Clone() {
      return new CMsgTESmoke(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTESmoke);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTESmoke other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTESmoke other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgTEWorldDecal : pb::IMessage<CMsgTEWorldDecal> {
    private static readonly pb::MessageParser<CMsgTEWorldDecal> _parser = new pb::MessageParser<CMsgTEWorldDecal>(() => new CMsgTEWorldDecal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgTEWorldDecal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2TeReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEWorldDecal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEWorldDecal(CMsgTEWorldDecal other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      normal_ = other.normal_ != null ? other.normal_.Clone() : null;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgTEWorldDecal Clone() {
      return new CMsgTEWorldDecal(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 2;
    private global::Proto.Dota.CMsgVector normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgTEWorldDecal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgTEWorldDecal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (normal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Normal);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgTEWorldDecal other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = new global::Proto.Dota.CMsgVector();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (normal_ == null) {
              normal_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(normal_);
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
