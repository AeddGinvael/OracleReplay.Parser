// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_usermessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from dota_usermessages.proto</summary>
  public static partial class DotaUsermessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_usermessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaUsermessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdkb3RhX3VzZXJtZXNzYWdlcy5wcm90bxIPZ29vZ2xlLnByb3RvYnVmGhZu",
            "ZXR3b3JrYmFzZXR5cGVzLnByb3RvGhlkb3RhX2NvbW1vbm1lc3NhZ2VzLnBy",
            "b3RvIvEBChZDRE9UQVVzZXJNc2dfQ2hhdEV2ZW50EjAKBHR5cGUYASABKA4y",
            "Ii5nb29nbGUucHJvdG9idWYuRE9UQV9DSEFUX01FU1NBR0USDQoFdmFsdWUY",
            "AiABKA0SEgoKcGxheWVyaWRfMRgDIAEoERISCgpwbGF5ZXJpZF8yGAQgASgR",
            "EhIKCnBsYXllcmlkXzMYBSABKBESEgoKcGxheWVyaWRfNBgGIAEoERISCgpw",
            "bGF5ZXJpZF81GAcgASgREhIKCnBsYXllcmlkXzYYCCABKBESDgoGdmFsdWUy",
            "GAkgASgNEg4KBnZhbHVlMxgKIAEoDSJtChRDRE9UQVVzZXJNc2dfQm90Q2hh",
            "dBIRCglwbGF5ZXJfaWQYASABKA0SDgoGZm9ybWF0GAIgASgJEg8KB21lc3Nh",
            "Z2UYAyABKAkSDgoGdGFyZ2V0GAQgASgJEhEKCXRlYW1fb25seRgFIAEoCCKZ",
            "AQoeQ0RPVEFVc2VyTXNnX0NvbWJhdExvZ0J1bGtEYXRhEj8KDmNvbWJhdF9l",
            "bnRyaWVzGAEgAygLMicuZ29vZ2xlLnByb3RvYnVmLkNNc2dET1RBQ29tYmF0",
            "TG9nRW50cnkSEQoJdGltZXN0YW1wGAIgASgCEhAKCGR1cmF0aW9uGAMgASgC",
            "EhEKCXBsYXllcl9pZBgEIAEoDSK3AgocQ0RPVEFVc2VyTXNnX01pbmlLaWxs",
            "Q2FtSW5mbxJJCglhdHRhY2tlcnMYASADKAsyNi5nb29nbGUucHJvdG9idWYu",
            "Q0RPVEFVc2VyTXNnX01pbmlLaWxsQ2FtSW5mby5BdHRhY2tlchrLAQoIQXR0",
            "YWNrZXISEAoIYXR0YWNrZXIYASABKA0SFAoMdG90YWxfZGFtYWdlGAIgASgF",
            "ElEKCWFiaWxpdGllcxgDIAMoCzI+Lmdvb2dsZS5wcm90b2J1Zi5DRE9UQVVz",
            "ZXJNc2dfTWluaUtpbGxDYW1JbmZvLkF0dGFja2VyLkFiaWxpdHkSFQoNYXR0",
            "YWNrZXJfbmFtZRgEIAEoCRotCgdBYmlsaXR5EhIKCmFiaWxpdHlfaWQYASAB",
            "KA0SDgoGZGFtYWdlGAIgASgFIkAKHUNET1RBVXNlck1zZ19HbG9iYWxMaWdo",
            "dENvbG9yEg0KBWNvbG9yGAEgASgNEhAKCGR1cmF0aW9uGAIgASgCImUKIUNE",
            "T1RBVXNlck1zZ19HbG9iYWxMaWdodERpcmVjdGlvbhIuCglkaXJlY3Rpb24Y",
            "ASABKAsyGy5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvchIQCghkdXJhdGlv",
            "bhgCIAEoAiJtChlDRE9UQVVzZXJNc2dfTG9jYXRpb25QaW5nEhEKCXBsYXll",
            "cl9pZBgBIAEoDRI9Cg1sb2NhdGlvbl9waW5nGAIgASgLMiYuZ29vZ2xlLnBy",
            "b3RvYnVmLkNET1RBTXNnX0xvY2F0aW9uUGluZyLRAQobQ0RPVEFVc2VyTXNn",
            "X0VuZW15SXRlbUFsZXJ0EhEKCXBsYXllcl9pZBgBIAEoDRIYChB0YXJnZXRf",
            "cGxheWVyX2lkGAIgASgNEhcKD2l0ZW1fYWJpbGl0eV9pZBgDIAEoBRIRCgly",
            "dW5lX3R5cGUYBCABKA0SEQoJZW50aXR5X2lkGAUgASgFEhIKCml0ZW1fbGV2",
            "ZWwYBiABKAUSFwoPcHJpbWFyeV9jaGFyZ2VzGAcgASgFEhkKEXNlY29uZGFy",
            "eV9jaGFyZ2VzGAggASgFIp8BChpDRE9UQVVzZXJNc2dfTW9kaWZpZXJBbGVy",
            "dBIRCglwbGF5ZXJfaWQYASABKA0SEgoKY2xhc3NfbmFtZRgCIAEoCRITCgtz",
            "dGFja19jb3VudBgDIAEoDRIRCglpc19kZWJ1ZmYYBCABKAgSFwoPdGFyZ2V0",
            "X2VudGluZGV4GAUgASgNEhkKEXNlY29uZHNfcmVtYWluaW5nGAYgASgCIl8K",
            "GENET1RBVXNlck1zZ19IUE1hbmFBbGVydBIRCglwbGF5ZXJfaWQYASABKA0S",
            "FwoPdGFyZ2V0X2VudGluZGV4GAIgASgNEhcKD3Nob3dfcmF3X3ZhbHVlcxgD",
            "IAEoCCLzAQofQ0RPVEFVc2VyTXNnX0NvdXJpZXJLaWxsZWRBbGVydBIMCgR0",
            "ZWFtGAEgASgNEhIKCmdvbGRfdmFsdWUYAiABKA0SFQoNZW50aXR5X2hhbmRs",
            "ZRgDIAEoBRIRCgl0aW1lc3RhbXAYBCABKAUSTQoKbG9zdF9pdGVtcxgFIAMo",
            "CzI5Lmdvb2dsZS5wcm90b2J1Zi5DRE9UQVVzZXJNc2dfQ291cmllcktpbGxl",
            "ZEFsZXJ0Lkxvc3RJdGVtGjUKCExvc3RJdGVtEhcKD2l0ZW1fYWJpbGl0eV9p",
            "ZBgBIAEoBRIQCghxdWFudGl0eRgCIAEoDSKMAQoZQ0RPVEFVc2VyTXNnX01p",
            "bmltYXBFdmVudBISCgpldmVudF90eXBlGAEgASgFEhUKDWVudGl0eV9oYW5k",
            "bGUYAiABKAUSCQoBeBgDIAEoBRIJCgF5GAQgASgFEhAKCGR1cmF0aW9uGAUg",
            "ASgFEhwKFHRhcmdldF9lbnRpdHlfaGFuZGxlGAYgASgFIl0KFENET1RBVXNl",
            "ck1zZ19NYXBMaW5lEhEKCXBsYXllcl9pZBgBIAEoBRIyCgdtYXBsaW5lGAIg",
            "ASgLMiEuZ29vZ2xlLnByb3RvYnVmLkNET1RBTXNnX01hcExpbmUi7gIKI0NE",
            "T1RBVXNlck1zZ19DcmVhdGVMaW5lYXJQcm9qZWN0aWxlEisKBm9yaWdpbhgB",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEi8KCHZlbG9jaXR5",
            "GAIgASgLMh0uZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3IyRBIPCgdsYXRl",
            "bmN5GAMgASgFEhAKCGVudGluZGV4GAQgASgFEhYKDnBhcnRpY2xlX2luZGV4",
            "GAUgASgEEg4KBmhhbmRsZRgGIAEoBRIzCgxhY2NlbGVyYXRpb24YByABKAsy",
            "HS5nb29nbGUucHJvdG9idWYuQ01zZ1ZlY3RvcjJEEhEKCW1heF9zcGVlZBgI",
            "IAEoAhISCgpmb3dfcmFkaXVzGAkgASgCEhkKEXN0aWNreV9mb3dfcmV2ZWFs",
            "GAogASgIEhAKCGRpc3RhbmNlGAsgASgCEhUKDWNvbG9yZ2VtY29sb3IYDCAB",
            "KAciNgokQ0RPVEFVc2VyTXNnX0Rlc3Ryb3lMaW5lYXJQcm9qZWN0aWxlEg4K",
            "BmhhbmRsZRgBIAEoBSJPCiVDRE9UQVVzZXJNc2dfRG9kZ2VUcmFja2luZ1By",
            "b2plY3RpbGVzEhAKCGVudGluZGV4GAEgASgFEhQKDGF0dGFja3Nfb25seRgC",
            "IAEoCCJfCiFDRE9UQVVzZXJNc2dfU3BlY3RhdG9yUGxheWVyQ2xpY2sSEAoI",
            "ZW50aW5kZXgYASABKAUSEgoKb3JkZXJfdHlwZRgCIAEoBRIUCgx0YXJnZXRf",
            "aW5kZXgYAyABKAUi3gEKJkNET1RBVXNlck1zZ19TcGVjdGF0b3JQbGF5ZXJV",
            "bml0T3JkZXJzEhAKCGVudGluZGV4GAEgASgFEhIKCm9yZGVyX3R5cGUYAiAB",
            "KAUSDQoFdW5pdHMYAyADKAUSFAoMdGFyZ2V0X2luZGV4GAQgASgFEhIKCmFi",
            "aWxpdHlfaWQYBSABKAUSLQoIcG9zaXRpb24YBiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuQ01zZ1ZlY3RvchINCgVxdWV1ZRgHIAEoCBIXCg9zZXF1ZW5jZV9u",
            "dW1iZXIYCCABKAUigwEKHUNET1RBVXNlck1zZ19OZXZlcm1vcmVSZXF1aWVt",
            "EhUKDWVudGl0eV9oYW5kbGUYASABKAUSDQoFbGluZXMYAiABKAUSKwoGb3Jp",
            "Z2luGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISDwoHcmV2",
            "ZXJzZRgEIAEoCCIpChVDRE9UQVVzZXJNc2dfSHVkRXJyb3ISEAoIb3JkZXJf",
            "aWQYASABKAUiYwobQ0RPVEFVc2VyTXNnX1NoYXJlZENvb2xkb3duEhAKCGVu",
            "dGluZGV4GAEgASgFEgwKBG5hbWUYAiABKAkSEAoIY29vbGRvd24YAyABKAIS",
            "EgoKbmFtZV9pbmRleBgEIAEoBSJYChtDRE9UQVVzZXJNc2dfSGFsbG93ZWVu",
            "RHJvcHMSEQoJaXRlbV9kZWZzGAEgAygNEhIKCnBsYXllcl9pZHMYAiADKA0S",
            "EgoKcHJpemVfbGlzdBgDIAEoDSKrAwodQ0RPVEFVc2VyTXNnX1ByZWRpY3Rp",
            "b25SZXN1bHQSEgoKYWNjb3VudF9pZBgBIAEoDRIQCghtYXRjaF9pZBgCIAEo",
            "BBIPCgdjb3JyZWN0GAMgASgIEk4KC3ByZWRpY3Rpb25zGAQgAygLMjkuZ29v",
            "Z2xlLnByb3RvYnVmLkNET1RBVXNlck1zZ19QcmVkaWN0aW9uUmVzdWx0LlBy",
            "ZWRpY3Rpb24aggIKClByZWRpY3Rpb24SEAoIaXRlbV9kZWYYASABKA0SEwoL",
            "bnVtX2NvcnJlY3QYAiABKA0SEQoJbnVtX2ZhaWxzGAMgASgNElEKBnJlc3Vs",
            "dBgEIAEoDjJBLmdvb2dsZS5wcm90b2J1Zi5DRE9UQVVzZXJNc2dfUHJlZGlj",
            "dGlvblJlc3VsdC5QcmVkaWN0aW9uLkVSZXN1bHQSGQoRZ3JhbnRlZF9pdGVt",
            "X2RlZnMYBiADKA0iTAoHRVJlc3VsdBINCglrX1Vua25vd24QABIZChVrX2VS",
            "ZXN1bHRfSXRlbUdyYW50ZWQQARIXChNrX2VSZXN1bHRfRGVzdHJveWVkEAIi",
            "oQIKHENET1RBUmVzcG9uc2VRdWVyeVNlcmlhbGl6ZWQSQQoFZmFjdHMYASAD",
            "KAsyMi5nb29nbGUucHJvdG9idWYuQ0RPVEFSZXNwb25zZVF1ZXJ5U2VyaWFs",
            "aXplZC5GYWN0Gr0BCgRGYWN0EgsKA2tleRgBIAEoBRJNCgd2YWx0eXBlGAIg",
            "ASgOMjwuZ29vZ2xlLnByb3RvYnVmLkNET1RBUmVzcG9uc2VRdWVyeVNlcmlh",
            "bGl6ZWQuRmFjdC5WYWx1ZVR5cGUSEwoLdmFsX251bWVyaWMYAyABKAISEgoK",
            "dmFsX3N0cmluZxgEIAEoCSIwCglWYWx1ZVR5cGUSCgoGVUtOT1dOEAASCwoH",
            "TlVNRVJJQxABEgoKBlNUUklORxACIp0BChhDRE9UQVNwZWVjaE1hdGNoT25D",
            "bGllbnQSDwoHY29uY2VwdBgBIAEoBRIWCg5yZWNpcGllbnRfdHlwZRgCIAEo",
            "BRJECg1yZXNwb25zZXF1ZXJ5GAMgASgLMi0uZ29vZ2xlLnByb3RvYnVmLkNE",
            "T1RBUmVzcG9uc2VRdWVyeVNlcmlhbGl6ZWQSEgoKcmFuZG9tc2VlZBgEIAEo",
            "DyL0BwoWQ0RPVEFVc2VyTXNnX1VuaXRFdmVudBI2Cghtc2dfdHlwZRgBIAEo",
            "DjIkLmdvb2dsZS5wcm90b2J1Zi5FRG90YUVudGl0eU1lc3NhZ2VzEhQKDGVu",
            "dGl0eV9pbmRleBgCIAEoBRI+CgZzcGVlY2gYAyABKAsyLi5nb29nbGUucHJv",
            "dG9idWYuQ0RPVEFVc2VyTXNnX1VuaXRFdmVudC5TcGVlY2gSRwoLc3BlZWNo",
            "X211dGUYBCABKAsyMi5nb29nbGUucHJvdG9idWYuQ0RPVEFVc2VyTXNnX1Vu",
            "aXRFdmVudC5TcGVlY2hNdXRlEkcKC2FkZF9nZXN0dXJlGAUgASgLMjIuZ29v",
            "Z2xlLnByb3RvYnVmLkNET1RBVXNlck1zZ19Vbml0RXZlbnQuQWRkR2VzdHVy",
            "ZRJNCg5yZW1vdmVfZ2VzdHVyZRgGIAEoCzI1Lmdvb2dsZS5wcm90b2J1Zi5D",
            "RE9UQVVzZXJNc2dfVW5pdEV2ZW50LlJlbW92ZUdlc3R1cmUSSQoMYmxvb2Rf",
            "aW1wYWN0GAcgASgLMjMuZ29vZ2xlLnByb3RvYnVmLkNET1RBVXNlck1zZ19V",
            "bml0RXZlbnQuQmxvb2RJbXBhY3QSSQoMZmFkZV9nZXN0dXJlGAggASgLMjMu",
            "Z29vZ2xlLnByb3RvYnVmLkNET1RBVXNlck1zZ19Vbml0RXZlbnQuRmFkZUdl",
            "c3R1cmUSSQoWc3BlZWNoX21hdGNoX29uX2NsaWVudBgJIAEoCzIpLmdvb2ds",
            "ZS5wcm90b2J1Zi5DRE9UQVNwZWVjaE1hdGNoT25DbGllbnQaZAoGU3BlZWNo",
            "Eg8KB2NvbmNlcHQYASABKAUSEAoIcmVzcG9uc2UYAiABKAkSFgoOcmVjaXBp",
            "ZW50X3R5cGUYAyABKAUSDQoFbGV2ZWwYBCABKAUSEAoIbXV0ZWFibGUYBSAB",
            "KAgaGwoKU3BlZWNoTXV0ZRINCgVkZWxheRgBIAEoAhqAAQoKQWRkR2VzdHVy",
            "ZRIQCghhY3Rpdml0eRgBIAEoBRIMCgRzbG90GAIgASgFEg8KB2ZhZGVfaW4Y",
            "AyABKAISEAoIZmFkZV9vdXQYBCABKAISFQoNcGxheWJhY2tfcmF0ZRgFIAEo",
            "AhIYChBzZXF1ZW5jZV92YXJpYW50GAYgASgFGiEKDVJlbW92ZUdlc3R1cmUS",
            "EAoIYWN0aXZpdHkYASABKAUaQAoLQmxvb2RJbXBhY3QSDQoFc2NhbGUYASAB",
            "KAUSEAoIeF9ub3JtYWwYAiABKAUSEAoIeV9ub3JtYWwYAyABKAUaHwoLRmFk",
            "ZUdlc3R1cmUSEAoIYWN0aXZpdHkYASABKAUiNQoaQ0RPVEFVc2VyTXNnX0l0",
            "ZW1QdXJjaGFzZWQSFwoPaXRlbV9hYmlsaXR5X2lkGAEgASgFIpoaChxDRE9U",
            "QVVzZXJNc2dfUGFydGljbGVNYW5hZ2VyEjQKBHR5cGUYASABKA4yJi5nb29n",
            "bGUucHJvdG9idWYuRE9UQV9QQVJUSUNMRV9NRVNTQUdFEg0KBWluZGV4GAIg",
            "ASgNEmIKFnJlbGVhc2VfcGFydGljbGVfaW5kZXgYAyABKAsyQi5nb29nbGUu",
            "cHJvdG9idWYuQ0RPVEFVc2VyTXNnX1BhcnRpY2xlTWFuYWdlci5SZWxlYXNl",
            "UGFydGljbGVJbmRleBJVCg9jcmVhdGVfcGFydGljbGUYBCABKAsyPC5nb29n",
            "bGUucHJvdG9idWYuQ0RPVEFVc2VyTXNnX1BhcnRpY2xlTWFuYWdlci5DcmVh",
            "dGVQYXJ0aWNsZRJXChBkZXN0cm95X3BhcnRpY2xlGAUgASgLMj0uZ29vZ2xl",
            "LnByb3RvYnVmLkNET1RBVXNlck1zZ19QYXJ0aWNsZU1hbmFnZXIuRGVzdHJv",
            "eVBhcnRpY2xlEmoKGmRlc3Ryb3lfcGFydGljbGVfaW52b2x2aW5nGAYgASgL",
            "MkYuZ29vZ2xlLnByb3RvYnVmLkNET1RBVXNlck1zZ19QYXJ0aWNsZU1hbmFn",
            "ZXIuRGVzdHJveVBhcnRpY2xlSW52b2x2aW5nElUKD3VwZGF0ZV9wYXJ0aWNs",
            "ZRgHIAEoCzI8Lmdvb2dsZS5wcm90b2J1Zi5DRE9UQVVzZXJNc2dfUGFydGlj",
            "bGVNYW5hZ2VyLlVwZGF0ZVBhcnRpY2xlElwKE3VwZGF0ZV9wYXJ0aWNsZV9m",
            "d2QYCCABKAsyPy5nb29nbGUucHJvdG9idWYuQ0RPVEFVc2VyTXNnX1BhcnRp",
            "Y2xlTWFuYWdlci5VcGRhdGVQYXJ0aWNsZUZ3ZBJiChZ1cGRhdGVfcGFydGlj",
            "bGVfb3JpZW50GAkgASgLMkIuZ29vZ2xlLnByb3RvYnVmLkNET1RBVXNlck1z",
            "Z19QYXJ0aWNsZU1hbmFnZXIuVXBkYXRlUGFydGljbGVPcmllbnQSZgoYdXBk",
            "YXRlX3BhcnRpY2xlX2ZhbGxiYWNrGAogASgLMkQuZ29vZ2xlLnByb3RvYnVm",
            "LkNET1RBVXNlck1zZ19QYXJ0aWNsZU1hbmFnZXIuVXBkYXRlUGFydGljbGVG",
            "YWxsYmFjaxJiChZ1cGRhdGVfcGFydGljbGVfb2Zmc2V0GAsgASgLMkIuZ29v",
            "Z2xlLnByb3RvYnVmLkNET1RBVXNlck1zZ19QYXJ0aWNsZU1hbmFnZXIuVXBk",
            "YXRlUGFydGljbGVPZmZzZXQSXAoTdXBkYXRlX3BhcnRpY2xlX2VudBgMIAEo",
            "CzI/Lmdvb2dsZS5wcm90b2J1Zi5DRE9UQVVzZXJNc2dfUGFydGljbGVNYW5h",
            "Z2VyLlVwZGF0ZVBhcnRpY2xlRW50EmsKG3VwZGF0ZV9wYXJ0aWNsZV9zaG91",
            "bGRfZHJhdxgOIAEoCzJGLmdvb2dsZS5wcm90b2J1Zi5DRE9UQVVzZXJNc2df",
            "UGFydGljbGVNYW5hZ2VyLlVwZGF0ZVBhcnRpY2xlU2hvdWxkRHJhdxJpChp1",
            "cGRhdGVfcGFydGljbGVfc2V0X2Zyb3plbhgPIAEoCzJFLmdvb2dsZS5wcm90",
            "b2J1Zi5DRE9UQVVzZXJNc2dfUGFydGljbGVNYW5hZ2VyLlVwZGF0ZVBhcnRp",
            "Y2xlU2V0RnJvemVuEnMKH2NoYW5nZV9jb250cm9sX3BvaW50X2F0dGFjaG1l",
            "bnQYECABKAsySi5nb29nbGUucHJvdG9idWYuQ0RPVEFVc2VyTXNnX1BhcnRp",
            "Y2xlTWFuYWdlci5DaGFuZ2VDb250cm9sUG9pbnRBdHRhY2htZW50EmIKFnVw",
            "ZGF0ZV9lbnRpdHlfcG9zaXRpb24YESABKAsyQi5nb29nbGUucHJvdG9idWYu",
            "Q0RPVEFVc2VyTXNnX1BhcnRpY2xlTWFuYWdlci5VcGRhdGVFbnRpdHlQb3Np",
            "dGlvbhJrChtzZXRfcGFydGljbGVfZm93X3Byb3BlcnRpZXMYEiABKAsyRi5n",
            "b29nbGUucHJvdG9idWYuQ0RPVEFVc2VyTXNnX1BhcnRpY2xlTWFuYWdlci5T",
            "ZXRQYXJ0aWNsZUZvV1Byb3BlcnRpZXMSWAoRc2V0X3BhcnRpY2xlX3RleHQY",
            "EyABKAsyPS5nb29nbGUucHJvdG9idWYuQ0RPVEFVc2VyTXNnX1BhcnRpY2xl",
            "TWFuYWdlci5TZXRQYXJ0aWNsZVRleHQSbgodc2V0X3BhcnRpY2xlX3Nob3Vs",
            "ZF9jaGVja19mb3cYFCABKAsyRy5nb29nbGUucHJvdG9idWYuQ0RPVEFVc2Vy",
            "TXNnX1BhcnRpY2xlTWFuYWdlci5TZXRQYXJ0aWNsZVNob3VsZENoZWNrRm9X",
            "GhYKFFJlbGVhc2VQYXJ0aWNsZUluZGV4Gn4KDkNyZWF0ZVBhcnRpY2xlEhsK",
            "E3BhcnRpY2xlX25hbWVfaW5kZXgYASABKAYSEwoLYXR0YWNoX3R5cGUYAiAB",
            "KAUSFQoNZW50aXR5X2hhbmRsZRgDIAEoBRIjChtlbnRpdHlfaGFuZGxlX2Zv",
            "cl9tb2RpZmllcnMYBCABKAUaLgoPRGVzdHJveVBhcnRpY2xlEhsKE2Rlc3Ry",
            "b3lfaW1tZWRpYXRlbHkYASABKAgaTgoYRGVzdHJveVBhcnRpY2xlSW52b2x2",
            "aW5nEhsKE2Rlc3Ryb3lfaW1tZWRpYXRlbHkYASABKAgSFQoNZW50aXR5X2hh",
            "bmRsZRgDIAEoBRpWCg5VcGRhdGVQYXJ0aWNsZRIVCg1jb250cm9sX3BvaW50",
            "GAEgASgFEi0KCHBvc2l0aW9uGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNN",
            "c2dWZWN0b3IaWAoRVXBkYXRlUGFydGljbGVGd2QSFQoNY29udHJvbF9wb2lu",
            "dBgBIAEoBRIsCgdmb3J3YXJkGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNN",
            "c2dWZWN0b3Ia3wEKFFVwZGF0ZVBhcnRpY2xlT3JpZW50EhUKDWNvbnRyb2xf",
            "cG9pbnQYASABKAUSLAoHZm9yd2FyZBgCIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5DTXNnVmVjdG9yEi4KBXJpZ2h0GAMgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkNNc2dWZWN0b3JCAhgBEicKAnVwGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkNNc2dWZWN0b3ISKQoEbGVmdBgFIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5D",
            "TXNnVmVjdG9yGl4KFlVwZGF0ZVBhcnRpY2xlRmFsbGJhY2sSFQoNY29udHJv",
            "bF9wb2ludBgBIAEoBRItCghwb3NpdGlvbhgCIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5DTXNnVmVjdG9yGmEKFFVwZGF0ZVBhcnRpY2xlT2Zmc2V0EhUKDWNv",
            "bnRyb2xfcG9pbnQYASABKAUSMgoNb3JpZ2luX29mZnNldBgCIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yGr0BChFVcGRhdGVQYXJ0aWNsZUVu",
            "dBIVCg1jb250cm9sX3BvaW50GAEgASgFEhUKDWVudGl0eV9oYW5kbGUYAiAB",
            "KAUSEwoLYXR0YWNoX3R5cGUYAyABKAUSEgoKYXR0YWNobWVudBgEIAEoBRI2",
            "ChFmYWxsYmFja19wb3NpdGlvbhgFIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5D",
            "TXNnVmVjdG9yEhkKEWluY2x1ZGVfd2VhcmFibGVzGAYgASgIGi0KF1VwZGF0",
            "ZVBhcnRpY2xlU2V0RnJvemVuEhIKCnNldF9mcm96ZW4YASABKAgaLwoYVXBk",
            "YXRlUGFydGljbGVTaG91bGREcmF3EhMKC3Nob3VsZF9kcmF3GAEgASgIGmUK",
            "HENoYW5nZUNvbnRyb2xQb2ludEF0dGFjaG1lbnQSFgoOYXR0YWNobWVudF9v",
            "bGQYASABKAUSFgoOYXR0YWNobWVudF9uZXcYAiABKAUSFQoNZW50aXR5X2hh",
            "bmRsZRgDIAEoBRpcChRVcGRhdGVFbnRpdHlQb3NpdGlvbhIVCg1lbnRpdHlf",
            "aGFuZGxlGAEgASgFEi0KCHBvc2l0aW9uGAIgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkNNc2dWZWN0b3IaZQoYU2V0UGFydGljbGVGb1dQcm9wZXJ0aWVzEhkK",
            "EWZvd19jb250cm9sX3BvaW50GAEgASgFEhoKEmZvd19jb250cm9sX3BvaW50",
            "MhgCIAEoBRISCgpmb3dfcmFkaXVzGAMgASgCGi4KGVNldFBhcnRpY2xlU2hv",
            "dWxkQ2hlY2tGb1cSEQoJY2hlY2tfZm93GAEgASgIGh8KD1NldFBhcnRpY2xl",
            "VGV4dBIMCgR0ZXh0GAEgASgJIsABChpDRE9UQVVzZXJNc2dfT3ZlcmhlYWRF",
            "dmVudBI6CgxtZXNzYWdlX3R5cGUYASABKA4yJC5nb29nbGUucHJvdG9idWYu",
            "RE9UQV9PVkVSSEVBRF9BTEVSVBINCgV2YWx1ZRgCIAEoBRIeChZ0YXJnZXRf",
            "cGxheWVyX2VudGluZGV4GAMgASgFEhcKD3RhcmdldF9lbnRpbmRleBgEIAEo",
            "BRIeChZzb3VyY2VfcGxheWVyX2VudGluZGV4GAUgASgFImMKFkNET1RBVXNl",
            "ck1zZ19Xb3JsZExpbmUSEQoJcGxheWVyX2lkGAEgASgFEjYKCXdvcmxkbGlu",
            "ZRgCIAEoCzIjLmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1zZ19Xb3JsZExpbmUi",
            "bwoWQ0RPVEFVc2VyTXNnX0NoYXRXaGVlbBIXCg9jaGF0X21lc3NhZ2VfaWQY",
            "ASABKA0SEQoJcGxheWVyX2lkGAIgASgNEhIKCmFjY291bnRfaWQYAyABKA0S",
            "FQoNcGFyYW1faGVyb19pZBgEIAEoDSIzCiJDRE9UQVVzZXJNc2dfR2FtZXJ1",
            "bGVzU3RhdGVDaGFuZ2VkEg0KBXN0YXRlGAEgASgNImsKGkNET1RBVXNlck1z",
            "Z19TZW5kU3RhdFBvcHVwEhEKCXBsYXllcl9pZBgBIAEoBRI6CglzdGF0cG9w",
            "dXAYAiABKAsyJy5nb29nbGUucHJvdG9idWYuQ0RPVEFNc2dfU2VuZFN0YXRQ",
            "b3B1cCJqCiFDRE9UQVVzZXJNc2dfRGlzbWlzc0FsbFN0YXRQb3B1cHMSRQoN",
            "ZGlzbWlzc2FsbG1zZxgBIAEoCzIuLmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1z",
            "Z19EaXNtaXNzQWxsU3RhdFBvcHVwcyKKAQolQ0RPVEFVc2VyTXNnX1NlbmRS",
            "b3NoYW5TcGVjdGF0b3JQaGFzZRIxCgVwaGFzZRgBIAEoDjIiLmdvb2dsZS5w",
            "cm90b2J1Zi5ET1RBX1JPU0hBTl9QSEFTRRIYChBwaGFzZV9zdGFydF90aW1l",
            "GAIgASgFEhQKDHBoYXNlX2xlbmd0aBgDIAEoBSJDChxDRE9UQVVzZXJNc2df",
            "U2VuZFJvc2hhblBvcHVwEhEKCXJlY2xhaW1lZBgBIAEoCBIQCghnYW1ldGlt",
            "ZRgCIAEoBSLYAgoaQ0RPVEFVc2VyTXNnX1RFX1Byb2plY3RpbGUSDwoHaFNv",
            "dXJjZRgBIAEoBRIPCgdoVGFyZ2V0GAIgASgFEhEKCW1vdmVTcGVlZBgDIAEo",
            "BRIYChBzb3VyY2VBdHRhY2htZW50GAQgASgFEhwKFHBhcnRpY2xlU3lzdGVt",
            "SGFuZGxlGAUgASgDEhEKCWRvZGdlYWJsZRgGIAEoCBIQCghpc0F0dGFjaxgH",
            "IAEoCBIQCghpc0V2YWRlZBgIIAEoCBISCgpleHBpcmVUaW1lGAkgASgCEhUK",
            "DW1heGltcGFjdHRpbWUYCiABKAISFQoNY29sb3JnZW1jb2xvchgLIAEoBxIT",
            "CgtsYXVuY2hfdGljaxgMIAEoBRIOCgZoYW5kbGUYDSABKAUSLwoKdlRhcmdl",
            "dExvYxgOIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yIsoCCh1D",
            "RE9UQVVzZXJNc2dfVEVfUHJvamVjdGlsZUxvYxIvCgp2U291cmNlTG9jGAEg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0b3ISDwoHaFRhcmdldBgC",
            "IAEoBRIRCgltb3ZlU3BlZWQYAyABKAUSHAoUcGFydGljbGVTeXN0ZW1IYW5k",
            "bGUYBCABKAMSEQoJZG9kZ2VhYmxlGAUgASgIEhAKCGlzQXR0YWNrGAYgASgI",
            "EhAKCGlzRXZhZGVkGAggASgIEhIKCmV4cGlyZVRpbWUYCSABKAISLwoKdlRh",
            "cmdldExvYxgKIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEhUK",
            "DWNvbG9yZ2VtY29sb3IYCyABKAcSEwoLbGF1bmNoX3RpY2sYDCABKAUSDgoG",
            "aGFuZGxlGA0gASgFIjMKIUNET1RBVXNlck1zZ19URV9EZXN0cm95UHJvamVj",
            "dGlsZRIOCgZoYW5kbGUYASABKAUiYgofQ0RPVEFVc2VyTXNnX1RFX0RvdGFC",
            "bG9vZEltcGFjdBIOCgZlbnRpdHkYASABKAUSDQoFc2NhbGUYAiABKAISDwoH",
            "eG5vcm1hbBgDIAEoAhIPCgd5bm9ybWFsGAQgASgCIpEBCh1DRE9UQVVzZXJN",
            "c2dfVEVfVW5pdEFuaW1hdGlvbhIOCgZlbnRpdHkYASABKAUSFwoPc2VxdWVu",
            "Y2VWYXJpYW50GAIgASgFEhQKDHBsYXliYWNrcmF0ZRgDIAEoAhIRCgljYXN0",
            "cG9pbnQYBCABKAISDAoEdHlwZRgFIAEoBRIQCghhY3Rpdml0eRgGIAEoBSJA",
            "CiBDRE9UQVVzZXJNc2dfVEVfVW5pdEFuaW1hdGlvbkVuZBIOCgZlbnRpdHkY",
            "ASABKAUSDAoEc25hcBgCIAEoCCJZChlDRE9UQVVzZXJNc2dfQWJpbGl0eVN0",
            "ZWFsEhEKCXBsYXllcl9pZBgBIAEoDRISCgphYmlsaXR5X2lkGAIgASgNEhUK",
            "DWFiaWxpdHlfbGV2ZWwYAyABKA0iZgocQ0RPVEFVc2VyTXNnX1N0YXRzSGVy",
            "b0xvb2t1cBIRCglwbGF5ZXJfaWQYASABKAUSDwoHaGVyb19pZBgCIAEoBRIR",
            "CgloZXJvX25hbWUYAyABKAkSDwoHcGVyc29uYRgEIAEoCSKGAgoiQ0RPVEFV",
            "c2VyTXNnX1N0YXRzSGVyb1Bvc2l0aW9uSW5mbxIYChBhdmVyYWdlX3Bvc2l0",
            "aW9uGAEgASgCEloKEHBvc2l0aW9uX2RldGFpbHMYAiADKAsyQC5nb29nbGUu",
            "cHJvdG9idWYuQ0RPVEFVc2VyTXNnX1N0YXRzSGVyb1Bvc2l0aW9uSW5mby5Q",
            "b3NpdGlvblBhaXIaagoMUG9zaXRpb25QYWlyEkIKEXBvc2l0aW9uX2NhdGVn",
            "b3J5GAEgASgOMicuZ29vZ2xlLnByb3RvYnVmLkRPVEFfUE9TSVRJT05fQ0FU",
            "RUdPUlkSFgoOcG9zaXRpb25fY291bnQYAiABKA0irAEKIUNET1RBVXNlck1z",
            "Z19TdGF0c1BsYXllcktpbGxTaGFyZRIRCglwbGF5ZXJfaWQYASABKAUSGgoS",
            "a2lsbF9zaGFyZV9wZXJjZW50GAIgASgCEhQKDHBsYXllcl9sb2NfeBgDIAEo",
            "AhIUCgxwbGF5ZXJfbG9jX3kYBCABKAISFgoOaGVhbHRoX3BlcmNlbnQYBSAB",
            "KAISFAoMbWFuYV9wZXJjZW50GAYgASgCItQBCh1DRE9UQVVzZXJNc2dfU3Rh",
            "dHNLaWxsRGV0YWlscxIRCgl2aWN0aW1faWQYASABKA0SRwoLa2lsbF9zaGFy",
            "ZXMYAiADKAsyMi5nb29nbGUucHJvdG9idWYuQ0RPVEFVc2VyTXNnX1N0YXRz",
            "UGxheWVyS2lsbFNoYXJlEhYKDmRhbWFnZV90b19raWxsGAMgASgNEhgKEGVm",
            "ZmVjdGl2ZV9oZWFsdGgYBCABKA0SEgoKZGVhdGhfdGltZRgFIAEoAhIRCglr",
            "aWxsZXJfaWQYBiABKA0icAoTQ01zZ0hlcm9BYmlsaXR5U3RhdBIxCglzdGF0",
            "X3R5cGUYASABKA4yHi5nb29nbGUucHJvdG9idWYuRUhlcm9TdGF0VHlwZRIR",
            "CglpbnRfdmFsdWUYAiABKAUSEwoLZmxvYXRfdmFsdWUYAyABKAIidAocQ01z",
            "Z0NvbWJhdEFuYWx5emVyUGxheWVyU3RhdBISCgphY2NvdW50X2lkGAEgASgN",
            "EkAKEmhlcm9fYWJpbGl0eV9zdGF0cxgCIAMoCzIkLmdvb2dsZS5wcm90b2J1",
            "Zi5DTXNnSGVyb0FiaWxpdHlTdGF0InAKF0NNc2dDb21iYXRBbmFseXplclN0",
            "YXRzEhAKCG1hdGNoX2lkGAEgASgEEkMKDHBsYXllcl9zdGF0cxgCIAMoCzIt",
            "Lmdvb2dsZS5wcm90b2J1Zi5DTXNnQ29tYmF0QW5hbHl6ZXJQbGF5ZXJTdGF0",
            "IuwBCh5DRE9UQVVzZXJNc2dfUHJvamVjdGlvbkFiaWxpdHkSEgoKYWJpbGl0",
            "eV9pZBgBIAEoDRIYChBjYXN0ZXJfZW50X2luZGV4GAIgASgFEhMKC2Nhc3Rl",
            "cl90ZWFtGAMgASgFEhMKC2NoYW5uZWxfZW5kGAQgASgIEisKBm9yaWdpbhgF",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnVmVjdG9yEhkKEXRyYWNrX2Nh",
            "c3Rlcl9vbmx5GAYgASgIEhAKCGVuZF90aW1lGAcgASgCEhgKEHZpY3RpbV9l",
            "bnRfaW5kZXgYCCABKAUiYQocQ0RPVEFVc2VyTXNnX1Byb2plY3Rpb25FdmVu",
            "dBIzCghldmVudF9pZBgBIAEoDjIhLmdvb2dsZS5wcm90b2J1Zi5FUHJvamVj",
            "dGlvbkV2ZW50EgwKBHRlYW0YAiABKA0iQgoUQ0RPVEFVc2VyTXNnX1hQQWxl",
            "cnQSEQoJcGxheWVyX2lkGAEgASgNEhcKD3RhcmdldF9lbnRpbmRleBgCIAEo",
            "DSJBCh5DRE9UQVVzZXJNc2dfU2VsZWN0UGVuYWx0eUdvbGQSEQoJcGxheWVy",
            "X2lkGAEgASgNEgwKBGNvc3QYAiABKBEiegobQ0RPVEFVc2VyTXNnX1JvbGxE",
            "aWNlUmVzdWx0EhEKCXBsYXllcl9pZBgBIAEoDRIUCgxjaGFubmVsX3R5cGUY",
            "AiABKA0SEAoIcm9sbF9taW4YAyABKA0SEAoIcm9sbF9tYXgYBCABKA0SDgoG",
            "cmVzdWx0GAUgASgNIlYKG0NET1RBVXNlck1zZ19GbGlwQ29pblJlc3VsdBIR",
            "CglwbGF5ZXJfaWQYASABKA0SFAoMY2hhbm5lbF90eXBlGAIgASgNEg4KBnJl",
            "c3VsdBgDIAEoCCJOCiNDRE9UQVVzZXJNZXNzYWdlX1RlYW1DYXB0YWluQ2hh",
            "bmdlZBIMCgR0ZWFtGAEgASgNEhkKEWNhcHRhaW5fcGxheWVyX2lkGAIgASgN",
            "ImsKHkNET1RBVXNlck1zZ19IZXJvUmVsaWNQcm9ncmVzcxIXCg9oZXJvX3Jl",
            "bGljX3R5cGUYASABKA0SDQoFdmFsdWUYAiABKA0SDwoHZWhhbmRsZRgDIAEo",
            "DRIQCghldmVudF9pZBgEIAEoDSKIAQoZQ0RPVEFVc2VyTXNnX0RhbWFnZVJl",
            "cG9ydBIRCglwbGF5ZXJfaWQYASABKA0SFgoOdGFyZ2V0X2hlcm9faWQYAiAB",
            "KA0SFgoOc291cmNlX2hlcm9faWQYAyABKA0SFQoNZGFtYWdlX2Ftb3VudBgE",
            "IAEoBRIRCglicm9hZGNhc3QYBSABKAgidQoZQ0RPVEFVc2VyTXNnX1NhbHV0",
            "ZVBsYXllchIYChBzb3VyY2VfcGxheWVyX2lkGAEgASgFEhgKEHRhcmdldF9w",
            "bGF5ZXJfaWQYAiABKAUSEgoKdGlwX2Ftb3VudBgDIAEoDRIQCghldmVudF9p",
            "ZBgEIAEoDSI8ChVDRE9UQVVzZXJNc2dfVGlwQWxlcnQSEQoJcGxheWVyX2lk",
            "GAEgASgNEhAKCHRpcF90ZXh0GAIgASgJIrUOChZDTXNnRE9UQUNvbWJhdExv",
            "Z0VudHJ5EjMKBHR5cGUYASABKA4yJS5nb29nbGUucHJvdG9idWYuRE9UQV9D",
            "T01CQVRMT0dfVFlQRVMSEwoLdGFyZ2V0X25hbWUYAiABKA0SGgoSdGFyZ2V0",
            "X3NvdXJjZV9uYW1lGAMgASgNEhUKDWF0dGFja2VyX25hbWUYBCABKA0SGgoS",
            "ZGFtYWdlX3NvdXJjZV9uYW1lGAUgASgNEhYKDmluZmxpY3Rvcl9uYW1lGAYg",
            "ASgNEhwKFGlzX2F0dGFja2VyX2lsbHVzaW9uGAcgASgIEhgKEGlzX2F0dGFj",
            "a2VyX2hlcm8YCCABKAgSGgoSaXNfdGFyZ2V0X2lsbHVzaW9uGAkgASgIEhYK",
            "DmlzX3RhcmdldF9oZXJvGAogASgIEhoKEmlzX3Zpc2libGVfcmFkaWFudBgL",
            "IAEoCBIXCg9pc192aXNpYmxlX2RpcmUYDCABKAgSDQoFdmFsdWUYDSABKA0S",
            "DgoGaGVhbHRoGA4gASgFEhEKCXRpbWVzdGFtcBgPIAEoAhIVCg1zdHVuX2R1",
            "cmF0aW9uGBAgASgCEhUKDXNsb3dfZHVyYXRpb24YESABKAISHAoUaXNfYWJp",
            "bGl0eV90b2dnbGVfb24YEiABKAgSHQoVaXNfYWJpbGl0eV90b2dnbGVfb2Zm",
            "GBMgASgIEhUKDWFiaWxpdHlfbGV2ZWwYFCABKA0SEgoKbG9jYXRpb25feBgV",
            "IAEoAhISCgpsb2NhdGlvbl95GBYgASgCEhMKC2dvbGRfcmVhc29uGBcgASgN",
            "EhUKDXRpbWVzdGFtcF9yYXcYGCABKAISGQoRbW9kaWZpZXJfZHVyYXRpb24Y",
            "GSABKAISEQoJeHBfcmVhc29uGBogASgNEhEKCWxhc3RfaGl0cxgbIAEoDRIV",
            "Cg1hdHRhY2tlcl90ZWFtGBwgASgNEhMKC3RhcmdldF90ZWFtGB0gASgNEhgK",
            "EG9ic193YXJkc19wbGFjZWQYHiABKA0SFgoOYXNzaXN0X3BsYXllcjAYHyAB",
            "KA0SFgoOYXNzaXN0X3BsYXllcjEYICABKA0SFgoOYXNzaXN0X3BsYXllcjIY",
            "ISABKA0SFgoOYXNzaXN0X3BsYXllcjMYIiABKA0SEwoLc3RhY2tfY291bnQY",
            "IyABKA0SFwoPaGlkZGVuX21vZGlmaWVyGCQgASgIEhoKEmlzX3RhcmdldF9i",
            "dWlsZGluZxglIAEoCBIZChFuZXV0cmFsX2NhbXBfdHlwZRgmIAEoDRIRCgly",
            "dW5lX3R5cGUYJyABKA0SFgoOYXNzaXN0X3BsYXllcnMYKCADKA0SFAoMaXNf",
            "aGVhbF9zYXZlGCkgASgIEhsKE2lzX3VsdGltYXRlX2FiaWxpdHkYKiABKAgS",
            "GwoTYXR0YWNrZXJfaGVyb19sZXZlbBgrIAEoDRIZChF0YXJnZXRfaGVyb19s",
            "ZXZlbBgsIAEoDRILCgN4cG0YLSABKA0SCwoDZ3BtGC4gASgNEhYKDmV2ZW50",
            "X2xvY2F0aW9uGC8gASgNEhYKDnRhcmdldF9pc19zZWxmGDAgASgIEhMKC2Rh",
            "bWFnZV90eXBlGDEgASgNEh0KFWludmlzaWJpbGl0eV9tb2RpZmllchgyIAEo",
            "CBIXCg9kYW1hZ2VfY2F0ZWdvcnkYMyABKA0SEAoIbmV0d29ydGgYNCABKA0S",
            "FQoNYnVpbGRpbmdfdHlwZRg1IAEoDRIhChltb2RpZmllcl9lbGFwc2VkX2R1",
            "cmF0aW9uGDYgASgCEhgKEHNpbGVuY2VfbW9kaWZpZXIYNyABKAgSGwoTaGVh",
            "bF9mcm9tX2xpZmVzdGVhbBg4IAEoCBIXCg9tb2RpZmllcl9wdXJnZWQYOSAB",
            "KAgSFAoMc3BlbGxfZXZhZGVkGDogASgIEiIKGm1vdGlvbl9jb250cm9sbGVy",
            "X21vZGlmaWVyGDsgASgIEhcKD2xvbmdfcmFuZ2Vfa2lsbBg8IAEoCBIeChZt",
            "b2RpZmllcl9wdXJnZV9hYmlsaXR5GD0gASgNEhoKEm1vZGlmaWVyX3B1cmdl",
            "X25wYxg+IAEoDRIVCg1yb290X21vZGlmaWVyGD8gASgIEh4KFnRvdGFsX3Vu",
            "aXRfZGVhdGhfY291bnQYQCABKA0SFQoNYXVyYV9tb2RpZmllchhBIAEoCBId",
            "ChVhcm1vcl9kZWJ1ZmZfbW9kaWZpZXIYQiABKAgSIwobbm9fcGh5c2ljYWxf",
            "ZGFtYWdlX21vZGlmaWVyGEMgASgIEhgKEG1vZGlmaWVyX2FiaWxpdHkYRCAB",
            "KA0SFwoPbW9kaWZpZXJfaGlkZGVuGEUgASgIEiMKG2luZmxpY3Rvcl9pc19z",
            "dG9sZW5fYWJpbGl0eRhGIAEoCBIYChBraWxsX2VhdGVyX2V2ZW50GEcgASgN",
            "EhkKEXVuaXRfc3RhdHVzX2xhYmVsGEggASgNKr8LChRET1RBX0NPTUJBVExP",
            "R19UWVBFUxIZChVET1RBX0NPTUJBVExPR19EQU1BR0UQABIjChZET1RBX0NP",
            "TUJBVExPR19JTlZBTElEEP///////////wESFwoTRE9UQV9DT01CQVRMT0df",
            "SEVBTBABEh8KG0RPVEFfQ09NQkFUTE9HX01PRElGSUVSX0FERBACEiIKHkRP",
            "VEFfQ09NQkFUTE9HX01PRElGSUVSX1JFTU9WRRADEhgKFERPVEFfQ09NQkFU",
            "TE9HX0RFQVRIEAQSGgoWRE9UQV9DT01CQVRMT0dfQUJJTElUWRAFEhcKE0RP",
            "VEFfQ09NQkFUTE9HX0lURU0QBhIbChdET1RBX0NPTUJBVExPR19MT0NBVElP",
            "ThAHEhcKE0RPVEFfQ09NQkFUTE9HX0dPTEQQCBIdChlET1RBX0NPTUJBVExP",
            "R19HQU1FX1NUQVRFEAkSFQoRRE9UQV9DT01CQVRMT0dfWFAQChIbChdET1RB",
            "X0NPTUJBVExPR19QVVJDSEFTRRALEhoKFkRPVEFfQ09NQkFUTE9HX0JVWUJB",
            "Q0sQDBIiCh5ET1RBX0NPTUJBVExPR19BQklMSVRZX1RSSUdHRVIQDRIeChpE",
            "T1RBX0NPTUJBVExPR19QTEFZRVJTVEFUUxAOEhwKGERPVEFfQ09NQkFUTE9H",
            "X01VTFRJS0lMTBAPEh0KGURPVEFfQ09NQkFUTE9HX0tJTExTVFJFQUsQEBIl",
            "CiFET1RBX0NPTUJBVExPR19URUFNX0JVSUxESU5HX0tJTEwQERIeChpET1RB",
            "X0NPTUJBVExPR19GSVJTVF9CTE9PRBASEicKI0RPVEFfQ09NQkFUTE9HX01P",
            "RElGSUVSX1NUQUNLX0VWRU5UEBMSJQohRE9UQV9DT01CQVRMT0dfTkVVVFJB",
            "TF9DQU1QX1NUQUNLEBQSHgoaRE9UQV9DT01CQVRMT0dfUElDS1VQX1JVTkUQ",
            "FRIlCiFET1RBX0NPTUJBVExPR19SRVZFQUxFRF9JTlZJU0lCTEUQFhIdChlE",
            "T1RBX0NPTUJBVExPR19IRVJPX1NBVkVEEBcSIAocRE9UQV9DT01CQVRMT0df",
            "TUFOQV9SRVNUT1JFRBAYEh8KG0RPVEFfQ09NQkFUTE9HX0hFUk9fTEVWRUxV",
            "UBAZEiMKH0RPVEFfQ09NQkFUTE9HX0JPVFRMRV9IRUFMX0FMTFkQGhIgChxE",
            "T1RBX0NPTUJBVExPR19FTkRHQU1FX1NUQVRTEBsSJAogRE9UQV9DT01CQVRM",
            "T0dfSU5URVJSVVBUX0NIQU5ORUwQHBIeChpET1RBX0NPTUJBVExPR19BTExJ",
            "RURfR09MRBAdEh4KGkRPVEFfQ09NQkFUTE9HX0FFR0lTX1RBS0VOEB4SHgoa",
            "RE9UQV9DT01CQVRMT0dfTUFOQV9EQU1BR0UQHxIsCihET1RBX0NPTUJBVExP",
            "R19QSFlTSUNBTF9EQU1BR0VfUFJFVkVOVEVEECASIAocRE9UQV9DT01CQVRM",
            "T0dfVU5JVF9TVU1NT05FRBAhEh8KG0RPVEFfQ09NQkFUTE9HX0FUVEFDS19F",
            "VkFERRAiEhsKF0RPVEFfQ09NQkFUTE9HX1RSRUVfQ1VUECMSIgoeRE9UQV9D",
            "T01CQVRMT0dfU1VDQ0VTU0ZVTF9TQ0FOECQSIQodRE9UQV9DT01CQVRMT0df",
            "RU5EX0tJTExTVFJFQUsQJRIkCiBET1RBX0NPTUJBVExPR19CTE9PRFNUT05F",
            "X0NIQVJHRRAmEiIKHkRPVEFfQ09NQkFUTE9HX0NSSVRJQ0FMX0RBTUFHRRAn",
            "Eh8KG0RPVEFfQ09NQkFUTE9HX1NQRUxMX0FCU09SQhAoEiIKHkRPVEFfQ09N",
            "QkFUTE9HX1VOSVRfVEVMRVBPUlRFRBApEiMKH0RPVEFfQ09NQkFUTE9HX0tJ",
            "TExfRUFURVJfRVZFTlQQKirnGwoRRE9UQV9DSEFUX01FU1NBR0USGgoWQ0hB",
            "VF9NRVNTQUdFX0hFUk9fS0lMTBAAEiEKFENIQVRfTUVTU0FHRV9JTlZBTElE",
            "EP///////////wESGgoWQ0hBVF9NRVNTQUdFX0hFUk9fREVOWRABEh4KGkNI",
            "QVRfTUVTU0FHRV9CQVJSQUNLU19LSUxMEAISGwoXQ0hBVF9NRVNTQUdFX1RP",
            "V0VSX0tJTEwQAxIbChdDSEFUX01FU1NBR0VfVE9XRVJfREVOWRAEEhsKF0NI",
            "QVRfTUVTU0FHRV9GSVJTVEJMT09EEAUSHAoYQ0hBVF9NRVNTQUdFX1NUUkVB",
            "S19LSUxMEAYSGAoUQ0hBVF9NRVNTQUdFX0JVWUJBQ0sQBxIWChJDSEFUX01F",
            "U1NBR0VfQUVHSVMQCBIcChhDSEFUX01FU1NBR0VfUk9TSEFOX0tJTEwQCRId",
            "ChlDSEFUX01FU1NBR0VfQ09VUklFUl9MT1NUEAoSIgoeQ0hBVF9NRVNTQUdF",
            "X0NPVVJJRVJfUkVTUEFXTkVEEAsSGwoXQ0hBVF9NRVNTQUdFX0dMWVBIX1VT",
            "RUQQDBIeChpDSEFUX01FU1NBR0VfSVRFTV9QVVJDSEFTRRANEhgKFENIQVRf",
            "TUVTU0FHRV9DT05ORUNUEA4SGwoXQ0hBVF9NRVNTQUdFX0RJU0NPTk5FQ1QQ",
            "DxIuCipDSEFUX01FU1NBR0VfRElTQ09OTkVDVF9XQUlUX0ZPUl9SRUNPTk5F",
            "Q1QQEBIqCiZDSEFUX01FU1NBR0VfRElTQ09OTkVDVF9USU1FX1JFTUFJTklO",
            "RxAREjEKLUNIQVRfTUVTU0FHRV9ESVNDT05ORUNUX1RJTUVfUkVNQUlOSU5H",
            "X1BMVVJBTBASEhoKFkNIQVRfTUVTU0FHRV9SRUNPTk5FQ1QQExIcChhDSEFU",
            "X01FU1NBR0VfUExBWUVSX0xFRlQQFBIeChpDSEFUX01FU1NBR0VfU0FGRV9U",
            "T19MRUFWRRAVEhwKGENIQVRfTUVTU0FHRV9SVU5FX1BJQ0tVUBAWEhwKGENI",
            "QVRfTUVTU0FHRV9SVU5FX0JPVFRMRRAXEhkKFUNIQVRfTUVTU0FHRV9JTlRI",
            "RUJBRxAYEhsKF0NIQVRfTUVTU0FHRV9TRUNSRVRTSE9QEBkSIwofQ0hBVF9N",
            "RVNTQUdFX0lURU1fQVVUT1BVUkNIQVNFRBAaEh8KG0NIQVRfTUVTU0FHRV9J",
            "VEVNU19DT01CSU5FRBAbEh0KGUNIQVRfTUVTU0FHRV9TVVBFUl9DUkVFUFMQ",
            "HBIlCiFDSEFUX01FU1NBR0VfQ0FOVF9VU0VfQUNUSU9OX0lURU0QHRIiCh5D",
            "SEFUX01FU1NBR0VfQ0hBUkdFU19FWEhBVVNURUQQHhIaChZDSEFUX01FU1NB",
            "R0VfQ0FOVFBBVVNFEB8SHQoZQ0hBVF9NRVNTQUdFX05PUEFVU0VTTEVGVBAg",
            "Eh0KGUNIQVRfTUVTU0FHRV9DQU5UUEFVU0VZRVQQIRIXChNDSEFUX01FU1NB",
            "R0VfUEFVU0VEECISIgoeQ0hBVF9NRVNTQUdFX1VOUEFVU0VfQ09VTlRET1dO",
            "ECMSGQoVQ0hBVF9NRVNTQUdFX1VOUEFVU0VEECQSHgoaQ0hBVF9NRVNTQUdF",
            "X0FVVE9fVU5QQVVTRUQQJRIaChZDSEFUX01FU1NBR0VfWU9VUEFVU0VEECYS",
            "IAocQ0hBVF9NRVNTQUdFX0NBTlRVTlBBVVNFVEVBTRAnEiIKHkNIQVRfTUVT",
            "U0FHRV9WT0lDRV9URVhUX0JBTk5FRBApEi4KKkNIQVRfTUVTU0FHRV9TUEVD",
            "VEFUT1JTX1dBVENISU5HX1RISVNfR0FNRRAqEiAKHENIQVRfTUVTU0FHRV9S",
            "RVBPUlRfUkVNSU5ERVIQKxIaChZDSEFUX01FU1NBR0VfRUNPTl9JVEVNECwS",
            "FgoSQ0hBVF9NRVNTQUdFX1RBVU5UEC0SFwoTQ0hBVF9NRVNTQUdFX1JBTkRP",
            "TRAuEhgKFENIQVRfTUVTU0FHRV9SRF9UVVJOEC8SIAocQ0hBVF9NRVNTQUdF",
            "X0RST1BfUkFURV9CT05VUxAxEiEKHUNIQVRfTUVTU0FHRV9OT19CQVRUTEVf",
            "UE9JTlRTEDISHQoZQ0hBVF9NRVNTQUdFX0RFTklFRF9BRUdJUxAzEh4KGkNI",
            "QVRfTUVTU0FHRV9JTkZPUk1BVElPTkFMEDQSHQoZQ0hBVF9NRVNTQUdFX0FF",
            "R0lTX1NUT0xFThA1Eh0KGUNIQVRfTUVTU0FHRV9ST1NIQU5fQ0FORFkQNhIc",
            "ChhDSEFUX01FU1NBR0VfSVRFTV9HSUZURUQQNxInCiNDSEFUX01FU1NBR0Vf",
            "SEVST19LSUxMX1dJVEhfR1JFRVZJTBA4EigKJENIQVRfTUVTU0FHRV9IT0xE",
            "T1VUX1RPV0VSX0RFU1RST1lFRBA5EicKI0NIQVRfTUVTU0FHRV9IT0xET1VU",
            "X1dBTExfREVTVFJPWUVEEDoSJgoiQ0hBVF9NRVNTQUdFX0hPTERPVVRfV0FM",
            "TF9GSU5JU0hFRBA7EikKJUNIQVRfTUVTU0FHRV9QTEFZRVJfTEVGVF9MSU1J",
            "VEVEX0hFUk8QPhIxCi1DSEFUX01FU1NBR0VfQUJBTkRPTl9MSU1JVEVEX0hF",
            "Uk9fRVhQTEFOQVRJT04QPxIoCiRDSEFUX01FU1NBR0VfRElTQ09OTkVDVF9M",
            "SU1JVEVEX0hFUk8QQBIzCi9DSEFUX01FU1NBR0VfTE9XX1BSSU9SSVRZX0NP",
            "TVBMRVRFRF9FWFBMQU5BVElPThBBEiwKKENIQVRfTUVTU0FHRV9SRUNSVUlU",
            "TUVOVF9EUk9QX1JBVEVfQk9OVVMQQhIxCi1DSEFUX01FU1NBR0VfRlJPU1RJ",
            "VlVTX1NISU5JTkdfQk9PU1RFUl9BQ1RJVkUQQxIgChxDSEFUX01FU1NBR0Vf",
            "UExBWUVSX0xFRlRfQUZLEEkSMgouQ0hBVF9NRVNTQUdFX1BMQVlFUl9MRUZU",
            "X0RJU0NPTk5FQ1RFRF9UT09fTE9ORxBKEiEKHUNIQVRfTUVTU0FHRV9QTEFZ",
            "RVJfQUJBTkRPTkVEEEsSJQohQ0hBVF9NRVNTQUdFX1BMQVlFUl9BQkFORE9O",
            "RURfQUZLEEwSNwozQ0hBVF9NRVNTQUdFX1BMQVlFUl9BQkFORE9ORURfRElT",
            "Q09OTkVDVEVEX1RPT19MT05HEE0SIwofQ0hBVF9NRVNTQUdFX1dJTExfTk9U",
            "X0JFX1NDT1JFRBBOEioKJkNIQVRfTUVTU0FHRV9XSUxMX05PVF9CRV9TQ09S",
            "RURfUkFOS0VEEE8SKwonQ0hBVF9NRVNTQUdFX1dJTExfTk9UX0JFX1NDT1JF",
            "RF9ORVRXT1JLEFASMgouQ0hBVF9NRVNTQUdFX1dJTExfTk9UX0JFX1NDT1JF",
            "RF9ORVRXT1JLX1JBTktFRBBREikKJUNIQVRfTUVTU0FHRV9DQU5fUVVJVF9X",
            "SVRIT1VUX0FCQU5ET04QUhI6CjZDSEFUX01FU1NBR0VfUkFOS0VEX0dBTUVf",
            "U1RJTExfU0NPUkVEX0xFQVZFUlNfR0VUX0xPU1MQUxI4CjRDSEFUX01FU1NB",
            "R0VfQUJBTkRPTl9SQU5LRURfQkVGT1JFX0ZJUlNUX0JMT09EX1BBUlRZEFQS",
            "IQodQ0hBVF9NRVNTQUdFX0NPTVBFTkRJVU1fTEVWRUwQVRIqCiZDSEFUX01F",
            "U1NBR0VfVklDVE9SWV9QUkVESUNUSU9OX1NUUkVBSxBWEiIKHkNIQVRfTUVT",
            "U0FHRV9BU1NBU1NJTl9BTk5PVU5DRRBXEiEKHUNIQVRfTUVTU0FHRV9BU1NB",
            "U1NJTl9TVUNDRVNTEFgSIAocQ0hBVF9NRVNTQUdFX0FTU0FTU0lOX0RFTklF",
            "RBBZEjcKM0NIQVRfTUVTU0FHRV9WSUNUT1JZX1BSRURJQ1RJT05fU0lOR0xF",
            "X1VTRVJfQ09ORklSTRBaEhwKGENIQVRfTUVTU0FHRV9FRkZJR1lfS0lMTBBb",
            "EisKJ0NIQVRfTUVTU0FHRV9WT0lDRV9URVhUX0JBTk5FRF9PVkVSRkxPVxBc",
            "EiIKHkNIQVRfTUVTU0FHRV9ZRUFSX0JFQVNUX0tJTExFRBBdEiAKHENIQVRf",
            "TUVTU0FHRV9QQVVTRV9DT1VOVERPV04QXhIeChpDSEFUX01FU1NBR0VfQ09J",
            "TlNfV0FHRVJFRBBfEiMKH0NIQVRfTUVTU0FHRV9IRVJPX05PTUlOQVRFRF9C",
            "QU4QYBIcChhDSEFUX01FU1NBR0VfSEVST19CQU5ORUQQYRIfChtDSEFUX01F",
            "U1NBR0VfSEVST19CQU5fQ09VTlQQYhIeChpDSEFUX01FU1NBR0VfUklWRVJf",
            "UEFJTlRFRBBjEhoKFkNIQVRfTUVTU0FHRV9TQ0FOX1VTRUQQZBIeChpDSEFU",
            "X01FU1NBR0VfU0hSSU5FX0tJTExFRBBlEiIKHkNIQVRfTUVTU0FHRV9XQUdF",
            "Ul9UT0tFTl9TUEVOVBBmEhsKF0NIQVRfTUVTU0FHRV9SQU5LX1dBR0VSEGcS",
            "JAogQ0hBVF9NRVNTQUdFX05FV19QTEFZRVJfUkVNSU5ERVIQaBIlCiFDSEFU",
            "X01FU1NBR0VfT0JTRVJWRVJfV0FSRF9LSUxMRUQQaRIjCh9DSEFUX01FU1NB",
            "R0VfU0VOVFJZX1dBUkRfS0lMTEVEEGoqvgEKHURPVEFfTk9fQkFUVExFX1BP",
            "SU5UU19SRUFTT05TEgoKBlVLTk9XThAAEiUKIU5PX0JBVFRMRV9QT0lOVFNf",
            "V1JPTkdfTE9CQllfVFlQRRABEiIKHk5PX0JBVFRMRV9QT0lOVFNfUFJBQ1RJ",
            "Q0VfQk9UUxACEiMKH05PX0JBVFRMRV9QT0lOVFNfQ0hFQVRTX0VOQUJMRUQQ",
            "AxIhCh1OT19CQVRUTEVfUE9JTlRTX0xPV19QUklPUklUWRAEKtkBChdET1RB",
            "X1JFUExBWV9TVEFURV9FVkVOVBIcChhET1RBX1JFUExBWV9TVEFURV9VS05P",
            "V04QABImCiJET1RBX1JFUExBWV9TVEFURV9FVkVOVF9HQU1FX1NUQVJUEAES",
            "KQolRE9UQV9SRVBMQVlfU1RBVEVfRVZFTlRfU1RBUlRJTkdfSE9SThACEicK",
            "I0RPVEFfUkVQTEFZX1NUQVRFX0VWRU5UX0ZJUlNUX0JMT09EEAMSJAogRE9U",
            "QV9SRVBMQVlfU1RBVEVfRVZFTlRfU0hPV0NBU0UQBCrhAQoXRE9UQV9DSEFU",
            "X0lORk9STUFUSU9OQUwSEAoMSU5GT19VTktOT1dOEAASIQodSU5GT19DT09Q",
            "X0JBVFRMRV9QT0lOVFNfUlVMRVMQARIjCh9JTkZPX0ZST1NUSVZVU19BQkFO",
            "RE9OX1JFTUlOREVSEAISGAoUSU5GT19SQU5LRURfUkVNSU5ERVIQAxIrCidJ",
            "TkZPX0NPT1BfTE9XX1BSSU9SSVRZX1BBU1NJVkVfUkVNSU5ERVIQBBIlCiFJ",
            "TkZPX0NVU1RPTV9HQU1FX1BFTkFMVFlfUkVNSU5ERVIQBSruAgoWRE9UQV9B",
            "QklMSVRZX1BJTkdfVFlQRRISCg5BQklMSVRZX1VLTk9XThAAEhYKEkFCSUxJ",
            "VFlfUElOR19SRUFEWRABEhUKEUFCSUxJVFlfUElOR19NQU5BEAISGQoVQUJJ",
            "TElUWV9QSU5HX0NPT0xET1dOEAMSFgoSQUJJTElUWV9QSU5HX0VORU1ZEAQS",
            "GgoWQUJJTElUWV9QSU5HX1VOTEVBUk5FRBAFEhsKF0FCSUxJVFlfUElOR19J",
            "TkJBQ0tQQUNLEAYSGAoUQUJJTElUWV9QSU5HX0lOU1RBU0gQBxIaChZBQklM",
            "SVRZX1BJTkdfT05DT1VSSUVSEAgSFQoRQUJJTElUWV9QSU5HX0FMTFkQCRIc",
            "ChhBQklMSVRZX1BJTkdfTEVBUk5fUkVBRFkQChIbChdBQklMSVRZX1BJTkdf",
            "V0lMTF9MRUFSThALEh0KGUFCSUxJVFlfUElOR19GVVRVUkVfTEVBUk4QDCrl",
            "AQoTRURvdGFFbnRpdHlNZXNzYWdlcxIUChBET1RBX1VOSVRfU1BFRUNIEAAS",
            "GQoVRE9UQV9VTklUX1NQRUVDSF9NVVRFEAESGQoVRE9UQV9VTklUX0FERF9H",
            "RVNUVVJFEAISHAoYRE9UQV9VTklUX1JFTU9WRV9HRVNUVVJFEAMSIQodRE9U",
            "QV9VTklUX1JFTU9WRV9BTExfR0VTVFVSRVMQBBIaChZET1RBX1VOSVRfRkFE",
            "RV9HRVNUVVJFEAYSJQohRE9UQV9VTklUX1NQRUVDSF9DTElFTlRTSURFX1JV",
            "TEVTEAcq5wYKFURPVEFfUEFSVElDTEVfTUVTU0FHRRImCiJET1RBX1BBUlRJ",
            "Q0xFX01BTkFHRVJfRVZFTlRfQ1JFQVRFEAASJgoiRE9UQV9QQVJUSUNMRV9N",
            "QU5BR0VSX0VWRU5UX1VQREFURRABEi4KKkRPVEFfUEFSVElDTEVfTUFOQUdF",
            "Ul9FVkVOVF9VUERBVEVfRk9SV0FSRBACEjIKLkRPVEFfUEFSVElDTEVfTUFO",
            "QUdFUl9FVkVOVF9VUERBVEVfT1JJRU5UQVRJT04QAxIvCitET1RBX1BBUlRJ",
            "Q0xFX01BTkFHRVJfRVZFTlRfVVBEQVRFX0ZBTExCQUNLEAQSKgomRE9UQV9Q",
            "QVJUSUNMRV9NQU5BR0VSX0VWRU5UX1VQREFURV9FTlQQBRItCilET1RBX1BB",
            "UlRJQ0xFX01BTkFHRVJfRVZFTlRfVVBEQVRFX09GRlNFVBAGEicKI0RPVEFf",
            "UEFSVElDTEVfTUFOQUdFUl9FVkVOVF9ERVNUUk9ZEAcSMQotRE9UQV9QQVJU",
            "SUNMRV9NQU5BR0VSX0VWRU5UX0RFU1RST1lfSU5WT0xWSU5HEAgSJwojRE9U",
            "QV9QQVJUSUNMRV9NQU5BR0VSX0VWRU5UX1JFTEVBU0UQCRInCiNET1RBX1BB",
            "UlRJQ0xFX01BTkFHRVJfRVZFTlRfTEFURU5DWRAKEisKJ0RPVEFfUEFSVElD",
            "TEVfTUFOQUdFUl9FVkVOVF9TSE9VTERfRFJBVxALEiYKIkRPVEFfUEFSVElD",
            "TEVfTUFOQUdFUl9FVkVOVF9GUk9aRU4QDBI/CjtET1RBX1BBUlRJQ0xFX01B",
            "TkFHRVJfRVZFTlRfQ0hBTkdFX0NPTlRST0xfUE9JTlRfQVRUQUNITUVOVBAN",
            "EjYKMkRPVEFfUEFSVElDTEVfTUFOQUdFUl9FVkVOVF9VUERBVEVfRU5USVRZ",
            "X1BPU0lUSU9OEA4SMgouRE9UQV9QQVJUSUNMRV9NQU5BR0VSX0VWRU5UX1NF",
            "VF9GT1dfUFJPUEVSVElFUxAPEigKJERPVEFfUEFSVElDTEVfTUFOQUdFUl9F",
            "VkVOVF9TRVRfVEVYVBAQEjQKMEdBTUVfUEFSVElDTEVfTUFOQUdFUl9FVkVO",
            "VF9TRVRfU0hPVUxEX0NIRUNLX0ZPVxARKrEFChNET1RBX09WRVJIRUFEX0FM",
            "RVJUEhcKE09WRVJIRUFEX0FMRVJUX0dPTEQQABIXChNPVkVSSEVBRF9BTEVS",
            "VF9ERU5ZEAESGwoXT1ZFUkhFQURfQUxFUlRfQ1JJVElDQUwQAhIVChFPVkVS",
            "SEVBRF9BTEVSVF9YUBADEiUKIU9WRVJIRUFEX0FMRVJUX0JPTlVTX1NQRUxM",
            "X0RBTUFHRRAEEhcKE09WRVJIRUFEX0FMRVJUX01JU1MQBRIZChVPVkVSSEVB",
            "RF9BTEVSVF9EQU1BR0UQBhIYChRPVkVSSEVBRF9BTEVSVF9FVkFERRAHEhgK",
            "FE9WRVJIRUFEX0FMRVJUX0JMT0NLEAgSJgoiT1ZFUkhFQURfQUxFUlRfQk9O",
            "VVNfUE9JU09OX0RBTUFHRRAJEhcKE09WRVJIRUFEX0FMRVJUX0hFQUwQChIb",
            "ChdPVkVSSEVBRF9BTEVSVF9NQU5BX0FERBALEhwKGE9WRVJIRUFEX0FMRVJU",
            "X01BTkFfTE9TUxAMEiEKHU9WRVJIRUFEX0FMRVJUX0xBU1RfSElUX0VBUkxZ",
            "EA0SIQodT1ZFUkhFQURfQUxFUlRfTEFTVF9ISVRfQ0xPU0UQDhIgChxPVkVS",
            "SEVBRF9BTEVSVF9MQVNUX0hJVF9NSVNTEA8SIAocT1ZFUkhFQURfQUxFUlRf",
            "TUFHSUNBTF9CTE9DSxAQEiIKHk9WRVJIRUFEX0FMRVJUX0lOQ09NSU5HX0RB",
            "TUFHRRAREiIKHk9WRVJIRUFEX0FMRVJUX09VVEdPSU5HX0RBTUFHRRASEiEK",
            "HU9WRVJIRUFEX0FMRVJUX0RJU0FCTEVfUkVTSVNUEBMSGAoUT1ZFUkhFQURf",
            "QUxFUlRfREVBVEgQFBIaChZPVkVSSEVBRF9BTEVSVF9CTE9DS0VEEBUqawoR",
            "RE9UQV9ST1NIQU5fUEhBU0USFwoTa19TUlNQX1JPU0hBTl9BTElWRRAAEhwK",
            "GGtfU1JTUF9ST1NIQU5fQkFTRV9USU1FUhABEh8KG2tfU1JTUF9ST1NIQU5f",
            "VklTSUJMRV9USU1FUhACKoEEChZET1RBX1BPU0lUSU9OX0NBVEVHT1JZEhYK",
            "EkRPVEFfUE9TSVRJT05fTk9ORRAAEh0KGURPVEFfUE9TSVRJT05fQk9UVE9N",
            "X0xBTkUQARIaChZET1RBX1BPU0lUSU9OX01JRF9MQU5FEAISGgoWRE9UQV9Q",
            "T1NJVElPTl9UT1BfTEFORRADEiAKHERPVEFfUE9TSVRJT05fUkFESUFOVF9K",
            "VU5HTEUQBBIdChlET1RBX1BPU0lUSU9OX0RJUkVfSlVOR0xFEAUSIgoeRE9U",
            "QV9QT1NJVElPTl9SQURJQU5UX0FOQ0lFTlRTEAYSHwobRE9UQV9QT1NJVElP",
            "Tl9ESVJFX0FOQ0lFTlRTEAcSJQohRE9UQV9QT1NJVElPTl9SQURJQU5UX1NF",
            "Q1JFVF9TSE9QEAgSIgoeRE9UQV9QT1NJVElPTl9ESVJFX1NFQ1JFVF9TSE9Q",
            "EAkSFwoTRE9UQV9QT1NJVElPTl9SSVZFUhAKEhwKGERPVEFfUE9TSVRJT05f",
            "Uk9TSEFOX1BJVBALEh4KGkRPVEFfUE9TSVRJT05fUkFESUFOVF9CQVNFEAwS",
            "GwoXRE9UQV9QT1NJVElPTl9ESVJFX0JBU0UQDRIaChZET1RBX1BPU0lUSU9O",
            "X0ZPVU5UQUlOEA4SFwoTRE9UQV9QT1NJVElPTl9PVEhFUhAPKuYBChhET1RB",
            "X0FCSUxJVFlfVEFSR0VUX1RZUEUSHAoYRE9UQV9BQklMSVRZX1RBUkdFVF9O",
            "T05FEAASHAoYRE9UQV9BQklMSVRZX1RBUkdFVF9TRUxGEAESIQodRE9UQV9B",
            "QklMSVRZX1RBUkdFVF9BTExZX0hFUk8QAhIiCh5ET1RBX0FCSUxJVFlfVEFS",
            "R0VUX0FMTFlfQ1JFRVAQAxIiCh5ET1RBX0FCSUxJVFlfVEFSR0VUX0VORU1Z",
            "X0hFUk8QBBIjCh9ET1RBX0FCSUxJVFlfVEFSR0VUX0VORU1ZX0NSRUVQEAUq",
            "mAgKDUVIZXJvU3RhdFR5cGUSGAoUa19FSGVyb1N0YXRUeXBlX05vbmUQABIj",
            "Ch5rX0VIZXJvU3RhdFR5cGVfQXhlVG90YWxEYW1hZ2UQ0A8SJwoia19FSGVy",
            "b1N0YXRUeXBlX0JhdHRsZUh1bmdlckRhbWFnZRDRDxInCiJrX0VIZXJvU3Rh",
            "dFR5cGVfQ291bnRlckhlbGl4RGFtYWdlENIPEicKImtfRUhlcm9TdGF0VHlw",
            "ZV9DdWxsaW5nQmxhZGVEYW1hZ2UQ0w8SLAona19FSGVyb1N0YXRUeXBlX0Jl",
            "cnNlcmtlcnNDYWxsQ2FzdENvdW50ENQPEjMKLmtfRUhlcm9TdGF0VHlwZV9C",
            "ZXJzZXJrZXJzQ2FsbEhlcm9lc0hpdEF2ZXJhZ2UQ1Q8SMAora19FSGVyb1N0",
            "YXRUeXBlX0JlcnNlcmtlcnNDYWxsT3RoZXJVbml0c0hpdBDWDxIzCi5rX0VI",
            "ZXJvU3RhdFR5cGVfQmVyc2Vya2Vyc0NhbGxIZXJvQXR0YWNrc1Rha2VuENcP",
            "EjQKL2tfRUhlcm9TdGF0VHlwZV9CZXJzZXJrZXJzQ2FsbE90aGVyQXR0YWNr",
            "c1Rha2VuENgPEioKJWtfRUhlcm9TdGF0VHlwZV9CYXR0bGVIdW5nZXJDYXN0",
            "Q291bnQQ2Q8SMgota19FSGVyb1N0YXRUeXBlX0JhdHRsZUh1bmdlclBvdGVu",
            "dGlhbER1cmF0aW9uENoPEjAKK2tfRUhlcm9TdGF0VHlwZV9CYXR0bGVIdW5n",
            "ZXJBdmVyYWdlRHVyYXRpb24Q2w8SKgola19FSGVyb1N0YXRUeXBlX0NvdW50",
            "ZXJIZWxpeFByb2NDb3VudBDcDxIuCilrX0VIZXJvU3RhdFR5cGVfQ291bnRl",
            "ckhlbGl4SGVyb1Byb2NDb3VudBDdDxIxCixrX0VIZXJvU3RhdFR5cGVfQ291",
            "bnRlckhlbGl4SGVyb2VzSGl0QXZlcmFnZRDeDxIzCi5rX0VIZXJvU3RhdFR5",
            "cGVfQ291bnRlckhlbGl4T3RoZXJVbml0c0hpdENvdW50EN8PEioKJWtfRUhl",
            "cm9TdGF0VHlwZV9DdWxsaW5nQmxhZGVDYXN0Q291bnQQ4A8SKgola19FSGVy",
            "b1N0YXRUeXBlX0N1bGxpbmdCbGFkZUtpbGxDb3VudBDhDxI0Ci9rX0VIZXJv",
            "U3RhdFR5cGVfQ3VsbGluZ0JsYWRlQXZlcmFnZUhlYWx0aEN1bGxlZBDiDxI3",
            "CjJrX0VIZXJvU3RhdFR5cGVfQ3VsbGluZ0JsYWRlQXZlcmFnZURhbWFnZUF2",
            "YWlsYWJsZRDjDxIwCitrX0VIZXJvU3RhdFR5cGVfQ3VsbGluZ0JsYWRlSGVy",
            "b0J1ZmZBdmVyYWdlEOQPKqkEChdFUGxheWVyVm9pY2VMaXN0ZW5TdGF0ZRIO",
            "CgprUFZMU19Ob25lEAASGgoWa1BWTFNfRGVuaWVkQ2hhdEJhbm5lZBABEhcK",
            "E2tQVkxTX0RlbmllZFBhcnRuZXIQAhImCiJrUFZMU19EZW5pZWRITFRWVGFs",
            "a2VyTm90U3BlY3RhdG9yEAMSJAoga1BWTFNfRGVuaWVkSExUVk5vVGFsa2Vy",
            "UGxheWVySUQQBBIoCiRrUFZMU19EZW5pZWRITFRWVGFsa2VyTm90QnJvYWRj",
            "YXN0ZXIQBRIdChlrUFZMU19EZW5pZWRUZWFtU3BlY3RhdG9yEAYSFwoTa1BW",
            "TFNfRGVuaWVkU3R1ZGVudBAIEhAKDGtQVkxTX0RlbmllZBBAEiYKImtQVkxT",
            "X0FsbG93SExUVlRhbGtlcklzQnJvYWRjYXN0ZXIQQRIcChhrUFZMU19BbGxv",
            "d0NvQnJvYWRjYXN0ZXIQQhIWChJrUFZMU19BbGxvd0FsbENoYXQQQxIdChlr",
            "UFZMU19BbGxvd1N0dWRlbnRUb0NvYWNoEEQSHAoYa1BWTFNfQWxsb3dGZWxs",
            "b3dTdHVkZW50EEUSHAoYa1BWTFNfQWxsb3dUYWxrZXJJc0NvYWNoEEYSHAoY",
            "a1BWTFNfQWxsb3dDb2FjaEhlYXJUZWFtEEcSFwoTa1BWTFNfQWxsb3dTYW1l",
            "VGVhbRBIEhcKE2tQVkxTX0FsbG93U2hvd2Nhc2UQSSpCChBFUHJvamVjdGlv",
            "bkV2ZW50EhIKDmVQRV9GaXJzdEJsb29kEAASGgoWZVBFX0tpbGxzdHJlYWtf",
            "Z29kbGlrZRABQhJIAYABAKoCClByb3RvLkRvdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.Dota.NetworkbasetypesReflection.Descriptor, global::Proto.Dota.DotaCommonmessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.DOTA_COMBATLOG_TYPES), typeof(global::Proto.Dota.DOTA_CHAT_MESSAGE), typeof(global::Proto.Dota.DOTA_NO_BATTLE_POINTS_REASONS), typeof(global::Proto.Dota.DOTA_REPLAY_STATE_EVENT), typeof(global::Proto.Dota.DOTA_CHAT_INFORMATIONAL), typeof(global::Proto.Dota.DOTA_ABILITY_PING_TYPE), typeof(global::Proto.Dota.EDotaEntityMessages), typeof(global::Proto.Dota.DOTA_PARTICLE_MESSAGE), typeof(global::Proto.Dota.DOTA_OVERHEAD_ALERT), typeof(global::Proto.Dota.DOTA_ROSHAN_PHASE), typeof(global::Proto.Dota.DOTA_POSITION_CATEGORY), typeof(global::Proto.Dota.DOTA_ABILITY_TARGET_TYPE), typeof(global::Proto.Dota.EHeroStatType), typeof(global::Proto.Dota.EPlayerVoiceListenState), typeof(global::Proto.Dota.EProjectionEvent), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ChatEvent), global::Proto.Dota.CDOTAUserMsg_ChatEvent.Parser, new[]{ "Type", "Value", "Playerid1", "Playerid2", "Playerid3", "Playerid4", "Playerid5", "Playerid6", "Value2", "Value3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_BotChat), global::Proto.Dota.CDOTAUserMsg_BotChat.Parser, new[]{ "PlayerId", "Format", "Message", "Target", "TeamOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_CombatLogBulkData), global::Proto.Dota.CDOTAUserMsg_CombatLogBulkData.Parser, new[]{ "CombatEntries", "Timestamp", "Duration", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo), global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Parser, new[]{ "Attackers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker), global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Parser, new[]{ "Attacker_", "TotalDamage", "Abilities", "AttackerName" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability), global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability.Parser, new[]{ "AbilityId", "Damage" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_GlobalLightColor), global::Proto.Dota.CDOTAUserMsg_GlobalLightColor.Parser, new[]{ "Color", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_GlobalLightDirection), global::Proto.Dota.CDOTAUserMsg_GlobalLightDirection.Parser, new[]{ "Direction", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_LocationPing), global::Proto.Dota.CDOTAUserMsg_LocationPing.Parser, new[]{ "PlayerId", "LocationPing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_EnemyItemAlert), global::Proto.Dota.CDOTAUserMsg_EnemyItemAlert.Parser, new[]{ "PlayerId", "TargetPlayerId", "ItemAbilityId", "RuneType", "EntityId", "ItemLevel", "PrimaryCharges", "SecondaryCharges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ModifierAlert), global::Proto.Dota.CDOTAUserMsg_ModifierAlert.Parser, new[]{ "PlayerId", "ClassName", "StackCount", "IsDebuff", "TargetEntindex", "SecondsRemaining" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_HPManaAlert), global::Proto.Dota.CDOTAUserMsg_HPManaAlert.Parser, new[]{ "PlayerId", "TargetEntindex", "ShowRawValues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert), global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Parser, new[]{ "Team", "GoldValue", "EntityHandle", "Timestamp", "LostItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Types.LostItem), global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Types.LostItem.Parser, new[]{ "ItemAbilityId", "Quantity" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_MinimapEvent), global::Proto.Dota.CDOTAUserMsg_MinimapEvent.Parser, new[]{ "EventType", "EntityHandle", "X", "Y", "Duration", "TargetEntityHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_MapLine), global::Proto.Dota.CDOTAUserMsg_MapLine.Parser, new[]{ "PlayerId", "Mapline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_CreateLinearProjectile), global::Proto.Dota.CDOTAUserMsg_CreateLinearProjectile.Parser, new[]{ "Origin", "Velocity", "Latency", "Entindex", "ParticleIndex", "Handle", "Acceleration", "MaxSpeed", "FowRadius", "StickyFowReveal", "Distance", "Colorgemcolor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_DestroyLinearProjectile), global::Proto.Dota.CDOTAUserMsg_DestroyLinearProjectile.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_DodgeTrackingProjectiles), global::Proto.Dota.CDOTAUserMsg_DodgeTrackingProjectiles.Parser, new[]{ "Entindex", "AttacksOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SpectatorPlayerClick), global::Proto.Dota.CDOTAUserMsg_SpectatorPlayerClick.Parser, new[]{ "Entindex", "OrderType", "TargetIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SpectatorPlayerUnitOrders), global::Proto.Dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.Parser, new[]{ "Entindex", "OrderType", "Units", "TargetIndex", "AbilityId", "Position", "Queue", "SequenceNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_NevermoreRequiem), global::Proto.Dota.CDOTAUserMsg_NevermoreRequiem.Parser, new[]{ "EntityHandle", "Lines", "Origin", "Reverse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_HudError), global::Proto.Dota.CDOTAUserMsg_HudError.Parser, new[]{ "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SharedCooldown), global::Proto.Dota.CDOTAUserMsg_SharedCooldown.Parser, new[]{ "Entindex", "Name", "Cooldown", "NameIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_HalloweenDrops), global::Proto.Dota.CDOTAUserMsg_HalloweenDrops.Parser, new[]{ "ItemDefs", "PlayerIds", "PrizeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_PredictionResult), global::Proto.Dota.CDOTAUserMsg_PredictionResult.Parser, new[]{ "AccountId", "MatchId", "Correct", "Predictions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction), global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction.Parser, new[]{ "ItemDef", "NumCorrect", "NumFails", "Result", "GrantedItemDefs" }, null, new[]{ typeof(global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction.Types.EResult) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAResponseQuerySerialized), global::Proto.Dota.CDOTAResponseQuerySerialized.Parser, new[]{ "Facts" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact), global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact.Parser, new[]{ "Key", "Valtype", "ValNumeric", "ValString" }, null, new[]{ typeof(global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTASpeechMatchOnClient), global::Proto.Dota.CDOTASpeechMatchOnClient.Parser, new[]{ "Concept", "RecipientType", "Responsequery", "Randomseed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_UnitEvent), global::Proto.Dota.CDOTAUserMsg_UnitEvent.Parser, new[]{ "MsgType", "EntityIndex", "Speech", "SpeechMute", "AddGesture", "RemoveGesture", "BloodImpact", "FadeGesture", "SpeechMatchOnClient" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.Speech), global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.Speech.Parser, new[]{ "Concept", "Response", "RecipientType", "Level", "Muteable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.SpeechMute), global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.SpeechMute.Parser, new[]{ "Delay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.AddGesture), global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.AddGesture.Parser, new[]{ "Activity", "Slot", "FadeIn", "FadeOut", "PlaybackRate", "SequenceVariant" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.RemoveGesture), global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.RemoveGesture.Parser, new[]{ "Activity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.BloodImpact), global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.BloodImpact.Parser, new[]{ "Scale", "XNormal", "YNormal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.FadeGesture), global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.FadeGesture.Parser, new[]{ "Activity" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ItemPurchased), global::Proto.Dota.CDOTAUserMsg_ItemPurchased.Parser, new[]{ "ItemAbilityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Parser, new[]{ "Type", "Index", "ReleaseParticleIndex", "CreateParticle", "DestroyParticle", "DestroyParticleInvolving", "UpdateParticle", "UpdateParticleFwd", "UpdateParticleOrient", "UpdateParticleFallback", "UpdateParticleOffset", "UpdateParticleEnt", "UpdateParticleShouldDraw", "UpdateParticleSetFrozen", "ChangeControlPointAttachment", "UpdateEntityPosition", "SetParticleFowProperties", "SetParticleText", "SetParticleShouldCheckFow" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ReleaseParticleIndex), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ReleaseParticleIndex.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.CreateParticle), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.CreateParticle.Parser, new[]{ "ParticleNameIndex", "AttachType", "EntityHandle", "EntityHandleForModifiers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticle), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticle.Parser, new[]{ "DestroyImmediately" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticleInvolving), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticleInvolving.Parser, new[]{ "DestroyImmediately", "EntityHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticle), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticle.Parser, new[]{ "ControlPoint", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFwd), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFwd.Parser, new[]{ "ControlPoint", "Forward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOrient), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOrient.Parser, new[]{ "ControlPoint", "Forward", "Right", "Up", "Left" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFallback), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFallback.Parser, new[]{ "ControlPoint", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOffset), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOffset.Parser, new[]{ "ControlPoint", "OriginOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleEnt), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleEnt.Parser, new[]{ "ControlPoint", "EntityHandle", "AttachType", "Attachment", "FallbackPosition", "IncludeWearables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleSetFrozen), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleSetFrozen.Parser, new[]{ "SetFrozen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleShouldDraw), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleShouldDraw.Parser, new[]{ "ShouldDraw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ChangeControlPointAttachment), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ChangeControlPointAttachment.Parser, new[]{ "AttachmentOld", "AttachmentNew", "EntityHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateEntityPosition), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateEntityPosition.Parser, new[]{ "EntityHandle", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleFoWProperties), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleFoWProperties.Parser, new[]{ "FowControlPoint", "FowControlPoint2", "FowRadius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleShouldCheckFoW), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleShouldCheckFoW.Parser, new[]{ "CheckFow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleText), global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleText.Parser, new[]{ "Text" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_OverheadEvent), global::Proto.Dota.CDOTAUserMsg_OverheadEvent.Parser, new[]{ "MessageType", "Value", "TargetPlayerEntindex", "TargetEntindex", "SourcePlayerEntindex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_WorldLine), global::Proto.Dota.CDOTAUserMsg_WorldLine.Parser, new[]{ "PlayerId", "Worldline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ChatWheel), global::Proto.Dota.CDOTAUserMsg_ChatWheel.Parser, new[]{ "ChatMessageId", "PlayerId", "AccountId", "ParamHeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_GamerulesStateChanged), global::Proto.Dota.CDOTAUserMsg_GamerulesStateChanged.Parser, new[]{ "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SendStatPopup), global::Proto.Dota.CDOTAUserMsg_SendStatPopup.Parser, new[]{ "PlayerId", "Statpopup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_DismissAllStatPopups), global::Proto.Dota.CDOTAUserMsg_DismissAllStatPopups.Parser, new[]{ "Dismissallmsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SendRoshanSpectatorPhase), global::Proto.Dota.CDOTAUserMsg_SendRoshanSpectatorPhase.Parser, new[]{ "Phase", "PhaseStartTime", "PhaseLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SendRoshanPopup), global::Proto.Dota.CDOTAUserMsg_SendRoshanPopup.Parser, new[]{ "Reclaimed", "Gametime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_TE_Projectile), global::Proto.Dota.CDOTAUserMsg_TE_Projectile.Parser, new[]{ "HSource", "HTarget", "MoveSpeed", "SourceAttachment", "ParticleSystemHandle", "Dodgeable", "IsAttack", "IsEvaded", "ExpireTime", "Maximpacttime", "Colorgemcolor", "LaunchTick", "Handle", "VTargetLoc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_TE_ProjectileLoc), global::Proto.Dota.CDOTAUserMsg_TE_ProjectileLoc.Parser, new[]{ "VSourceLoc", "HTarget", "MoveSpeed", "ParticleSystemHandle", "Dodgeable", "IsAttack", "IsEvaded", "ExpireTime", "VTargetLoc", "Colorgemcolor", "LaunchTick", "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_TE_DestroyProjectile), global::Proto.Dota.CDOTAUserMsg_TE_DestroyProjectile.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_TE_DotaBloodImpact), global::Proto.Dota.CDOTAUserMsg_TE_DotaBloodImpact.Parser, new[]{ "Entity", "Scale", "Xnormal", "Ynormal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_TE_UnitAnimation), global::Proto.Dota.CDOTAUserMsg_TE_UnitAnimation.Parser, new[]{ "Entity", "SequenceVariant", "Playbackrate", "Castpoint", "Type", "Activity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_TE_UnitAnimationEnd), global::Proto.Dota.CDOTAUserMsg_TE_UnitAnimationEnd.Parser, new[]{ "Entity", "Snap" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_AbilitySteal), global::Proto.Dota.CDOTAUserMsg_AbilitySteal.Parser, new[]{ "PlayerId", "AbilityId", "AbilityLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_StatsHeroLookup), global::Proto.Dota.CDOTAUserMsg_StatsHeroLookup.Parser, new[]{ "PlayerId", "HeroId", "HeroName", "Persona" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo), global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Parser, new[]{ "AveragePosition", "PositionDetails" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair), global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair.Parser, new[]{ "PositionCategory", "PositionCount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_StatsPlayerKillShare), global::Proto.Dota.CDOTAUserMsg_StatsPlayerKillShare.Parser, new[]{ "PlayerId", "KillSharePercent", "PlayerLocX", "PlayerLocY", "HealthPercent", "ManaPercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_StatsKillDetails), global::Proto.Dota.CDOTAUserMsg_StatsKillDetails.Parser, new[]{ "VictimId", "KillShares", "DamageToKill", "EffectiveHealth", "DeathTime", "KillerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgHeroAbilityStat), global::Proto.Dota.CMsgHeroAbilityStat.Parser, new[]{ "StatType", "IntValue", "FloatValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgCombatAnalyzerPlayerStat), global::Proto.Dota.CMsgCombatAnalyzerPlayerStat.Parser, new[]{ "AccountId", "HeroAbilityStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgCombatAnalyzerStats), global::Proto.Dota.CMsgCombatAnalyzerStats.Parser, new[]{ "MatchId", "PlayerStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ProjectionAbility), global::Proto.Dota.CDOTAUserMsg_ProjectionAbility.Parser, new[]{ "AbilityId", "CasterEntIndex", "CasterTeam", "ChannelEnd", "Origin", "TrackCasterOnly", "EndTime", "VictimEntIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_ProjectionEvent), global::Proto.Dota.CDOTAUserMsg_ProjectionEvent.Parser, new[]{ "EventId", "Team" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_XPAlert), global::Proto.Dota.CDOTAUserMsg_XPAlert.Parser, new[]{ "PlayerId", "TargetEntindex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SelectPenaltyGold), global::Proto.Dota.CDOTAUserMsg_SelectPenaltyGold.Parser, new[]{ "PlayerId", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_RollDiceResult), global::Proto.Dota.CDOTAUserMsg_RollDiceResult.Parser, new[]{ "PlayerId", "ChannelType", "RollMin", "RollMax", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_FlipCoinResult), global::Proto.Dota.CDOTAUserMsg_FlipCoinResult.Parser, new[]{ "PlayerId", "ChannelType", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMessage_TeamCaptainChanged), global::Proto.Dota.CDOTAUserMessage_TeamCaptainChanged.Parser, new[]{ "Team", "CaptainPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_HeroRelicProgress), global::Proto.Dota.CDOTAUserMsg_HeroRelicProgress.Parser, new[]{ "HeroRelicType", "Value", "Ehandle", "EventId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_DamageReport), global::Proto.Dota.CDOTAUserMsg_DamageReport.Parser, new[]{ "PlayerId", "TargetHeroId", "SourceHeroId", "DamageAmount", "Broadcast" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_SalutePlayer), global::Proto.Dota.CDOTAUserMsg_SalutePlayer.Parser, new[]{ "SourcePlayerId", "TargetPlayerId", "TipAmount", "EventId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAUserMsg_TipAlert), global::Proto.Dota.CDOTAUserMsg_TipAlert.Parser, new[]{ "PlayerId", "TipText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgDOTACombatLogEntry), global::Proto.Dota.CMsgDOTACombatLogEntry.Parser, new[]{ "Type", "TargetName", "TargetSourceName", "AttackerName", "DamageSourceName", "InflictorName", "IsAttackerIllusion", "IsAttackerHero", "IsTargetIllusion", "IsTargetHero", "IsVisibleRadiant", "IsVisibleDire", "Value", "Health", "Timestamp", "StunDuration", "SlowDuration", "IsAbilityToggleOn", "IsAbilityToggleOff", "AbilityLevel", "LocationX", "LocationY", "GoldReason", "TimestampRaw", "ModifierDuration", "XpReason", "LastHits", "AttackerTeam", "TargetTeam", "ObsWardsPlaced", "AssistPlayer0", "AssistPlayer1", "AssistPlayer2", "AssistPlayer3", "StackCount", "HiddenModifier", "IsTargetBuilding", "NeutralCampType", "RuneType", "AssistPlayers", "IsHealSave", "IsUltimateAbility", "AttackerHeroLevel", "TargetHeroLevel", "Xpm", "Gpm", "EventLocation", "TargetIsSelf", "DamageType", "InvisibilityModifier", "DamageCategory", "Networth", "BuildingType", "ModifierElapsedDuration", "SilenceModifier", "HealFromLifesteal", "ModifierPurged", "SpellEvaded", "MotionControllerModifier", "LongRangeKill", "ModifierPurgeAbility", "ModifierPurgeNpc", "RootModifier", "TotalUnitDeathCount", "AuraModifier", "ArmorDebuffModifier", "NoPhysicalDamageModifier", "ModifierAbility", "ModifierHidden", "InflictorIsStolenAbility", "KillEaterEvent", "UnitStatusLabel" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DOTA_COMBATLOG_TYPES {
    [pbr::OriginalName("DOTA_COMBATLOG_DAMAGE")] DotaCombatlogDamage = 0,
    [pbr::OriginalName("DOTA_COMBATLOG_INVALID")] DotaCombatlogInvalid = -1,
    [pbr::OriginalName("DOTA_COMBATLOG_HEAL")] DotaCombatlogHeal = 1,
    [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_ADD")] DotaCombatlogModifierAdd = 2,
    [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_REMOVE")] DotaCombatlogModifierRemove = 3,
    [pbr::OriginalName("DOTA_COMBATLOG_DEATH")] DotaCombatlogDeath = 4,
    [pbr::OriginalName("DOTA_COMBATLOG_ABILITY")] DotaCombatlogAbility = 5,
    [pbr::OriginalName("DOTA_COMBATLOG_ITEM")] DotaCombatlogItem = 6,
    [pbr::OriginalName("DOTA_COMBATLOG_LOCATION")] DotaCombatlogLocation = 7,
    [pbr::OriginalName("DOTA_COMBATLOG_GOLD")] DotaCombatlogGold = 8,
    [pbr::OriginalName("DOTA_COMBATLOG_GAME_STATE")] DotaCombatlogGameState = 9,
    [pbr::OriginalName("DOTA_COMBATLOG_XP")] DotaCombatlogXp = 10,
    [pbr::OriginalName("DOTA_COMBATLOG_PURCHASE")] DotaCombatlogPurchase = 11,
    [pbr::OriginalName("DOTA_COMBATLOG_BUYBACK")] DotaCombatlogBuyback = 12,
    [pbr::OriginalName("DOTA_COMBATLOG_ABILITY_TRIGGER")] DotaCombatlogAbilityTrigger = 13,
    [pbr::OriginalName("DOTA_COMBATLOG_PLAYERSTATS")] DotaCombatlogPlayerstats = 14,
    [pbr::OriginalName("DOTA_COMBATLOG_MULTIKILL")] DotaCombatlogMultikill = 15,
    [pbr::OriginalName("DOTA_COMBATLOG_KILLSTREAK")] DotaCombatlogKillstreak = 16,
    [pbr::OriginalName("DOTA_COMBATLOG_TEAM_BUILDING_KILL")] DotaCombatlogTeamBuildingKill = 17,
    [pbr::OriginalName("DOTA_COMBATLOG_FIRST_BLOOD")] DotaCombatlogFirstBlood = 18,
    [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_STACK_EVENT")] DotaCombatlogModifierStackEvent = 19,
    [pbr::OriginalName("DOTA_COMBATLOG_NEUTRAL_CAMP_STACK")] DotaCombatlogNeutralCampStack = 20,
    [pbr::OriginalName("DOTA_COMBATLOG_PICKUP_RUNE")] DotaCombatlogPickupRune = 21,
    [pbr::OriginalName("DOTA_COMBATLOG_REVEALED_INVISIBLE")] DotaCombatlogRevealedInvisible = 22,
    [pbr::OriginalName("DOTA_COMBATLOG_HERO_SAVED")] DotaCombatlogHeroSaved = 23,
    [pbr::OriginalName("DOTA_COMBATLOG_MANA_RESTORED")] DotaCombatlogManaRestored = 24,
    [pbr::OriginalName("DOTA_COMBATLOG_HERO_LEVELUP")] DotaCombatlogHeroLevelup = 25,
    [pbr::OriginalName("DOTA_COMBATLOG_BOTTLE_HEAL_ALLY")] DotaCombatlogBottleHealAlly = 26,
    [pbr::OriginalName("DOTA_COMBATLOG_ENDGAME_STATS")] DotaCombatlogEndgameStats = 27,
    [pbr::OriginalName("DOTA_COMBATLOG_INTERRUPT_CHANNEL")] DotaCombatlogInterruptChannel = 28,
    [pbr::OriginalName("DOTA_COMBATLOG_ALLIED_GOLD")] DotaCombatlogAlliedGold = 29,
    [pbr::OriginalName("DOTA_COMBATLOG_AEGIS_TAKEN")] DotaCombatlogAegisTaken = 30,
    [pbr::OriginalName("DOTA_COMBATLOG_MANA_DAMAGE")] DotaCombatlogManaDamage = 31,
    [pbr::OriginalName("DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED")] DotaCombatlogPhysicalDamagePrevented = 32,
    [pbr::OriginalName("DOTA_COMBATLOG_UNIT_SUMMONED")] DotaCombatlogUnitSummoned = 33,
    [pbr::OriginalName("DOTA_COMBATLOG_ATTACK_EVADE")] DotaCombatlogAttackEvade = 34,
    [pbr::OriginalName("DOTA_COMBATLOG_TREE_CUT")] DotaCombatlogTreeCut = 35,
    [pbr::OriginalName("DOTA_COMBATLOG_SUCCESSFUL_SCAN")] DotaCombatlogSuccessfulScan = 36,
    [pbr::OriginalName("DOTA_COMBATLOG_END_KILLSTREAK")] DotaCombatlogEndKillstreak = 37,
    [pbr::OriginalName("DOTA_COMBATLOG_BLOODSTONE_CHARGE")] DotaCombatlogBloodstoneCharge = 38,
    [pbr::OriginalName("DOTA_COMBATLOG_CRITICAL_DAMAGE")] DotaCombatlogCriticalDamage = 39,
    [pbr::OriginalName("DOTA_COMBATLOG_SPELL_ABSORB")] DotaCombatlogSpellAbsorb = 40,
    [pbr::OriginalName("DOTA_COMBATLOG_UNIT_TELEPORTED")] DotaCombatlogUnitTeleported = 41,
    [pbr::OriginalName("DOTA_COMBATLOG_KILL_EATER_EVENT")] DotaCombatlogKillEaterEvent = 42,
  }

  public enum DOTA_CHAT_MESSAGE {
    [pbr::OriginalName("CHAT_MESSAGE_HERO_KILL")] ChatMessageHeroKill = 0,
    [pbr::OriginalName("CHAT_MESSAGE_INVALID")] ChatMessageInvalid = -1,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_DENY")] ChatMessageHeroDeny = 1,
    [pbr::OriginalName("CHAT_MESSAGE_BARRACKS_KILL")] ChatMessageBarracksKill = 2,
    [pbr::OriginalName("CHAT_MESSAGE_TOWER_KILL")] ChatMessageTowerKill = 3,
    [pbr::OriginalName("CHAT_MESSAGE_TOWER_DENY")] ChatMessageTowerDeny = 4,
    [pbr::OriginalName("CHAT_MESSAGE_FIRSTBLOOD")] ChatMessageFirstblood = 5,
    [pbr::OriginalName("CHAT_MESSAGE_STREAK_KILL")] ChatMessageStreakKill = 6,
    [pbr::OriginalName("CHAT_MESSAGE_BUYBACK")] ChatMessageBuyback = 7,
    [pbr::OriginalName("CHAT_MESSAGE_AEGIS")] ChatMessageAegis = 8,
    [pbr::OriginalName("CHAT_MESSAGE_ROSHAN_KILL")] ChatMessageRoshanKill = 9,
    [pbr::OriginalName("CHAT_MESSAGE_COURIER_LOST")] ChatMessageCourierLost = 10,
    [pbr::OriginalName("CHAT_MESSAGE_COURIER_RESPAWNED")] ChatMessageCourierRespawned = 11,
    [pbr::OriginalName("CHAT_MESSAGE_GLYPH_USED")] ChatMessageGlyphUsed = 12,
    [pbr::OriginalName("CHAT_MESSAGE_ITEM_PURCHASE")] ChatMessageItemPurchase = 13,
    [pbr::OriginalName("CHAT_MESSAGE_CONNECT")] ChatMessageConnect = 14,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT")] ChatMessageDisconnect = 15,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT")] ChatMessageDisconnectWaitForReconnect = 16,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_TIME_REMAINING")] ChatMessageDisconnectTimeRemaining = 17,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL")] ChatMessageDisconnectTimeRemainingPlural = 18,
    [pbr::OriginalName("CHAT_MESSAGE_RECONNECT")] ChatMessageReconnect = 19,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT")] ChatMessagePlayerLeft = 20,
    [pbr::OriginalName("CHAT_MESSAGE_SAFE_TO_LEAVE")] ChatMessageSafeToLeave = 21,
    [pbr::OriginalName("CHAT_MESSAGE_RUNE_PICKUP")] ChatMessageRunePickup = 22,
    [pbr::OriginalName("CHAT_MESSAGE_RUNE_BOTTLE")] ChatMessageRuneBottle = 23,
    [pbr::OriginalName("CHAT_MESSAGE_INTHEBAG")] ChatMessageInthebag = 24,
    [pbr::OriginalName("CHAT_MESSAGE_SECRETSHOP")] ChatMessageSecretshop = 25,
    [pbr::OriginalName("CHAT_MESSAGE_ITEM_AUTOPURCHASED")] ChatMessageItemAutopurchased = 26,
    [pbr::OriginalName("CHAT_MESSAGE_ITEMS_COMBINED")] ChatMessageItemsCombined = 27,
    [pbr::OriginalName("CHAT_MESSAGE_SUPER_CREEPS")] ChatMessageSuperCreeps = 28,
    [pbr::OriginalName("CHAT_MESSAGE_CANT_USE_ACTION_ITEM")] ChatMessageCantUseActionItem = 29,
    [pbr::OriginalName("CHAT_MESSAGE_CHARGES_EXHAUSTED")] ChatMessageChargesExhausted = 30,
    [pbr::OriginalName("CHAT_MESSAGE_CANTPAUSE")] ChatMessageCantpause = 31,
    [pbr::OriginalName("CHAT_MESSAGE_NOPAUSESLEFT")] ChatMessageNopausesleft = 32,
    [pbr::OriginalName("CHAT_MESSAGE_CANTPAUSEYET")] ChatMessageCantpauseyet = 33,
    [pbr::OriginalName("CHAT_MESSAGE_PAUSED")] ChatMessagePaused = 34,
    [pbr::OriginalName("CHAT_MESSAGE_UNPAUSE_COUNTDOWN")] ChatMessageUnpauseCountdown = 35,
    [pbr::OriginalName("CHAT_MESSAGE_UNPAUSED")] ChatMessageUnpaused = 36,
    [pbr::OriginalName("CHAT_MESSAGE_AUTO_UNPAUSED")] ChatMessageAutoUnpaused = 37,
    [pbr::OriginalName("CHAT_MESSAGE_YOUPAUSED")] ChatMessageYoupaused = 38,
    [pbr::OriginalName("CHAT_MESSAGE_CANTUNPAUSETEAM")] ChatMessageCantunpauseteam = 39,
    [pbr::OriginalName("CHAT_MESSAGE_VOICE_TEXT_BANNED")] ChatMessageVoiceTextBanned = 41,
    [pbr::OriginalName("CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME")] ChatMessageSpectatorsWatchingThisGame = 42,
    [pbr::OriginalName("CHAT_MESSAGE_REPORT_REMINDER")] ChatMessageReportReminder = 43,
    [pbr::OriginalName("CHAT_MESSAGE_ECON_ITEM")] ChatMessageEconItem = 44,
    [pbr::OriginalName("CHAT_MESSAGE_TAUNT")] ChatMessageTaunt = 45,
    [pbr::OriginalName("CHAT_MESSAGE_RANDOM")] ChatMessageRandom = 46,
    [pbr::OriginalName("CHAT_MESSAGE_RD_TURN")] ChatMessageRdTurn = 47,
    [pbr::OriginalName("CHAT_MESSAGE_DROP_RATE_BONUS")] ChatMessageDropRateBonus = 49,
    [pbr::OriginalName("CHAT_MESSAGE_NO_BATTLE_POINTS")] ChatMessageNoBattlePoints = 50,
    [pbr::OriginalName("CHAT_MESSAGE_DENIED_AEGIS")] ChatMessageDeniedAegis = 51,
    [pbr::OriginalName("CHAT_MESSAGE_INFORMATIONAL")] ChatMessageInformational = 52,
    [pbr::OriginalName("CHAT_MESSAGE_AEGIS_STOLEN")] ChatMessageAegisStolen = 53,
    [pbr::OriginalName("CHAT_MESSAGE_ROSHAN_CANDY")] ChatMessageRoshanCandy = 54,
    [pbr::OriginalName("CHAT_MESSAGE_ITEM_GIFTED")] ChatMessageItemGifted = 55,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL")] ChatMessageHeroKillWithGreevil = 56,
    [pbr::OriginalName("CHAT_MESSAGE_HOLDOUT_TOWER_DESTROYED")] ChatMessageHoldoutTowerDestroyed = 57,
    [pbr::OriginalName("CHAT_MESSAGE_HOLDOUT_WALL_DESTROYED")] ChatMessageHoldoutWallDestroyed = 58,
    [pbr::OriginalName("CHAT_MESSAGE_HOLDOUT_WALL_FINISHED")] ChatMessageHoldoutWallFinished = 59,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO")] ChatMessagePlayerLeftLimitedHero = 62,
    [pbr::OriginalName("CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXPLANATION")] ChatMessageAbandonLimitedHeroExplanation = 63,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_LIMITED_HERO")] ChatMessageDisconnectLimitedHero = 64,
    [pbr::OriginalName("CHAT_MESSAGE_LOW_PRIORITY_COMPLETED_EXPLANATION")] ChatMessageLowPriorityCompletedExplanation = 65,
    [pbr::OriginalName("CHAT_MESSAGE_RECRUITMENT_DROP_RATE_BONUS")] ChatMessageRecruitmentDropRateBonus = 66,
    [pbr::OriginalName("CHAT_MESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE")] ChatMessageFrostivusShiningBoosterActive = 67,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT_AFK")] ChatMessagePlayerLeftAfk = 73,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TOO_LONG")] ChatMessagePlayerLeftDisconnectedTooLong = 74,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_ABANDONED")] ChatMessagePlayerAbandoned = 75,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_ABANDONED_AFK")] ChatMessagePlayerAbandonedAfk = 76,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_ABANDONED_DISCONNECTED_TOO_LONG")] ChatMessagePlayerAbandonedDisconnectedTooLong = 77,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED")] ChatMessageWillNotBeScored = 78,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED_RANKED")] ChatMessageWillNotBeScoredRanked = 79,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK")] ChatMessageWillNotBeScoredNetwork = 80,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK_RANKED")] ChatMessageWillNotBeScoredNetworkRanked = 81,
    [pbr::OriginalName("CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON")] ChatMessageCanQuitWithoutAbandon = 82,
    [pbr::OriginalName("CHAT_MESSAGE_RANKED_GAME_STILL_SCORED_LEAVERS_GET_LOSS")] ChatMessageRankedGameStillScoredLeaversGetLoss = 83,
    [pbr::OriginalName("CHAT_MESSAGE_ABANDON_RANKED_BEFORE_FIRST_BLOOD_PARTY")] ChatMessageAbandonRankedBeforeFirstBloodParty = 84,
    [pbr::OriginalName("CHAT_MESSAGE_COMPENDIUM_LEVEL")] ChatMessageCompendiumLevel = 85,
    [pbr::OriginalName("CHAT_MESSAGE_VICTORY_PREDICTION_STREAK")] ChatMessageVictoryPredictionStreak = 86,
    [pbr::OriginalName("CHAT_MESSAGE_ASSASSIN_ANNOUNCE")] ChatMessageAssassinAnnounce = 87,
    [pbr::OriginalName("CHAT_MESSAGE_ASSASSIN_SUCCESS")] ChatMessageAssassinSuccess = 88,
    [pbr::OriginalName("CHAT_MESSAGE_ASSASSIN_DENIED")] ChatMessageAssassinDenied = 89,
    [pbr::OriginalName("CHAT_MESSAGE_VICTORY_PREDICTION_SINGLE_USER_CONFIRM")] ChatMessageVictoryPredictionSingleUserConfirm = 90,
    [pbr::OriginalName("CHAT_MESSAGE_EFFIGY_KILL")] ChatMessageEffigyKill = 91,
    [pbr::OriginalName("CHAT_MESSAGE_VOICE_TEXT_BANNED_OVERFLOW")] ChatMessageVoiceTextBannedOverflow = 92,
    [pbr::OriginalName("CHAT_MESSAGE_YEAR_BEAST_KILLED")] ChatMessageYearBeastKilled = 93,
    [pbr::OriginalName("CHAT_MESSAGE_PAUSE_COUNTDOWN")] ChatMessagePauseCountdown = 94,
    [pbr::OriginalName("CHAT_MESSAGE_COINS_WAGERED")] ChatMessageCoinsWagered = 95,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_NOMINATED_BAN")] ChatMessageHeroNominatedBan = 96,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_BANNED")] ChatMessageHeroBanned = 97,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_BAN_COUNT")] ChatMessageHeroBanCount = 98,
    [pbr::OriginalName("CHAT_MESSAGE_RIVER_PAINTED")] ChatMessageRiverPainted = 99,
    [pbr::OriginalName("CHAT_MESSAGE_SCAN_USED")] ChatMessageScanUsed = 100,
    [pbr::OriginalName("CHAT_MESSAGE_SHRINE_KILLED")] ChatMessageShrineKilled = 101,
    [pbr::OriginalName("CHAT_MESSAGE_WAGER_TOKEN_SPENT")] ChatMessageWagerTokenSpent = 102,
    [pbr::OriginalName("CHAT_MESSAGE_RANK_WAGER")] ChatMessageRankWager = 103,
    [pbr::OriginalName("CHAT_MESSAGE_NEW_PLAYER_REMINDER")] ChatMessageNewPlayerReminder = 104,
    [pbr::OriginalName("CHAT_MESSAGE_OBSERVER_WARD_KILLED")] ChatMessageObserverWardKilled = 105,
    [pbr::OriginalName("CHAT_MESSAGE_SENTRY_WARD_KILLED")] ChatMessageSentryWardKilled = 106,
  }

  public enum DOTA_NO_BATTLE_POINTS_REASONS {
    [pbr::OriginalName("UKNOWN")] Uknown = 0,
    [pbr::OriginalName("NO_BATTLE_POINTS_WRONG_LOBBY_TYPE")] NoBattlePointsWrongLobbyType = 1,
    [pbr::OriginalName("NO_BATTLE_POINTS_PRACTICE_BOTS")] NoBattlePointsPracticeBots = 2,
    [pbr::OriginalName("NO_BATTLE_POINTS_CHEATS_ENABLED")] NoBattlePointsCheatsEnabled = 3,
    [pbr::OriginalName("NO_BATTLE_POINTS_LOW_PRIORITY")] NoBattlePointsLowPriority = 4,
  }

  public enum DOTA_REPLAY_STATE_EVENT {
    [pbr::OriginalName("DOTA_REPLAY_STATE_UKNOWN")] DotaReplayStateUknown = 0,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_GAME_START")] GameStart = 1,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_STARTING_HORN")] StartingHorn = 2,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_FIRST_BLOOD")] FirstBlood = 3,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_SHOWCASE")] Showcase = 4,
  }

  public enum DOTA_CHAT_INFORMATIONAL {
    [pbr::OriginalName("INFO_UNKNOWN")] InfoUnknown = 0,
    [pbr::OriginalName("INFO_COOP_BATTLE_POINTS_RULES")] InfoCoopBattlePointsRules = 1,
    [pbr::OriginalName("INFO_FROSTIVUS_ABANDON_REMINDER")] InfoFrostivusAbandonReminder = 2,
    [pbr::OriginalName("INFO_RANKED_REMINDER")] InfoRankedReminder = 3,
    [pbr::OriginalName("INFO_COOP_LOW_PRIORITY_PASSIVE_REMINDER")] InfoCoopLowPriorityPassiveReminder = 4,
    [pbr::OriginalName("INFO_CUSTOM_GAME_PENALTY_REMINDER")] InfoCustomGamePenaltyReminder = 5,
  }

  public enum DOTA_ABILITY_PING_TYPE {
    [pbr::OriginalName("ABILITY_UKNOWN")] AbilityUknown = 0,
    [pbr::OriginalName("ABILITY_PING_READY")] AbilityPingReady = 1,
    [pbr::OriginalName("ABILITY_PING_MANA")] AbilityPingMana = 2,
    [pbr::OriginalName("ABILITY_PING_COOLDOWN")] AbilityPingCooldown = 3,
    [pbr::OriginalName("ABILITY_PING_ENEMY")] AbilityPingEnemy = 4,
    [pbr::OriginalName("ABILITY_PING_UNLEARNED")] AbilityPingUnlearned = 5,
    [pbr::OriginalName("ABILITY_PING_INBACKPACK")] AbilityPingInbackpack = 6,
    [pbr::OriginalName("ABILITY_PING_INSTASH")] AbilityPingInstash = 7,
    [pbr::OriginalName("ABILITY_PING_ONCOURIER")] AbilityPingOncourier = 8,
    [pbr::OriginalName("ABILITY_PING_ALLY")] AbilityPingAlly = 9,
    [pbr::OriginalName("ABILITY_PING_LEARN_READY")] AbilityPingLearnReady = 10,
    [pbr::OriginalName("ABILITY_PING_WILL_LEARN")] AbilityPingWillLearn = 11,
    [pbr::OriginalName("ABILITY_PING_FUTURE_LEARN")] AbilityPingFutureLearn = 12,
  }

  public enum EDotaEntityMessages {
    [pbr::OriginalName("DOTA_UNIT_SPEECH")] DotaUnitSpeech = 0,
    [pbr::OriginalName("DOTA_UNIT_SPEECH_MUTE")] DotaUnitSpeechMute = 1,
    [pbr::OriginalName("DOTA_UNIT_ADD_GESTURE")] DotaUnitAddGesture = 2,
    [pbr::OriginalName("DOTA_UNIT_REMOVE_GESTURE")] DotaUnitRemoveGesture = 3,
    [pbr::OriginalName("DOTA_UNIT_REMOVE_ALL_GESTURES")] DotaUnitRemoveAllGestures = 4,
    [pbr::OriginalName("DOTA_UNIT_FADE_GESTURE")] DotaUnitFadeGesture = 6,
    [pbr::OriginalName("DOTA_UNIT_SPEECH_CLIENTSIDE_RULES")] DotaUnitSpeechClientsideRules = 7,
  }

  public enum DOTA_PARTICLE_MESSAGE {
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_CREATE")] DotaParticleManagerEventCreate = 0,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_UPDATE")] DotaParticleManagerEventUpdate = 1,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD")] DotaParticleManagerEventUpdateForward = 2,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION")] DotaParticleManagerEventUpdateOrientation = 3,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK")] DotaParticleManagerEventUpdateFallback = 4,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT")] DotaParticleManagerEventUpdateEnt = 5,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET")] DotaParticleManagerEventUpdateOffset = 6,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_DESTROY")] DotaParticleManagerEventDestroy = 7,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING")] DotaParticleManagerEventDestroyInvolving = 8,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_RELEASE")] DotaParticleManagerEventRelease = 9,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_LATENCY")] DotaParticleManagerEventLatency = 10,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_SHOULD_DRAW")] DotaParticleManagerEventShouldDraw = 11,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_FROZEN")] DotaParticleManagerEventFrozen = 12,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT")] DotaParticleManagerEventChangeControlPointAttachment = 13,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENTITY_POSITION")] DotaParticleManagerEventUpdateEntityPosition = 14,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_SET_FOW_PROPERTIES")] DotaParticleManagerEventSetFowProperties = 15,
    [pbr::OriginalName("DOTA_PARTICLE_MANAGER_EVENT_SET_TEXT")] DotaParticleManagerEventSetText = 16,
    [pbr::OriginalName("GAME_PARTICLE_MANAGER_EVENT_SET_SHOULD_CHECK_FOW")] GameParticleManagerEventSetShouldCheckFow = 17,
  }

  public enum DOTA_OVERHEAD_ALERT {
    [pbr::OriginalName("OVERHEAD_ALERT_GOLD")] OverheadAlertGold = 0,
    [pbr::OriginalName("OVERHEAD_ALERT_DENY")] OverheadAlertDeny = 1,
    [pbr::OriginalName("OVERHEAD_ALERT_CRITICAL")] OverheadAlertCritical = 2,
    [pbr::OriginalName("OVERHEAD_ALERT_XP")] OverheadAlertXp = 3,
    [pbr::OriginalName("OVERHEAD_ALERT_BONUS_SPELL_DAMAGE")] OverheadAlertBonusSpellDamage = 4,
    [pbr::OriginalName("OVERHEAD_ALERT_MISS")] OverheadAlertMiss = 5,
    [pbr::OriginalName("OVERHEAD_ALERT_DAMAGE")] OverheadAlertDamage = 6,
    [pbr::OriginalName("OVERHEAD_ALERT_EVADE")] OverheadAlertEvade = 7,
    [pbr::OriginalName("OVERHEAD_ALERT_BLOCK")] OverheadAlertBlock = 8,
    [pbr::OriginalName("OVERHEAD_ALERT_BONUS_POISON_DAMAGE")] OverheadAlertBonusPoisonDamage = 9,
    [pbr::OriginalName("OVERHEAD_ALERT_HEAL")] OverheadAlertHeal = 10,
    [pbr::OriginalName("OVERHEAD_ALERT_MANA_ADD")] OverheadAlertManaAdd = 11,
    [pbr::OriginalName("OVERHEAD_ALERT_MANA_LOSS")] OverheadAlertManaLoss = 12,
    [pbr::OriginalName("OVERHEAD_ALERT_LAST_HIT_EARLY")] OverheadAlertLastHitEarly = 13,
    [pbr::OriginalName("OVERHEAD_ALERT_LAST_HIT_CLOSE")] OverheadAlertLastHitClose = 14,
    [pbr::OriginalName("OVERHEAD_ALERT_LAST_HIT_MISS")] OverheadAlertLastHitMiss = 15,
    [pbr::OriginalName("OVERHEAD_ALERT_MAGICAL_BLOCK")] OverheadAlertMagicalBlock = 16,
    [pbr::OriginalName("OVERHEAD_ALERT_INCOMING_DAMAGE")] OverheadAlertIncomingDamage = 17,
    [pbr::OriginalName("OVERHEAD_ALERT_OUTGOING_DAMAGE")] OverheadAlertOutgoingDamage = 18,
    [pbr::OriginalName("OVERHEAD_ALERT_DISABLE_RESIST")] OverheadAlertDisableResist = 19,
    [pbr::OriginalName("OVERHEAD_ALERT_DEATH")] OverheadAlertDeath = 20,
    [pbr::OriginalName("OVERHEAD_ALERT_BLOCKED")] OverheadAlertBlocked = 21,
  }

  public enum DOTA_ROSHAN_PHASE {
    [pbr::OriginalName("k_SRSP_ROSHAN_ALIVE")] KSrspRoshanAlive = 0,
    [pbr::OriginalName("k_SRSP_ROSHAN_BASE_TIMER")] KSrspRoshanBaseTimer = 1,
    [pbr::OriginalName("k_SRSP_ROSHAN_VISIBLE_TIMER")] KSrspRoshanVisibleTimer = 2,
  }

  public enum DOTA_POSITION_CATEGORY {
    [pbr::OriginalName("DOTA_POSITION_NONE")] DotaPositionNone = 0,
    [pbr::OriginalName("DOTA_POSITION_BOTTOM_LANE")] DotaPositionBottomLane = 1,
    [pbr::OriginalName("DOTA_POSITION_MID_LANE")] DotaPositionMidLane = 2,
    [pbr::OriginalName("DOTA_POSITION_TOP_LANE")] DotaPositionTopLane = 3,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_JUNGLE")] DotaPositionRadiantJungle = 4,
    [pbr::OriginalName("DOTA_POSITION_DIRE_JUNGLE")] DotaPositionDireJungle = 5,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_ANCIENTS")] DotaPositionRadiantAncients = 6,
    [pbr::OriginalName("DOTA_POSITION_DIRE_ANCIENTS")] DotaPositionDireAncients = 7,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_SECRET_SHOP")] DotaPositionRadiantSecretShop = 8,
    [pbr::OriginalName("DOTA_POSITION_DIRE_SECRET_SHOP")] DotaPositionDireSecretShop = 9,
    [pbr::OriginalName("DOTA_POSITION_RIVER")] DotaPositionRiver = 10,
    [pbr::OriginalName("DOTA_POSITION_ROSHAN_PIT")] DotaPositionRoshanPit = 11,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_BASE")] DotaPositionRadiantBase = 12,
    [pbr::OriginalName("DOTA_POSITION_DIRE_BASE")] DotaPositionDireBase = 13,
    [pbr::OriginalName("DOTA_POSITION_FOUNTAIN")] DotaPositionFountain = 14,
    [pbr::OriginalName("DOTA_POSITION_OTHER")] DotaPositionOther = 15,
  }

  public enum DOTA_ABILITY_TARGET_TYPE {
    [pbr::OriginalName("DOTA_ABILITY_TARGET_NONE")] DotaAbilityTargetNone = 0,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_SELF")] DotaAbilityTargetSelf = 1,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ALLY_HERO")] DotaAbilityTargetAllyHero = 2,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ALLY_CREEP")] DotaAbilityTargetAllyCreep = 3,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ENEMY_HERO")] DotaAbilityTargetEnemyHero = 4,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ENEMY_CREEP")] DotaAbilityTargetEnemyCreep = 5,
  }

  public enum EHeroStatType {
    [pbr::OriginalName("k_EHeroStatType_None")] KEheroStatTypeNone = 0,
    [pbr::OriginalName("k_EHeroStatType_AxeTotalDamage")] KEheroStatTypeAxeTotalDamage = 2000,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerDamage")] KEheroStatTypeBattleHungerDamage = 2001,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixDamage")] KEheroStatTypeCounterHelixDamage = 2002,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeDamage")] KEheroStatTypeCullingBladeDamage = 2003,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallCastCount")] KEheroStatTypeBerserkersCallCastCount = 2004,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallHeroesHitAverage")] KEheroStatTypeBerserkersCallHeroesHitAverage = 2005,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallOtherUnitsHit")] KEheroStatTypeBerserkersCallOtherUnitsHit = 2006,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallHeroAttacksTaken")] KEheroStatTypeBerserkersCallHeroAttacksTaken = 2007,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallOtherAttacksTaken")] KEheroStatTypeBerserkersCallOtherAttacksTaken = 2008,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerCastCount")] KEheroStatTypeBattleHungerCastCount = 2009,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerPotentialDuration")] KEheroStatTypeBattleHungerPotentialDuration = 2010,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerAverageDuration")] KEheroStatTypeBattleHungerAverageDuration = 2011,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixProcCount")] KEheroStatTypeCounterHelixProcCount = 2012,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixHeroProcCount")] KEheroStatTypeCounterHelixHeroProcCount = 2013,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixHeroesHitAverage")] KEheroStatTypeCounterHelixHeroesHitAverage = 2014,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixOtherUnitsHitCount")] KEheroStatTypeCounterHelixOtherUnitsHitCount = 2015,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeCastCount")] KEheroStatTypeCullingBladeCastCount = 2016,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeKillCount")] KEheroStatTypeCullingBladeKillCount = 2017,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeAverageHealthCulled")] KEheroStatTypeCullingBladeAverageHealthCulled = 2018,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeAverageDamageAvailable")] KEheroStatTypeCullingBladeAverageDamageAvailable = 2019,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeHeroBuffAverage")] KEheroStatTypeCullingBladeHeroBuffAverage = 2020,
  }

  public enum EPlayerVoiceListenState {
    [pbr::OriginalName("kPVLS_None")] KPvlsNone = 0,
    [pbr::OriginalName("kPVLS_DeniedChatBanned")] KPvlsDeniedChatBanned = 1,
    [pbr::OriginalName("kPVLS_DeniedPartner")] KPvlsDeniedPartner = 2,
    [pbr::OriginalName("kPVLS_DeniedHLTVTalkerNotSpectator")] KPvlsDeniedHltvtalkerNotSpectator = 3,
    [pbr::OriginalName("kPVLS_DeniedHLTVNoTalkerPlayerID")] KPvlsDeniedHltvnoTalkerPlayerId = 4,
    [pbr::OriginalName("kPVLS_DeniedHLTVTalkerNotBroadcaster")] KPvlsDeniedHltvtalkerNotBroadcaster = 5,
    [pbr::OriginalName("kPVLS_DeniedTeamSpectator")] KPvlsDeniedTeamSpectator = 6,
    [pbr::OriginalName("kPVLS_DeniedStudent")] KPvlsDeniedStudent = 8,
    [pbr::OriginalName("kPVLS_Denied")] KPvlsDenied = 64,
    [pbr::OriginalName("kPVLS_AllowHLTVTalkerIsBroadcaster")] KPvlsAllowHltvtalkerIsBroadcaster = 65,
    [pbr::OriginalName("kPVLS_AllowCoBroadcaster")] KPvlsAllowCoBroadcaster = 66,
    [pbr::OriginalName("kPVLS_AllowAllChat")] KPvlsAllowAllChat = 67,
    [pbr::OriginalName("kPVLS_AllowStudentToCoach")] KPvlsAllowStudentToCoach = 68,
    [pbr::OriginalName("kPVLS_AllowFellowStudent")] KPvlsAllowFellowStudent = 69,
    [pbr::OriginalName("kPVLS_AllowTalkerIsCoach")] KPvlsAllowTalkerIsCoach = 70,
    [pbr::OriginalName("kPVLS_AllowCoachHearTeam")] KPvlsAllowCoachHearTeam = 71,
    [pbr::OriginalName("kPVLS_AllowSameTeam")] KPvlsAllowSameTeam = 72,
    [pbr::OriginalName("kPVLS_AllowShowcase")] KPvlsAllowShowcase = 73,
  }

  public enum EProjectionEvent {
    [pbr::OriginalName("ePE_FirstBlood")] EPeFirstBlood = 0,
    [pbr::OriginalName("ePE_Killstreak_godlike")] EPeKillstreakGodlike = 1,
  }

  #endregion

  #region Messages
  public sealed partial class CDOTAUserMsg_ChatEvent : pb::IMessage<CDOTAUserMsg_ChatEvent> {
    private static readonly pb::MessageParser<CDOTAUserMsg_ChatEvent> _parser = new pb::MessageParser<CDOTAUserMsg_ChatEvent>(() => new CDOTAUserMsg_ChatEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ChatEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatEvent(CDOTAUserMsg_ChatEvent other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      playerid1_ = other.playerid1_;
      playerid2_ = other.playerid2_;
      playerid3_ = other.playerid3_;
      playerid4_ = other.playerid4_;
      playerid5_ = other.playerid5_;
      playerid6_ = other.playerid6_;
      value2_ = other.value2_;
      value3_ = other.value3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatEvent Clone() {
      return new CDOTAUserMsg_ChatEvent(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.Dota.DOTA_CHAT_MESSAGE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.DOTA_CHAT_MESSAGE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "playerid_1" field.</summary>
    public const int Playerid1FieldNumber = 3;
    private int playerid1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid1 {
      get { return playerid1_; }
      set {
        playerid1_ = value;
      }
    }

    /// <summary>Field number for the "playerid_2" field.</summary>
    public const int Playerid2FieldNumber = 4;
    private int playerid2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid2 {
      get { return playerid2_; }
      set {
        playerid2_ = value;
      }
    }

    /// <summary>Field number for the "playerid_3" field.</summary>
    public const int Playerid3FieldNumber = 5;
    private int playerid3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid3 {
      get { return playerid3_; }
      set {
        playerid3_ = value;
      }
    }

    /// <summary>Field number for the "playerid_4" field.</summary>
    public const int Playerid4FieldNumber = 6;
    private int playerid4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid4 {
      get { return playerid4_; }
      set {
        playerid4_ = value;
      }
    }

    /// <summary>Field number for the "playerid_5" field.</summary>
    public const int Playerid5FieldNumber = 7;
    private int playerid5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid5 {
      get { return playerid5_; }
      set {
        playerid5_ = value;
      }
    }

    /// <summary>Field number for the "playerid_6" field.</summary>
    public const int Playerid6FieldNumber = 8;
    private int playerid6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid6 {
      get { return playerid6_; }
      set {
        playerid6_ = value;
      }
    }

    /// <summary>Field number for the "value2" field.</summary>
    public const int Value2FieldNumber = 9;
    private uint value2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value2 {
      get { return value2_; }
      set {
        value2_ = value;
      }
    }

    /// <summary>Field number for the "value3" field.</summary>
    public const int Value3FieldNumber = 10;
    private uint value3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value3 {
      get { return value3_; }
      set {
        value3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ChatEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ChatEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (Playerid1 != other.Playerid1) return false;
      if (Playerid2 != other.Playerid2) return false;
      if (Playerid3 != other.Playerid3) return false;
      if (Playerid4 != other.Playerid4) return false;
      if (Playerid5 != other.Playerid5) return false;
      if (Playerid6 != other.Playerid6) return false;
      if (Value2 != other.Value2) return false;
      if (Value3 != other.Value3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Playerid1 != 0) hash ^= Playerid1.GetHashCode();
      if (Playerid2 != 0) hash ^= Playerid2.GetHashCode();
      if (Playerid3 != 0) hash ^= Playerid3.GetHashCode();
      if (Playerid4 != 0) hash ^= Playerid4.GetHashCode();
      if (Playerid5 != 0) hash ^= Playerid5.GetHashCode();
      if (Playerid6 != 0) hash ^= Playerid6.GetHashCode();
      if (Value2 != 0) hash ^= Value2.GetHashCode();
      if (Value3 != 0) hash ^= Value3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (Playerid1 != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Playerid1);
      }
      if (Playerid2 != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Playerid2);
      }
      if (Playerid3 != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Playerid3);
      }
      if (Playerid4 != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Playerid4);
      }
      if (Playerid5 != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Playerid5);
      }
      if (Playerid6 != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Playerid6);
      }
      if (Value2 != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Value2);
      }
      if (Value3 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Value3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Playerid1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid1);
      }
      if (Playerid2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid2);
      }
      if (Playerid3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid3);
      }
      if (Playerid4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid4);
      }
      if (Playerid5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid5);
      }
      if (Playerid6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid6);
      }
      if (Value2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value2);
      }
      if (Value3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ChatEvent other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Playerid1 != 0) {
        Playerid1 = other.Playerid1;
      }
      if (other.Playerid2 != 0) {
        Playerid2 = other.Playerid2;
      }
      if (other.Playerid3 != 0) {
        Playerid3 = other.Playerid3;
      }
      if (other.Playerid4 != 0) {
        Playerid4 = other.Playerid4;
      }
      if (other.Playerid5 != 0) {
        Playerid5 = other.Playerid5;
      }
      if (other.Playerid6 != 0) {
        Playerid6 = other.Playerid6;
      }
      if (other.Value2 != 0) {
        Value2 = other.Value2;
      }
      if (other.Value3 != 0) {
        Value3 = other.Value3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Proto.Dota.DOTA_CHAT_MESSAGE) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Playerid1 = input.ReadSInt32();
            break;
          }
          case 32: {
            Playerid2 = input.ReadSInt32();
            break;
          }
          case 40: {
            Playerid3 = input.ReadSInt32();
            break;
          }
          case 48: {
            Playerid4 = input.ReadSInt32();
            break;
          }
          case 56: {
            Playerid5 = input.ReadSInt32();
            break;
          }
          case 64: {
            Playerid6 = input.ReadSInt32();
            break;
          }
          case 72: {
            Value2 = input.ReadUInt32();
            break;
          }
          case 80: {
            Value3 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_BotChat : pb::IMessage<CDOTAUserMsg_BotChat> {
    private static readonly pb::MessageParser<CDOTAUserMsg_BotChat> _parser = new pb::MessageParser<CDOTAUserMsg_BotChat>(() => new CDOTAUserMsg_BotChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_BotChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BotChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BotChat(CDOTAUserMsg_BotChat other) : this() {
      playerId_ = other.playerId_;
      format_ = other.format_;
      message_ = other.message_;
      target_ = other.target_;
      teamOnly_ = other.teamOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BotChat Clone() {
      return new CDOTAUserMsg_BotChat(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private string format_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private string target_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_only" field.</summary>
    public const int TeamOnlyFieldNumber = 5;
    private bool teamOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TeamOnly {
      get { return teamOnly_; }
      set {
        teamOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_BotChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_BotChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Format != other.Format) return false;
      if (Message != other.Message) return false;
      if (Target != other.Target) return false;
      if (TeamOnly != other.TeamOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (TeamOnly != false) hash ^= TeamOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (TeamOnly != false) {
        output.WriteRawTag(40);
        output.WriteBool(TeamOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (TeamOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_BotChat other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.TeamOnly != false) {
        TeamOnly = other.TeamOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
          case 40: {
            TeamOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_CombatLogBulkData : pb::IMessage<CDOTAUserMsg_CombatLogBulkData> {
    private static readonly pb::MessageParser<CDOTAUserMsg_CombatLogBulkData> _parser = new pb::MessageParser<CDOTAUserMsg_CombatLogBulkData>(() => new CDOTAUserMsg_CombatLogBulkData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CombatLogBulkData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatLogBulkData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatLogBulkData(CDOTAUserMsg_CombatLogBulkData other) : this() {
      combatEntries_ = other.combatEntries_.Clone();
      timestamp_ = other.timestamp_;
      duration_ = other.duration_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatLogBulkData Clone() {
      return new CDOTAUserMsg_CombatLogBulkData(this);
    }

    /// <summary>Field number for the "combat_entries" field.</summary>
    public const int CombatEntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgDOTACombatLogEntry> _repeated_combatEntries_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CMsgDOTACombatLogEntry.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgDOTACombatLogEntry> combatEntries_ = new pbc::RepeatedField<global::Proto.Dota.CMsgDOTACombatLogEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgDOTACombatLogEntry> CombatEntries {
      get { return combatEntries_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private float timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 4;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CombatLogBulkData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CombatLogBulkData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!combatEntries_.Equals(other.combatEntries_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= combatEntries_.GetHashCode();
      if (Timestamp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      combatEntries_.WriteTo(output, _repeated_combatEntries_codec);
      if (Timestamp != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Timestamp);
      }
      if (Duration != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += combatEntries_.CalculateSize(_repeated_combatEntries_codec);
      if (Timestamp != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CombatLogBulkData other) {
      if (other == null) {
        return;
      }
      combatEntries_.Add(other.combatEntries_);
      if (other.Timestamp != 0F) {
        Timestamp = other.Timestamp;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            combatEntries_.AddEntriesFrom(input, _repeated_combatEntries_codec);
            break;
          }
          case 21: {
            Timestamp = input.ReadFloat();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 32: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_MiniKillCamInfo : pb::IMessage<CDOTAUserMsg_MiniKillCamInfo> {
    private static readonly pb::MessageParser<CDOTAUserMsg_MiniKillCamInfo> _parser = new pb::MessageParser<CDOTAUserMsg_MiniKillCamInfo>(() => new CDOTAUserMsg_MiniKillCamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MiniKillCamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniKillCamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniKillCamInfo(CDOTAUserMsg_MiniKillCamInfo other) : this() {
      attackers_ = other.attackers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniKillCamInfo Clone() {
      return new CDOTAUserMsg_MiniKillCamInfo(this);
    }

    /// <summary>Field number for the "attackers" field.</summary>
    public const int AttackersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker> _repeated_attackers_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker> attackers_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker> Attackers {
      get { return attackers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MiniKillCamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MiniKillCamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attackers_.Equals(other.attackers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attackers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attackers_.WriteTo(output, _repeated_attackers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attackers_.CalculateSize(_repeated_attackers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MiniKillCamInfo other) {
      if (other == null) {
        return;
      }
      attackers_.Add(other.attackers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attackers_.AddEntriesFrom(input, _repeated_attackers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_MiniKillCamInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Attacker : pb::IMessage<Attacker> {
        private static readonly pb::MessageParser<Attacker> _parser = new pb::MessageParser<Attacker>(() => new Attacker());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attacker> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker(Attacker other) : this() {
          attacker_ = other.attacker_;
          totalDamage_ = other.totalDamage_;
          abilities_ = other.abilities_.Clone();
          attackerName_ = other.attackerName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker Clone() {
          return new Attacker(this);
        }

        /// <summary>Field number for the "attacker" field.</summary>
        public const int Attacker_FieldNumber = 1;
        private uint attacker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Attacker_ {
          get { return attacker_; }
          set {
            attacker_ = value;
          }
        }

        /// <summary>Field number for the "total_damage" field.</summary>
        public const int TotalDamageFieldNumber = 2;
        private int totalDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalDamage {
          get { return totalDamage_; }
          set {
            totalDamage_ = value;
          }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(26, global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability> abilities_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability> Abilities {
          get { return abilities_; }
        }

        /// <summary>Field number for the "attacker_name" field.</summary>
        public const int AttackerNameFieldNumber = 4;
        private string attackerName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AttackerName {
          get { return attackerName_; }
          set {
            attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attacker);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attacker other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Attacker_ != other.Attacker_) return false;
          if (TotalDamage != other.TotalDamage) return false;
          if(!abilities_.Equals(other.abilities_)) return false;
          if (AttackerName != other.AttackerName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Attacker_ != 0) hash ^= Attacker_.GetHashCode();
          if (TotalDamage != 0) hash ^= TotalDamage.GetHashCode();
          hash ^= abilities_.GetHashCode();
          if (AttackerName.Length != 0) hash ^= AttackerName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Attacker_ != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Attacker_);
          }
          if (TotalDamage != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TotalDamage);
          }
          abilities_.WriteTo(output, _repeated_abilities_codec);
          if (AttackerName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(AttackerName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Attacker_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attacker_);
          }
          if (TotalDamage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalDamage);
          }
          size += abilities_.CalculateSize(_repeated_abilities_codec);
          if (AttackerName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackerName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attacker other) {
          if (other == null) {
            return;
          }
          if (other.Attacker_ != 0) {
            Attacker_ = other.Attacker_;
          }
          if (other.TotalDamage != 0) {
            TotalDamage = other.TotalDamage;
          }
          abilities_.Add(other.abilities_);
          if (other.AttackerName.Length != 0) {
            AttackerName = other.AttackerName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Attacker_ = input.ReadUInt32();
                break;
              }
              case 16: {
                TotalDamage = input.ReadInt32();
                break;
              }
              case 26: {
                abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                break;
              }
              case 34: {
                AttackerName = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Attacker message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Ability : pb::IMessage<Ability> {
            private static readonly pb::MessageParser<Ability> _parser = new pb::MessageParser<Ability>(() => new Ability());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Ability> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Ability() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Ability(Ability other) : this() {
              abilityId_ = other.abilityId_;
              damage_ = other.damage_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Ability Clone() {
              return new Ability(this);
            }

            /// <summary>Field number for the "ability_id" field.</summary>
            public const int AbilityIdFieldNumber = 1;
            private uint abilityId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AbilityId {
              get { return abilityId_; }
              set {
                abilityId_ = value;
              }
            }

            /// <summary>Field number for the "damage" field.</summary>
            public const int DamageFieldNumber = 2;
            private int damage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Damage {
              get { return damage_; }
              set {
                damage_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Ability);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Ability other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (AbilityId != other.AbilityId) return false;
              if (Damage != other.Damage) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
              if (Damage != 0) hash ^= Damage.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (AbilityId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(AbilityId);
              }
              if (Damage != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Damage);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (AbilityId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
              }
              if (Damage != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Ability other) {
              if (other == null) {
                return;
              }
              if (other.AbilityId != 0) {
                AbilityId = other.AbilityId;
              }
              if (other.Damage != 0) {
                Damage = other.Damage;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    AbilityId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Damage = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_GlobalLightColor : pb::IMessage<CDOTAUserMsg_GlobalLightColor> {
    private static readonly pb::MessageParser<CDOTAUserMsg_GlobalLightColor> _parser = new pb::MessageParser<CDOTAUserMsg_GlobalLightColor>(() => new CDOTAUserMsg_GlobalLightColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GlobalLightColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightColor(CDOTAUserMsg_GlobalLightColor other) : this() {
      color_ = other.color_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightColor Clone() {
      return new CDOTAUserMsg_GlobalLightColor(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GlobalLightColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GlobalLightColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Color);
      }
      if (Duration != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GlobalLightColor other) {
      if (other == null) {
        return;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Color = input.ReadUInt32();
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_GlobalLightDirection : pb::IMessage<CDOTAUserMsg_GlobalLightDirection> {
    private static readonly pb::MessageParser<CDOTAUserMsg_GlobalLightDirection> _parser = new pb::MessageParser<CDOTAUserMsg_GlobalLightDirection>(() => new CDOTAUserMsg_GlobalLightDirection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GlobalLightDirection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightDirection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightDirection(CDOTAUserMsg_GlobalLightDirection other) : this() {
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightDirection Clone() {
      return new CDOTAUserMsg_GlobalLightDirection(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Proto.Dota.CMsgVector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GlobalLightDirection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GlobalLightDirection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (Duration != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GlobalLightDirection other) {
      if (other == null) {
        return;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Proto.Dota.CMsgVector();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (direction_ == null) {
              direction_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_LocationPing : pb::IMessage<CDOTAUserMsg_LocationPing> {
    private static readonly pb::MessageParser<CDOTAUserMsg_LocationPing> _parser = new pb::MessageParser<CDOTAUserMsg_LocationPing>(() => new CDOTAUserMsg_LocationPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_LocationPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_LocationPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_LocationPing(CDOTAUserMsg_LocationPing other) : this() {
      playerId_ = other.playerId_;
      locationPing_ = other.locationPing_ != null ? other.locationPing_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_LocationPing Clone() {
      return new CDOTAUserMsg_LocationPing(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "location_ping" field.</summary>
    public const int LocationPingFieldNumber = 2;
    private global::Proto.Dota.CDOTAMsg_LocationPing locationPing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAMsg_LocationPing LocationPing {
      get { return locationPing_; }
      set {
        locationPing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_LocationPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_LocationPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(LocationPing, other.LocationPing)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (locationPing_ != null) hash ^= LocationPing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (locationPing_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocationPing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (locationPing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocationPing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_LocationPing other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.locationPing_ != null) {
        if (locationPing_ == null) {
          locationPing_ = new global::Proto.Dota.CDOTAMsg_LocationPing();
        }
        LocationPing.MergeFrom(other.LocationPing);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (locationPing_ == null) {
              locationPing_ = new global::Proto.Dota.CDOTAMsg_LocationPing();
            }
            input.ReadMessage(locationPing_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_EnemyItemAlert : pb::IMessage<CDOTAUserMsg_EnemyItemAlert> {
    private static readonly pb::MessageParser<CDOTAUserMsg_EnemyItemAlert> _parser = new pb::MessageParser<CDOTAUserMsg_EnemyItemAlert>(() => new CDOTAUserMsg_EnemyItemAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_EnemyItemAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EnemyItemAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EnemyItemAlert(CDOTAUserMsg_EnemyItemAlert other) : this() {
      playerId_ = other.playerId_;
      targetPlayerId_ = other.targetPlayerId_;
      itemAbilityId_ = other.itemAbilityId_;
      runeType_ = other.runeType_;
      entityId_ = other.entityId_;
      itemLevel_ = other.itemLevel_;
      primaryCharges_ = other.primaryCharges_;
      secondaryCharges_ = other.secondaryCharges_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EnemyItemAlert Clone() {
      return new CDOTAUserMsg_EnemyItemAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private uint targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetPlayerId {
      get { return targetPlayerId_; }
      set {
        targetPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 3;
    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { return itemAbilityId_; }
      set {
        itemAbilityId_ = value;
      }
    }

    /// <summary>Field number for the "rune_type" field.</summary>
    public const int RuneTypeFieldNumber = 4;
    private uint runeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneType {
      get { return runeType_; }
      set {
        runeType_ = value;
      }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 5;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "item_level" field.</summary>
    public const int ItemLevelFieldNumber = 6;
    private int itemLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemLevel {
      get { return itemLevel_; }
      set {
        itemLevel_ = value;
      }
    }

    /// <summary>Field number for the "primary_charges" field.</summary>
    public const int PrimaryChargesFieldNumber = 7;
    private int primaryCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrimaryCharges {
      get { return primaryCharges_; }
      set {
        primaryCharges_ = value;
      }
    }

    /// <summary>Field number for the "secondary_charges" field.</summary>
    public const int SecondaryChargesFieldNumber = 8;
    private int secondaryCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondaryCharges {
      get { return secondaryCharges_; }
      set {
        secondaryCharges_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_EnemyItemAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_EnemyItemAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      if (RuneType != other.RuneType) return false;
      if (EntityId != other.EntityId) return false;
      if (ItemLevel != other.ItemLevel) return false;
      if (PrimaryCharges != other.PrimaryCharges) return false;
      if (SecondaryCharges != other.SecondaryCharges) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
      if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
      if (RuneType != 0) hash ^= RuneType.GetHashCode();
      if (EntityId != 0) hash ^= EntityId.GetHashCode();
      if (ItemLevel != 0) hash ^= ItemLevel.GetHashCode();
      if (PrimaryCharges != 0) hash ^= PrimaryCharges.GetHashCode();
      if (SecondaryCharges != 0) hash ^= SecondaryCharges.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (TargetPlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetPlayerId);
      }
      if (ItemAbilityId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemAbilityId);
      }
      if (RuneType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RuneType);
      }
      if (EntityId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityId);
      }
      if (ItemLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemLevel);
      }
      if (PrimaryCharges != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PrimaryCharges);
      }
      if (SecondaryCharges != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SecondaryCharges);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (TargetPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
      }
      if (ItemAbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (RuneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuneType);
      }
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (ItemLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemLevel);
      }
      if (PrimaryCharges != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrimaryCharges);
      }
      if (SecondaryCharges != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondaryCharges);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_EnemyItemAlert other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TargetPlayerId != 0) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.ItemAbilityId != 0) {
        ItemAbilityId = other.ItemAbilityId;
      }
      if (other.RuneType != 0) {
        RuneType = other.RuneType;
      }
      if (other.EntityId != 0) {
        EntityId = other.EntityId;
      }
      if (other.ItemLevel != 0) {
        ItemLevel = other.ItemLevel;
      }
      if (other.PrimaryCharges != 0) {
        PrimaryCharges = other.PrimaryCharges;
      }
      if (other.SecondaryCharges != 0) {
        SecondaryCharges = other.SecondaryCharges;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 32: {
            RuneType = input.ReadUInt32();
            break;
          }
          case 40: {
            EntityId = input.ReadInt32();
            break;
          }
          case 48: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 56: {
            PrimaryCharges = input.ReadInt32();
            break;
          }
          case 64: {
            SecondaryCharges = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_ModifierAlert : pb::IMessage<CDOTAUserMsg_ModifierAlert> {
    private static readonly pb::MessageParser<CDOTAUserMsg_ModifierAlert> _parser = new pb::MessageParser<CDOTAUserMsg_ModifierAlert>(() => new CDOTAUserMsg_ModifierAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ModifierAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ModifierAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ModifierAlert(CDOTAUserMsg_ModifierAlert other) : this() {
      playerId_ = other.playerId_;
      className_ = other.className_;
      stackCount_ = other.stackCount_;
      isDebuff_ = other.isDebuff_;
      targetEntindex_ = other.targetEntindex_;
      secondsRemaining_ = other.secondsRemaining_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ModifierAlert Clone() {
      return new CDOTAUserMsg_ModifierAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "class_name" field.</summary>
    public const int ClassNameFieldNumber = 2;
    private string className_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 3;
    private uint stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackCount {
      get { return stackCount_; }
      set {
        stackCount_ = value;
      }
    }

    /// <summary>Field number for the "is_debuff" field.</summary>
    public const int IsDebuffFieldNumber = 4;
    private bool isDebuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDebuff {
      get { return isDebuff_; }
      set {
        isDebuff_ = value;
      }
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 5;
    private uint targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEntindex {
      get { return targetEntindex_; }
      set {
        targetEntindex_ = value;
      }
    }

    /// <summary>Field number for the "seconds_remaining" field.</summary>
    public const int SecondsRemainingFieldNumber = 6;
    private float secondsRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondsRemaining {
      get { return secondsRemaining_; }
      set {
        secondsRemaining_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ModifierAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ModifierAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ClassName != other.ClassName) return false;
      if (StackCount != other.StackCount) return false;
      if (IsDebuff != other.IsDebuff) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondsRemaining, other.SecondsRemaining)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      if (StackCount != 0) hash ^= StackCount.GetHashCode();
      if (IsDebuff != false) hash ^= IsDebuff.GetHashCode();
      if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
      if (SecondsRemaining != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondsRemaining);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassName);
      }
      if (StackCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StackCount);
      }
      if (IsDebuff != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsDebuff);
      }
      if (TargetEntindex != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TargetEntindex);
      }
      if (SecondsRemaining != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SecondsRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (StackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StackCount);
      }
      if (IsDebuff != false) {
        size += 1 + 1;
      }
      if (TargetEntindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
      }
      if (SecondsRemaining != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ModifierAlert other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      if (other.StackCount != 0) {
        StackCount = other.StackCount;
      }
      if (other.IsDebuff != false) {
        IsDebuff = other.IsDebuff;
      }
      if (other.TargetEntindex != 0) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.SecondsRemaining != 0F) {
        SecondsRemaining = other.SecondsRemaining;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 18: {
            ClassName = input.ReadString();
            break;
          }
          case 24: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 32: {
            IsDebuff = input.ReadBool();
            break;
          }
          case 40: {
            TargetEntindex = input.ReadUInt32();
            break;
          }
          case 53: {
            SecondsRemaining = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_HPManaAlert : pb::IMessage<CDOTAUserMsg_HPManaAlert> {
    private static readonly pb::MessageParser<CDOTAUserMsg_HPManaAlert> _parser = new pb::MessageParser<CDOTAUserMsg_HPManaAlert>(() => new CDOTAUserMsg_HPManaAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HPManaAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HPManaAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HPManaAlert(CDOTAUserMsg_HPManaAlert other) : this() {
      playerId_ = other.playerId_;
      targetEntindex_ = other.targetEntindex_;
      showRawValues_ = other.showRawValues_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HPManaAlert Clone() {
      return new CDOTAUserMsg_HPManaAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 2;
    private uint targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEntindex {
      get { return targetEntindex_; }
      set {
        targetEntindex_ = value;
      }
    }

    /// <summary>Field number for the "show_raw_values" field.</summary>
    public const int ShowRawValuesFieldNumber = 3;
    private bool showRawValues_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowRawValues {
      get { return showRawValues_; }
      set {
        showRawValues_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HPManaAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HPManaAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (ShowRawValues != other.ShowRawValues) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
      if (ShowRawValues != false) hash ^= ShowRawValues.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (TargetEntindex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEntindex);
      }
      if (ShowRawValues != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowRawValues);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (TargetEntindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
      }
      if (ShowRawValues != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HPManaAlert other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TargetEntindex != 0) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.ShowRawValues != false) {
        ShowRawValues = other.ShowRawValues;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadUInt32();
            break;
          }
          case 24: {
            ShowRawValues = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_CourierKilledAlert : pb::IMessage<CDOTAUserMsg_CourierKilledAlert> {
    private static readonly pb::MessageParser<CDOTAUserMsg_CourierKilledAlert> _parser = new pb::MessageParser<CDOTAUserMsg_CourierKilledAlert>(() => new CDOTAUserMsg_CourierKilledAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CourierKilledAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierKilledAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierKilledAlert(CDOTAUserMsg_CourierKilledAlert other) : this() {
      team_ = other.team_;
      goldValue_ = other.goldValue_;
      entityHandle_ = other.entityHandle_;
      timestamp_ = other.timestamp_;
      lostItems_ = other.lostItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierKilledAlert Clone() {
      return new CDOTAUserMsg_CourierKilledAlert(this);
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "gold_value" field.</summary>
    public const int GoldValueFieldNumber = 2;
    private uint goldValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldValue {
      get { return goldValue_; }
      set {
        goldValue_ = value;
      }
    }

    /// <summary>Field number for the "entity_handle" field.</summary>
    public const int EntityHandleFieldNumber = 3;
    private int entityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityHandle {
      get { return entityHandle_; }
      set {
        entityHandle_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "lost_items" field.</summary>
    public const int LostItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Types.LostItem> _repeated_lostItems_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Types.LostItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Types.LostItem> lostItems_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Types.LostItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Types.LostItem> LostItems {
      get { return lostItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CourierKilledAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CourierKilledAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Team != other.Team) return false;
      if (GoldValue != other.GoldValue) return false;
      if (EntityHandle != other.EntityHandle) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!lostItems_.Equals(other.lostItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Team != 0) hash ^= Team.GetHashCode();
      if (GoldValue != 0) hash ^= GoldValue.GetHashCode();
      if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      hash ^= lostItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Team != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (GoldValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GoldValue);
      }
      if (EntityHandle != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EntityHandle);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Timestamp);
      }
      lostItems_.WriteTo(output, _repeated_lostItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (GoldValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldValue);
      }
      if (EntityHandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      size += lostItems_.CalculateSize(_repeated_lostItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CourierKilledAlert other) {
      if (other == null) {
        return;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.GoldValue != 0) {
        GoldValue = other.GoldValue;
      }
      if (other.EntityHandle != 0) {
        EntityHandle = other.EntityHandle;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      lostItems_.Add(other.lostItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 16: {
            GoldValue = input.ReadUInt32();
            break;
          }
          case 24: {
            EntityHandle = input.ReadInt32();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 42: {
            lostItems_.AddEntriesFrom(input, _repeated_lostItems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_CourierKilledAlert message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LostItem : pb::IMessage<LostItem> {
        private static readonly pb::MessageParser<LostItem> _parser = new pb::MessageParser<LostItem>(() => new LostItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LostItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_CourierKilledAlert.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LostItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LostItem(LostItem other) : this() {
          itemAbilityId_ = other.itemAbilityId_;
          quantity_ = other.quantity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LostItem Clone() {
          return new LostItem(this);
        }

        /// <summary>Field number for the "item_ability_id" field.</summary>
        public const int ItemAbilityIdFieldNumber = 1;
        private int itemAbilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemAbilityId {
          get { return itemAbilityId_; }
          set {
            itemAbilityId_ = value;
          }
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private uint quantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Quantity {
          get { return quantity_; }
          set {
            quantity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LostItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LostItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemAbilityId != other.ItemAbilityId) return false;
          if (Quantity != other.Quantity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
          if (Quantity != 0) hash ^= Quantity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemAbilityId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemAbilityId);
          }
          if (Quantity != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Quantity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemAbilityId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
          }
          if (Quantity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LostItem other) {
          if (other == null) {
            return;
          }
          if (other.ItemAbilityId != 0) {
            ItemAbilityId = other.ItemAbilityId;
          }
          if (other.Quantity != 0) {
            Quantity = other.Quantity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemAbilityId = input.ReadInt32();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_MinimapEvent : pb::IMessage<CDOTAUserMsg_MinimapEvent> {
    private static readonly pb::MessageParser<CDOTAUserMsg_MinimapEvent> _parser = new pb::MessageParser<CDOTAUserMsg_MinimapEvent>(() => new CDOTAUserMsg_MinimapEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MinimapEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapEvent(CDOTAUserMsg_MinimapEvent other) : this() {
      eventType_ = other.eventType_;
      entityHandle_ = other.entityHandle_;
      x_ = other.x_;
      y_ = other.y_;
      duration_ = other.duration_;
      targetEntityHandle_ = other.targetEntityHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapEvent Clone() {
      return new CDOTAUserMsg_MinimapEvent(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private int eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "entity_handle" field.</summary>
    public const int EntityHandleFieldNumber = 2;
    private int entityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityHandle {
      get { return entityHandle_; }
      set {
        entityHandle_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "target_entity_handle" field.</summary>
    public const int TargetEntityHandleFieldNumber = 6;
    private int targetEntityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntityHandle {
      get { return targetEntityHandle_; }
      set {
        targetEntityHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MinimapEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MinimapEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (EntityHandle != other.EntityHandle) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Duration != other.Duration) return false;
      if (TargetEntityHandle != other.TargetEntityHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (TargetEntityHandle != 0) hash ^= TargetEntityHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventType);
      }
      if (EntityHandle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityHandle);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (Duration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Duration);
      }
      if (TargetEntityHandle != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TargetEntityHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      if (EntityHandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (TargetEntityHandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntityHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MinimapEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.EntityHandle != 0) {
        EntityHandle = other.EntityHandle;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.TargetEntityHandle != 0) {
        TargetEntityHandle = other.TargetEntityHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = input.ReadInt32();
            break;
          }
          case 16: {
            EntityHandle = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Duration = input.ReadInt32();
            break;
          }
          case 48: {
            TargetEntityHandle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_MapLine : pb::IMessage<CDOTAUserMsg_MapLine> {
    private static readonly pb::MessageParser<CDOTAUserMsg_MapLine> _parser = new pb::MessageParser<CDOTAUserMsg_MapLine>(() => new CDOTAUserMsg_MapLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MapLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MapLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MapLine(CDOTAUserMsg_MapLine other) : this() {
      playerId_ = other.playerId_;
      mapline_ = other.mapline_ != null ? other.mapline_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MapLine Clone() {
      return new CDOTAUserMsg_MapLine(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "mapline" field.</summary>
    public const int MaplineFieldNumber = 2;
    private global::Proto.Dota.CDOTAMsg_MapLine mapline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAMsg_MapLine Mapline {
      get { return mapline_; }
      set {
        mapline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MapLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MapLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Mapline, other.Mapline)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (mapline_ != null) hash ^= Mapline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (mapline_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mapline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (mapline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mapline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MapLine other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.mapline_ != null) {
        if (mapline_ == null) {
          mapline_ = new global::Proto.Dota.CDOTAMsg_MapLine();
        }
        Mapline.MergeFrom(other.Mapline);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (mapline_ == null) {
              mapline_ = new global::Proto.Dota.CDOTAMsg_MapLine();
            }
            input.ReadMessage(mapline_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_CreateLinearProjectile : pb::IMessage<CDOTAUserMsg_CreateLinearProjectile> {
    private static readonly pb::MessageParser<CDOTAUserMsg_CreateLinearProjectile> _parser = new pb::MessageParser<CDOTAUserMsg_CreateLinearProjectile>(() => new CDOTAUserMsg_CreateLinearProjectile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CreateLinearProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CreateLinearProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CreateLinearProjectile(CDOTAUserMsg_CreateLinearProjectile other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      latency_ = other.latency_;
      entindex_ = other.entindex_;
      particleIndex_ = other.particleIndex_;
      handle_ = other.handle_;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      maxSpeed_ = other.maxSpeed_;
      fowRadius_ = other.fowRadius_;
      stickyFowReveal_ = other.stickyFowReveal_;
      distance_ = other.distance_;
      colorgemcolor_ = other.colorgemcolor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CreateLinearProjectile Clone() {
      return new CDOTAUserMsg_CreateLinearProjectile(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Proto.Dota.CMsgVector2D velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector2D Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "latency" field.</summary>
    public const int LatencyFieldNumber = 3;
    private int latency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latency {
      get { return latency_; }
      set {
        latency_ = value;
      }
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 4;
    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { return entindex_; }
      set {
        entindex_ = value;
      }
    }

    /// <summary>Field number for the "particle_index" field.</summary>
    public const int ParticleIndexFieldNumber = 5;
    private ulong particleIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParticleIndex {
      get { return particleIndex_; }
      set {
        particleIndex_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 6;
    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 7;
    private global::Proto.Dota.CMsgVector2D acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector2D Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "max_speed" field.</summary>
    public const int MaxSpeedFieldNumber = 8;
    private float maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "fow_radius" field.</summary>
    public const int FowRadiusFieldNumber = 9;
    private float fowRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FowRadius {
      get { return fowRadius_; }
      set {
        fowRadius_ = value;
      }
    }

    /// <summary>Field number for the "sticky_fow_reveal" field.</summary>
    public const int StickyFowRevealFieldNumber = 10;
    private bool stickyFowReveal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StickyFowReveal {
      get { return stickyFowReveal_; }
      set {
        stickyFowReveal_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 11;
    private float distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "colorgemcolor" field.</summary>
    public const int ColorgemcolorFieldNumber = 12;
    private uint colorgemcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Colorgemcolor {
      get { return colorgemcolor_; }
      set {
        colorgemcolor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CreateLinearProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CreateLinearProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (Latency != other.Latency) return false;
      if (Entindex != other.Entindex) return false;
      if (ParticleIndex != other.ParticleIndex) return false;
      if (Handle != other.Handle) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeed, other.MaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FowRadius, other.FowRadius)) return false;
      if (StickyFowReveal != other.StickyFowReveal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
      if (Colorgemcolor != other.Colorgemcolor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (Latency != 0) hash ^= Latency.GetHashCode();
      if (Entindex != 0) hash ^= Entindex.GetHashCode();
      if (ParticleIndex != 0UL) hash ^= ParticleIndex.GetHashCode();
      if (Handle != 0) hash ^= Handle.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (MaxSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeed);
      if (FowRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FowRadius);
      if (StickyFowReveal != false) hash ^= StickyFowReveal.GetHashCode();
      if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
      if (Colorgemcolor != 0) hash ^= Colorgemcolor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (Latency != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Latency);
      }
      if (Entindex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Entindex);
      }
      if (ParticleIndex != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ParticleIndex);
      }
      if (Handle != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Handle);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Acceleration);
      }
      if (MaxSpeed != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxSpeed);
      }
      if (FowRadius != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FowRadius);
      }
      if (StickyFowReveal != false) {
        output.WriteRawTag(80);
        output.WriteBool(StickyFowReveal);
      }
      if (Distance != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Distance);
      }
      if (Colorgemcolor != 0) {
        output.WriteRawTag(101);
        output.WriteFixed32(Colorgemcolor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (Latency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Latency);
      }
      if (Entindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (ParticleIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParticleIndex);
      }
      if (Handle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (MaxSpeed != 0F) {
        size += 1 + 4;
      }
      if (FowRadius != 0F) {
        size += 1 + 4;
      }
      if (StickyFowReveal != false) {
        size += 1 + 1;
      }
      if (Distance != 0F) {
        size += 1 + 4;
      }
      if (Colorgemcolor != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CreateLinearProjectile other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Proto.Dota.CMsgVector2D();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.Latency != 0) {
        Latency = other.Latency;
      }
      if (other.Entindex != 0) {
        Entindex = other.Entindex;
      }
      if (other.ParticleIndex != 0UL) {
        ParticleIndex = other.ParticleIndex;
      }
      if (other.Handle != 0) {
        Handle = other.Handle;
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          acceleration_ = new global::Proto.Dota.CMsgVector2D();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.MaxSpeed != 0F) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.FowRadius != 0F) {
        FowRadius = other.FowRadius;
      }
      if (other.StickyFowReveal != false) {
        StickyFowReveal = other.StickyFowReveal;
      }
      if (other.Distance != 0F) {
        Distance = other.Distance;
      }
      if (other.Colorgemcolor != 0) {
        Colorgemcolor = other.Colorgemcolor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              velocity_ = new global::Proto.Dota.CMsgVector2D();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 24: {
            Latency = input.ReadInt32();
            break;
          }
          case 32: {
            Entindex = input.ReadInt32();
            break;
          }
          case 40: {
            ParticleIndex = input.ReadUInt64();
            break;
          }
          case 48: {
            Handle = input.ReadInt32();
            break;
          }
          case 58: {
            if (acceleration_ == null) {
              acceleration_ = new global::Proto.Dota.CMsgVector2D();
            }
            input.ReadMessage(acceleration_);
            break;
          }
          case 69: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 77: {
            FowRadius = input.ReadFloat();
            break;
          }
          case 80: {
            StickyFowReveal = input.ReadBool();
            break;
          }
          case 93: {
            Distance = input.ReadFloat();
            break;
          }
          case 101: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_DestroyLinearProjectile : pb::IMessage<CDOTAUserMsg_DestroyLinearProjectile> {
    private static readonly pb::MessageParser<CDOTAUserMsg_DestroyLinearProjectile> _parser = new pb::MessageParser<CDOTAUserMsg_DestroyLinearProjectile>(() => new CDOTAUserMsg_DestroyLinearProjectile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DestroyLinearProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DestroyLinearProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DestroyLinearProjectile(CDOTAUserMsg_DestroyLinearProjectile other) : this() {
      handle_ = other.handle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DestroyLinearProjectile Clone() {
      return new CDOTAUserMsg_DestroyLinearProjectile(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DestroyLinearProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DestroyLinearProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DestroyLinearProjectile other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0) {
        Handle = other.Handle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_DodgeTrackingProjectiles : pb::IMessage<CDOTAUserMsg_DodgeTrackingProjectiles> {
    private static readonly pb::MessageParser<CDOTAUserMsg_DodgeTrackingProjectiles> _parser = new pb::MessageParser<CDOTAUserMsg_DodgeTrackingProjectiles>(() => new CDOTAUserMsg_DodgeTrackingProjectiles());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DodgeTrackingProjectiles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DodgeTrackingProjectiles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DodgeTrackingProjectiles(CDOTAUserMsg_DodgeTrackingProjectiles other) : this() {
      entindex_ = other.entindex_;
      attacksOnly_ = other.attacksOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DodgeTrackingProjectiles Clone() {
      return new CDOTAUserMsg_DodgeTrackingProjectiles(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { return entindex_; }
      set {
        entindex_ = value;
      }
    }

    /// <summary>Field number for the "attacks_only" field.</summary>
    public const int AttacksOnlyFieldNumber = 2;
    private bool attacksOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AttacksOnly {
      get { return attacksOnly_; }
      set {
        attacksOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DodgeTrackingProjectiles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DodgeTrackingProjectiles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (AttacksOnly != other.AttacksOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entindex != 0) hash ^= Entindex.GetHashCode();
      if (AttacksOnly != false) hash ^= AttacksOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entindex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (AttacksOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(AttacksOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (AttacksOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DodgeTrackingProjectiles other) {
      if (other == null) {
        return;
      }
      if (other.Entindex != 0) {
        Entindex = other.Entindex;
      }
      if (other.AttacksOnly != false) {
        AttacksOnly = other.AttacksOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            AttacksOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SpectatorPlayerClick : pb::IMessage<CDOTAUserMsg_SpectatorPlayerClick> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SpectatorPlayerClick> _parser = new pb::MessageParser<CDOTAUserMsg_SpectatorPlayerClick>(() => new CDOTAUserMsg_SpectatorPlayerClick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SpectatorPlayerClick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerClick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerClick(CDOTAUserMsg_SpectatorPlayerClick other) : this() {
      entindex_ = other.entindex_;
      orderType_ = other.orderType_;
      targetIndex_ = other.targetIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerClick Clone() {
      return new CDOTAUserMsg_SpectatorPlayerClick(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { return entindex_; }
      set {
        entindex_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 2;
    private int orderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "target_index" field.</summary>
    public const int TargetIndexFieldNumber = 3;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SpectatorPlayerClick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SpectatorPlayerClick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (OrderType != other.OrderType) return false;
      if (TargetIndex != other.TargetIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entindex != 0) hash ^= Entindex.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entindex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (OrderType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderType);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SpectatorPlayerClick other) {
      if (other == null) {
        return;
      }
      if (other.Entindex != 0) {
        Entindex = other.Entindex;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            OrderType = input.ReadInt32();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SpectatorPlayerUnitOrders : pb::IMessage<CDOTAUserMsg_SpectatorPlayerUnitOrders> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SpectatorPlayerUnitOrders> _parser = new pb::MessageParser<CDOTAUserMsg_SpectatorPlayerUnitOrders>(() => new CDOTAUserMsg_SpectatorPlayerUnitOrders());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SpectatorPlayerUnitOrders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerUnitOrders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerUnitOrders(CDOTAUserMsg_SpectatorPlayerUnitOrders other) : this() {
      entindex_ = other.entindex_;
      orderType_ = other.orderType_;
      units_ = other.units_.Clone();
      targetIndex_ = other.targetIndex_;
      abilityId_ = other.abilityId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      queue_ = other.queue_;
      sequenceNumber_ = other.sequenceNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerUnitOrders Clone() {
      return new CDOTAUserMsg_SpectatorPlayerUnitOrders(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { return entindex_; }
      set {
        entindex_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 2;
    private int orderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_units_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> units_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "target_index" field.</summary>
    public const int TargetIndexFieldNumber = 4;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 5;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::Proto.Dota.CMsgVector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 7;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 8;
    private int sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SpectatorPlayerUnitOrders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SpectatorPlayerUnitOrders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (OrderType != other.OrderType) return false;
      if(!units_.Equals(other.units_)) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (AbilityId != other.AbilityId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Queue != other.Queue) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entindex != 0) hash ^= Entindex.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      hash ^= units_.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (SequenceNumber != 0) hash ^= SequenceNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entindex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (OrderType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderType);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (TargetIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetIndex);
      }
      if (AbilityId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AbilityId);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (Queue != false) {
        output.WriteRawTag(56);
        output.WriteBool(Queue);
      }
      if (SequenceNumber != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (SequenceNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SpectatorPlayerUnitOrders other) {
      if (other == null) {
        return;
      }
      if (other.Entindex != 0) {
        Entindex = other.Entindex;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      units_.Add(other.units_);
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Dota.CMsgVector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      if (other.SequenceNumber != 0) {
        SequenceNumber = other.SequenceNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            OrderType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 32: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 40: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 50: {
            if (position_ == null) {
              position_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 56: {
            Queue = input.ReadBool();
            break;
          }
          case 64: {
            SequenceNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_NevermoreRequiem : pb::IMessage<CDOTAUserMsg_NevermoreRequiem> {
    private static readonly pb::MessageParser<CDOTAUserMsg_NevermoreRequiem> _parser = new pb::MessageParser<CDOTAUserMsg_NevermoreRequiem>(() => new CDOTAUserMsg_NevermoreRequiem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_NevermoreRequiem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NevermoreRequiem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NevermoreRequiem(CDOTAUserMsg_NevermoreRequiem other) : this() {
      entityHandle_ = other.entityHandle_;
      lines_ = other.lines_;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      reverse_ = other.reverse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NevermoreRequiem Clone() {
      return new CDOTAUserMsg_NevermoreRequiem(this);
    }

    /// <summary>Field number for the "entity_handle" field.</summary>
    public const int EntityHandleFieldNumber = 1;
    private int entityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityHandle {
      get { return entityHandle_; }
      set {
        entityHandle_ = value;
      }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 2;
    private int lines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lines {
      get { return lines_; }
      set {
        lines_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 3;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "reverse" field.</summary>
    public const int ReverseFieldNumber = 4;
    private bool reverse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reverse {
      get { return reverse_; }
      set {
        reverse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_NevermoreRequiem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_NevermoreRequiem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityHandle != other.EntityHandle) return false;
      if (Lines != other.Lines) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Reverse != other.Reverse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
      if (Lines != 0) hash ^= Lines.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Reverse != false) hash ^= Reverse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityHandle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityHandle);
      }
      if (Lines != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lines);
      }
      if (origin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Origin);
      }
      if (Reverse != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reverse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityHandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
      }
      if (Lines != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lines);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Reverse != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_NevermoreRequiem other) {
      if (other == null) {
        return;
      }
      if (other.EntityHandle != 0) {
        EntityHandle = other.EntityHandle;
      }
      if (other.Lines != 0) {
        Lines = other.Lines;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Reverse != false) {
        Reverse = other.Reverse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityHandle = input.ReadInt32();
            break;
          }
          case 16: {
            Lines = input.ReadInt32();
            break;
          }
          case 26: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 32: {
            Reverse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_HudError : pb::IMessage<CDOTAUserMsg_HudError> {
    private static readonly pb::MessageParser<CDOTAUserMsg_HudError> _parser = new pb::MessageParser<CDOTAUserMsg_HudError>(() => new CDOTAUserMsg_HudError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HudError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HudError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HudError(CDOTAUserMsg_HudError other) : this() {
      orderId_ = other.orderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HudError Clone() {
      return new CDOTAUserMsg_HudError(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private int orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HudError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HudError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId != 0) hash ^= OrderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HudError other) {
      if (other == null) {
        return;
      }
      if (other.OrderId != 0) {
        OrderId = other.OrderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SharedCooldown : pb::IMessage<CDOTAUserMsg_SharedCooldown> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SharedCooldown> _parser = new pb::MessageParser<CDOTAUserMsg_SharedCooldown>(() => new CDOTAUserMsg_SharedCooldown());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SharedCooldown> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SharedCooldown() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SharedCooldown(CDOTAUserMsg_SharedCooldown other) : this() {
      entindex_ = other.entindex_;
      name_ = other.name_;
      cooldown_ = other.cooldown_;
      nameIndex_ = other.nameIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SharedCooldown Clone() {
      return new CDOTAUserMsg_SharedCooldown(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { return entindex_; }
      set {
        entindex_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 3;
    private float cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    /// <summary>Field number for the "name_index" field.</summary>
    public const int NameIndexFieldNumber = 4;
    private int nameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameIndex {
      get { return nameIndex_; }
      set {
        nameIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SharedCooldown);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SharedCooldown other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cooldown, other.Cooldown)) return false;
      if (NameIndex != other.NameIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entindex != 0) hash ^= Entindex.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Cooldown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cooldown);
      if (NameIndex != 0) hash ^= NameIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entindex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Cooldown != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Cooldown);
      }
      if (NameIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NameIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Cooldown != 0F) {
        size += 1 + 4;
      }
      if (NameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SharedCooldown other) {
      if (other == null) {
        return;
      }
      if (other.Entindex != 0) {
        Entindex = other.Entindex;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Cooldown != 0F) {
        Cooldown = other.Cooldown;
      }
      if (other.NameIndex != 0) {
        NameIndex = other.NameIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Cooldown = input.ReadFloat();
            break;
          }
          case 32: {
            NameIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_HalloweenDrops : pb::IMessage<CDOTAUserMsg_HalloweenDrops> {
    private static readonly pb::MessageParser<CDOTAUserMsg_HalloweenDrops> _parser = new pb::MessageParser<CDOTAUserMsg_HalloweenDrops>(() => new CDOTAUserMsg_HalloweenDrops());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HalloweenDrops> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HalloweenDrops() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HalloweenDrops(CDOTAUserMsg_HalloweenDrops other) : this() {
      itemDefs_ = other.itemDefs_.Clone();
      playerIds_ = other.playerIds_.Clone();
      prizeList_ = other.prizeList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HalloweenDrops Clone() {
      return new CDOTAUserMsg_HalloweenDrops(this);
    }

    /// <summary>Field number for the "item_defs" field.</summary>
    public const int ItemDefsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_itemDefs_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> itemDefs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemDefs {
      get { return itemDefs_; }
    }

    /// <summary>Field number for the "player_ids" field.</summary>
    public const int PlayerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_playerIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> playerIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "prize_list" field.</summary>
    public const int PrizeListFieldNumber = 3;
    private uint prizeList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrizeList {
      get { return prizeList_; }
      set {
        prizeList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HalloweenDrops);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HalloweenDrops other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemDefs_.Equals(other.itemDefs_)) return false;
      if(!playerIds_.Equals(other.playerIds_)) return false;
      if (PrizeList != other.PrizeList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemDefs_.GetHashCode();
      hash ^= playerIds_.GetHashCode();
      if (PrizeList != 0) hash ^= PrizeList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemDefs_.WriteTo(output, _repeated_itemDefs_codec);
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (PrizeList != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PrizeList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemDefs_.CalculateSize(_repeated_itemDefs_codec);
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (PrizeList != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrizeList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HalloweenDrops other) {
      if (other == null) {
        return;
      }
      itemDefs_.Add(other.itemDefs_);
      playerIds_.Add(other.playerIds_);
      if (other.PrizeList != 0) {
        PrizeList = other.PrizeList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            itemDefs_.AddEntriesFrom(input, _repeated_itemDefs_codec);
            break;
          }
          case 18:
          case 16: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 24: {
            PrizeList = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_PredictionResult : pb::IMessage<CDOTAUserMsg_PredictionResult> {
    private static readonly pb::MessageParser<CDOTAUserMsg_PredictionResult> _parser = new pb::MessageParser<CDOTAUserMsg_PredictionResult>(() => new CDOTAUserMsg_PredictionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_PredictionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PredictionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PredictionResult(CDOTAUserMsg_PredictionResult other) : this() {
      accountId_ = other.accountId_;
      matchId_ = other.matchId_;
      correct_ = other.correct_;
      predictions_ = other.predictions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PredictionResult Clone() {
      return new CDOTAUserMsg_PredictionResult(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "correct" field.</summary>
    public const int CorrectFieldNumber = 3;
    private bool correct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Correct {
      get { return correct_; }
      set {
        correct_ = value;
      }
    }

    /// <summary>Field number for the "predictions" field.</summary>
    public const int PredictionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction> _repeated_predictions_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction> predictions_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction> Predictions {
      get { return predictions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_PredictionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_PredictionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (MatchId != other.MatchId) return false;
      if (Correct != other.Correct) return false;
      if(!predictions_.Equals(other.predictions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
      if (Correct != false) hash ^= Correct.GetHashCode();
      hash ^= predictions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      if (MatchId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (Correct != false) {
        output.WriteRawTag(24);
        output.WriteBool(Correct);
      }
      predictions_.WriteTo(output, _repeated_predictions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (MatchId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (Correct != false) {
        size += 1 + 1;
      }
      size += predictions_.CalculateSize(_repeated_predictions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_PredictionResult other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.MatchId != 0UL) {
        MatchId = other.MatchId;
      }
      if (other.Correct != false) {
        Correct = other.Correct;
      }
      predictions_.Add(other.predictions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 24: {
            Correct = input.ReadBool();
            break;
          }
          case 34: {
            predictions_.AddEntriesFrom(input, _repeated_predictions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_PredictionResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Prediction : pb::IMessage<Prediction> {
        private static readonly pb::MessageParser<Prediction> _parser = new pb::MessageParser<Prediction>(() => new Prediction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prediction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_PredictionResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction(Prediction other) : this() {
          itemDef_ = other.itemDef_;
          numCorrect_ = other.numCorrect_;
          numFails_ = other.numFails_;
          result_ = other.result_;
          grantedItemDefs_ = other.grantedItemDefs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prediction Clone() {
          return new Prediction(this);
        }

        /// <summary>Field number for the "item_def" field.</summary>
        public const int ItemDefFieldNumber = 1;
        private uint itemDef_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemDef {
          get { return itemDef_; }
          set {
            itemDef_ = value;
          }
        }

        /// <summary>Field number for the "num_correct" field.</summary>
        public const int NumCorrectFieldNumber = 2;
        private uint numCorrect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumCorrect {
          get { return numCorrect_; }
          set {
            numCorrect_ = value;
          }
        }

        /// <summary>Field number for the "num_fails" field.</summary>
        public const int NumFailsFieldNumber = 3;
        private uint numFails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumFails {
          get { return numFails_; }
          set {
            numFails_ = value;
          }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 4;
        private global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction.Types.EResult result_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction.Types.EResult Result {
          get { return result_; }
          set {
            result_ = value;
          }
        }

        /// <summary>Field number for the "granted_item_defs" field.</summary>
        public const int GrantedItemDefsFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_grantedItemDefs_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> grantedItemDefs_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> GrantedItemDefs {
          get { return grantedItemDefs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Prediction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prediction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemDef != other.ItemDef) return false;
          if (NumCorrect != other.NumCorrect) return false;
          if (NumFails != other.NumFails) return false;
          if (Result != other.Result) return false;
          if(!grantedItemDefs_.Equals(other.grantedItemDefs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ItemDef != 0) hash ^= ItemDef.GetHashCode();
          if (NumCorrect != 0) hash ^= NumCorrect.GetHashCode();
          if (NumFails != 0) hash ^= NumFails.GetHashCode();
          if (Result != 0) hash ^= Result.GetHashCode();
          hash ^= grantedItemDefs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemDef != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemDef);
          }
          if (NumCorrect != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumCorrect);
          }
          if (NumFails != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(NumFails);
          }
          if (Result != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Result);
          }
          grantedItemDefs_.WriteTo(output, _repeated_grantedItemDefs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemDef != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDef);
          }
          if (NumCorrect != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCorrect);
          }
          if (NumFails != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumFails);
          }
          if (Result != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
          }
          size += grantedItemDefs_.CalculateSize(_repeated_grantedItemDefs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prediction other) {
          if (other == null) {
            return;
          }
          if (other.ItemDef != 0) {
            ItemDef = other.ItemDef;
          }
          if (other.NumCorrect != 0) {
            NumCorrect = other.NumCorrect;
          }
          if (other.NumFails != 0) {
            NumFails = other.NumFails;
          }
          if (other.Result != 0) {
            Result = other.Result;
          }
          grantedItemDefs_.Add(other.grantedItemDefs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemDef = input.ReadUInt32();
                break;
              }
              case 16: {
                NumCorrect = input.ReadUInt32();
                break;
              }
              case 24: {
                NumFails = input.ReadUInt32();
                break;
              }
              case 32: {
                result_ = (global::Proto.Dota.CDOTAUserMsg_PredictionResult.Types.Prediction.Types.EResult) input.ReadEnum();
                break;
              }
              case 50:
              case 48: {
                grantedItemDefs_.AddEntriesFrom(input, _repeated_grantedItemDefs_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Prediction message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum EResult {
            [pbr::OriginalName("k_Unknown")] KUnknown = 0,
            [pbr::OriginalName("k_eResult_ItemGranted")] KEResultItemGranted = 1,
            [pbr::OriginalName("k_eResult_Destroyed")] KEResultDestroyed = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CDOTAResponseQuerySerialized : pb::IMessage<CDOTAResponseQuerySerialized> {
    private static readonly pb::MessageParser<CDOTAResponseQuerySerialized> _parser = new pb::MessageParser<CDOTAResponseQuerySerialized>(() => new CDOTAResponseQuerySerialized());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAResponseQuerySerialized> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAResponseQuerySerialized() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAResponseQuerySerialized(CDOTAResponseQuerySerialized other) : this() {
      facts_ = other.facts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAResponseQuerySerialized Clone() {
      return new CDOTAResponseQuerySerialized(this);
    }

    /// <summary>Field number for the "facts" field.</summary>
    public const int FactsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact> _repeated_facts_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact> facts_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact> Facts {
      get { return facts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAResponseQuerySerialized);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAResponseQuerySerialized other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!facts_.Equals(other.facts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= facts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      facts_.WriteTo(output, _repeated_facts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += facts_.CalculateSize(_repeated_facts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAResponseQuerySerialized other) {
      if (other == null) {
        return;
      }
      facts_.Add(other.facts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            facts_.AddEntriesFrom(input, _repeated_facts_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAResponseQuerySerialized message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Fact : pb::IMessage<Fact> {
        private static readonly pb::MessageParser<Fact> _parser = new pb::MessageParser<Fact>(() => new Fact());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fact> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAResponseQuerySerialized.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fact() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fact(Fact other) : this() {
          key_ = other.key_;
          valtype_ = other.valtype_;
          valNumeric_ = other.valNumeric_;
          valString_ = other.valString_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fact Clone() {
          return new Fact(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private int key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "valtype" field.</summary>
        public const int ValtypeFieldNumber = 2;
        private global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType valtype_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType Valtype {
          get { return valtype_; }
          set {
            valtype_ = value;
          }
        }

        /// <summary>Field number for the "val_numeric" field.</summary>
        public const int ValNumericFieldNumber = 3;
        private float valNumeric_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ValNumeric {
          get { return valNumeric_; }
          set {
            valNumeric_ = value;
          }
        }

        /// <summary>Field number for the "val_string" field.</summary>
        public const int ValStringFieldNumber = 4;
        private string valString_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ValString {
          get { return valString_; }
          set {
            valString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fact);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fact other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Valtype != other.Valtype) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ValNumeric, other.ValNumeric)) return false;
          if (ValString != other.ValString) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key != 0) hash ^= Key.GetHashCode();
          if (Valtype != 0) hash ^= Valtype.GetHashCode();
          if (ValNumeric != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ValNumeric);
          if (ValString.Length != 0) hash ^= ValString.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Key);
          }
          if (Valtype != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Valtype);
          }
          if (ValNumeric != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ValNumeric);
          }
          if (ValString.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ValString);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
          }
          if (Valtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Valtype);
          }
          if (ValNumeric != 0F) {
            size += 1 + 4;
          }
          if (ValString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ValString);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fact other) {
          if (other == null) {
            return;
          }
          if (other.Key != 0) {
            Key = other.Key;
          }
          if (other.Valtype != 0) {
            Valtype = other.Valtype;
          }
          if (other.ValNumeric != 0F) {
            ValNumeric = other.ValNumeric;
          }
          if (other.ValString.Length != 0) {
            ValString = other.ValString;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadInt32();
                break;
              }
              case 16: {
                valtype_ = (global::Proto.Dota.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType) input.ReadEnum();
                break;
              }
              case 29: {
                ValNumeric = input.ReadFloat();
                break;
              }
              case 34: {
                ValString = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Fact message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ValueType {
            [pbr::OriginalName("UKNOWN")] Uknown = 0,
            [pbr::OriginalName("NUMERIC")] Numeric = 1,
            [pbr::OriginalName("STRING")] String = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CDOTASpeechMatchOnClient : pb::IMessage<CDOTASpeechMatchOnClient> {
    private static readonly pb::MessageParser<CDOTASpeechMatchOnClient> _parser = new pb::MessageParser<CDOTASpeechMatchOnClient>(() => new CDOTASpeechMatchOnClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTASpeechMatchOnClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASpeechMatchOnClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASpeechMatchOnClient(CDOTASpeechMatchOnClient other) : this() {
      concept_ = other.concept_;
      recipientType_ = other.recipientType_;
      responsequery_ = other.responsequery_ != null ? other.responsequery_.Clone() : null;
      randomseed_ = other.randomseed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASpeechMatchOnClient Clone() {
      return new CDOTASpeechMatchOnClient(this);
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int ConceptFieldNumber = 1;
    private int concept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Concept {
      get { return concept_; }
      set {
        concept_ = value;
      }
    }

    /// <summary>Field number for the "recipient_type" field.</summary>
    public const int RecipientTypeFieldNumber = 2;
    private int recipientType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecipientType {
      get { return recipientType_; }
      set {
        recipientType_ = value;
      }
    }

    /// <summary>Field number for the "responsequery" field.</summary>
    public const int ResponsequeryFieldNumber = 3;
    private global::Proto.Dota.CDOTAResponseQuerySerialized responsequery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAResponseQuerySerialized Responsequery {
      get { return responsequery_; }
      set {
        responsequery_ = value;
      }
    }

    /// <summary>Field number for the "randomseed" field.</summary>
    public const int RandomseedFieldNumber = 4;
    private int randomseed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Randomseed {
      get { return randomseed_; }
      set {
        randomseed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTASpeechMatchOnClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTASpeechMatchOnClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Concept != other.Concept) return false;
      if (RecipientType != other.RecipientType) return false;
      if (!object.Equals(Responsequery, other.Responsequery)) return false;
      if (Randomseed != other.Randomseed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Concept != 0) hash ^= Concept.GetHashCode();
      if (RecipientType != 0) hash ^= RecipientType.GetHashCode();
      if (responsequery_ != null) hash ^= Responsequery.GetHashCode();
      if (Randomseed != 0) hash ^= Randomseed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Concept != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Concept);
      }
      if (RecipientType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecipientType);
      }
      if (responsequery_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Responsequery);
      }
      if (Randomseed != 0) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Randomseed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Concept != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Concept);
      }
      if (RecipientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecipientType);
      }
      if (responsequery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Responsequery);
      }
      if (Randomseed != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTASpeechMatchOnClient other) {
      if (other == null) {
        return;
      }
      if (other.Concept != 0) {
        Concept = other.Concept;
      }
      if (other.RecipientType != 0) {
        RecipientType = other.RecipientType;
      }
      if (other.responsequery_ != null) {
        if (responsequery_ == null) {
          responsequery_ = new global::Proto.Dota.CDOTAResponseQuerySerialized();
        }
        Responsequery.MergeFrom(other.Responsequery);
      }
      if (other.Randomseed != 0) {
        Randomseed = other.Randomseed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Concept = input.ReadInt32();
            break;
          }
          case 16: {
            RecipientType = input.ReadInt32();
            break;
          }
          case 26: {
            if (responsequery_ == null) {
              responsequery_ = new global::Proto.Dota.CDOTAResponseQuerySerialized();
            }
            input.ReadMessage(responsequery_);
            break;
          }
          case 37: {
            Randomseed = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_UnitEvent : pb::IMessage<CDOTAUserMsg_UnitEvent> {
    private static readonly pb::MessageParser<CDOTAUserMsg_UnitEvent> _parser = new pb::MessageParser<CDOTAUserMsg_UnitEvent>(() => new CDOTAUserMsg_UnitEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_UnitEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UnitEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UnitEvent(CDOTAUserMsg_UnitEvent other) : this() {
      msgType_ = other.msgType_;
      entityIndex_ = other.entityIndex_;
      speech_ = other.speech_ != null ? other.speech_.Clone() : null;
      speechMute_ = other.speechMute_ != null ? other.speechMute_.Clone() : null;
      addGesture_ = other.addGesture_ != null ? other.addGesture_.Clone() : null;
      removeGesture_ = other.removeGesture_ != null ? other.removeGesture_.Clone() : null;
      bloodImpact_ = other.bloodImpact_ != null ? other.bloodImpact_.Clone() : null;
      fadeGesture_ = other.fadeGesture_ != null ? other.fadeGesture_.Clone() : null;
      speechMatchOnClient_ = other.speechMatchOnClient_ != null ? other.speechMatchOnClient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UnitEvent Clone() {
      return new CDOTAUserMsg_UnitEvent(this);
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private global::Proto.Dota.EDotaEntityMessages msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.EDotaEntityMessages MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "entity_index" field.</summary>
    public const int EntityIndexFieldNumber = 2;
    private int entityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityIndex {
      get { return entityIndex_; }
      set {
        entityIndex_ = value;
      }
    }

    /// <summary>Field number for the "speech" field.</summary>
    public const int SpeechFieldNumber = 3;
    private global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.Speech speech_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.Speech Speech {
      get { return speech_; }
      set {
        speech_ = value;
      }
    }

    /// <summary>Field number for the "speech_mute" field.</summary>
    public const int SpeechMuteFieldNumber = 4;
    private global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.SpeechMute speechMute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.SpeechMute SpeechMute {
      get { return speechMute_; }
      set {
        speechMute_ = value;
      }
    }

    /// <summary>Field number for the "add_gesture" field.</summary>
    public const int AddGestureFieldNumber = 5;
    private global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.AddGesture addGesture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.AddGesture AddGesture {
      get { return addGesture_; }
      set {
        addGesture_ = value;
      }
    }

    /// <summary>Field number for the "remove_gesture" field.</summary>
    public const int RemoveGestureFieldNumber = 6;
    private global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.RemoveGesture removeGesture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.RemoveGesture RemoveGesture {
      get { return removeGesture_; }
      set {
        removeGesture_ = value;
      }
    }

    /// <summary>Field number for the "blood_impact" field.</summary>
    public const int BloodImpactFieldNumber = 7;
    private global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.BloodImpact bloodImpact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.BloodImpact BloodImpact {
      get { return bloodImpact_; }
      set {
        bloodImpact_ = value;
      }
    }

    /// <summary>Field number for the "fade_gesture" field.</summary>
    public const int FadeGestureFieldNumber = 8;
    private global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.FadeGesture fadeGesture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.FadeGesture FadeGesture {
      get { return fadeGesture_; }
      set {
        fadeGesture_ = value;
      }
    }

    /// <summary>Field number for the "speech_match_on_client" field.</summary>
    public const int SpeechMatchOnClientFieldNumber = 9;
    private global::Proto.Dota.CDOTASpeechMatchOnClient speechMatchOnClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTASpeechMatchOnClient SpeechMatchOnClient {
      get { return speechMatchOnClient_; }
      set {
        speechMatchOnClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_UnitEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_UnitEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (EntityIndex != other.EntityIndex) return false;
      if (!object.Equals(Speech, other.Speech)) return false;
      if (!object.Equals(SpeechMute, other.SpeechMute)) return false;
      if (!object.Equals(AddGesture, other.AddGesture)) return false;
      if (!object.Equals(RemoveGesture, other.RemoveGesture)) return false;
      if (!object.Equals(BloodImpact, other.BloodImpact)) return false;
      if (!object.Equals(FadeGesture, other.FadeGesture)) return false;
      if (!object.Equals(SpeechMatchOnClient, other.SpeechMatchOnClient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (EntityIndex != 0) hash ^= EntityIndex.GetHashCode();
      if (speech_ != null) hash ^= Speech.GetHashCode();
      if (speechMute_ != null) hash ^= SpeechMute.GetHashCode();
      if (addGesture_ != null) hash ^= AddGesture.GetHashCode();
      if (removeGesture_ != null) hash ^= RemoveGesture.GetHashCode();
      if (bloodImpact_ != null) hash ^= BloodImpact.GetHashCode();
      if (fadeGesture_ != null) hash ^= FadeGesture.GetHashCode();
      if (speechMatchOnClient_ != null) hash ^= SpeechMatchOnClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MsgType);
      }
      if (EntityIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityIndex);
      }
      if (speech_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Speech);
      }
      if (speechMute_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SpeechMute);
      }
      if (addGesture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AddGesture);
      }
      if (removeGesture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RemoveGesture);
      }
      if (bloodImpact_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BloodImpact);
      }
      if (fadeGesture_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FadeGesture);
      }
      if (speechMatchOnClient_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SpeechMatchOnClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (EntityIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIndex);
      }
      if (speech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speech);
      }
      if (speechMute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeechMute);
      }
      if (addGesture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddGesture);
      }
      if (removeGesture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveGesture);
      }
      if (bloodImpact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BloodImpact);
      }
      if (fadeGesture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FadeGesture);
      }
      if (speechMatchOnClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeechMatchOnClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_UnitEvent other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.EntityIndex != 0) {
        EntityIndex = other.EntityIndex;
      }
      if (other.speech_ != null) {
        if (speech_ == null) {
          speech_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.Speech();
        }
        Speech.MergeFrom(other.Speech);
      }
      if (other.speechMute_ != null) {
        if (speechMute_ == null) {
          speechMute_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.SpeechMute();
        }
        SpeechMute.MergeFrom(other.SpeechMute);
      }
      if (other.addGesture_ != null) {
        if (addGesture_ == null) {
          addGesture_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.AddGesture();
        }
        AddGesture.MergeFrom(other.AddGesture);
      }
      if (other.removeGesture_ != null) {
        if (removeGesture_ == null) {
          removeGesture_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.RemoveGesture();
        }
        RemoveGesture.MergeFrom(other.RemoveGesture);
      }
      if (other.bloodImpact_ != null) {
        if (bloodImpact_ == null) {
          bloodImpact_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.BloodImpact();
        }
        BloodImpact.MergeFrom(other.BloodImpact);
      }
      if (other.fadeGesture_ != null) {
        if (fadeGesture_ == null) {
          fadeGesture_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.FadeGesture();
        }
        FadeGesture.MergeFrom(other.FadeGesture);
      }
      if (other.speechMatchOnClient_ != null) {
        if (speechMatchOnClient_ == null) {
          speechMatchOnClient_ = new global::Proto.Dota.CDOTASpeechMatchOnClient();
        }
        SpeechMatchOnClient.MergeFrom(other.SpeechMatchOnClient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgType_ = (global::Proto.Dota.EDotaEntityMessages) input.ReadEnum();
            break;
          }
          case 16: {
            EntityIndex = input.ReadInt32();
            break;
          }
          case 26: {
            if (speech_ == null) {
              speech_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.Speech();
            }
            input.ReadMessage(speech_);
            break;
          }
          case 34: {
            if (speechMute_ == null) {
              speechMute_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.SpeechMute();
            }
            input.ReadMessage(speechMute_);
            break;
          }
          case 42: {
            if (addGesture_ == null) {
              addGesture_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.AddGesture();
            }
            input.ReadMessage(addGesture_);
            break;
          }
          case 50: {
            if (removeGesture_ == null) {
              removeGesture_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.RemoveGesture();
            }
            input.ReadMessage(removeGesture_);
            break;
          }
          case 58: {
            if (bloodImpact_ == null) {
              bloodImpact_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.BloodImpact();
            }
            input.ReadMessage(bloodImpact_);
            break;
          }
          case 66: {
            if (fadeGesture_ == null) {
              fadeGesture_ = new global::Proto.Dota.CDOTAUserMsg_UnitEvent.Types.FadeGesture();
            }
            input.ReadMessage(fadeGesture_);
            break;
          }
          case 74: {
            if (speechMatchOnClient_ == null) {
              speechMatchOnClient_ = new global::Proto.Dota.CDOTASpeechMatchOnClient();
            }
            input.ReadMessage(speechMatchOnClient_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_UnitEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Speech : pb::IMessage<Speech> {
        private static readonly pb::MessageParser<Speech> _parser = new pb::MessageParser<Speech>(() => new Speech());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Speech> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Speech() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Speech(Speech other) : this() {
          concept_ = other.concept_;
          response_ = other.response_;
          recipientType_ = other.recipientType_;
          level_ = other.level_;
          muteable_ = other.muteable_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Speech Clone() {
          return new Speech(this);
        }

        /// <summary>Field number for the "concept" field.</summary>
        public const int ConceptFieldNumber = 1;
        private int concept_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Concept {
          get { return concept_; }
          set {
            concept_ = value;
          }
        }

        /// <summary>Field number for the "response" field.</summary>
        public const int ResponseFieldNumber = 2;
        private string response_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Response {
          get { return response_; }
          set {
            response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "recipient_type" field.</summary>
        public const int RecipientTypeFieldNumber = 3;
        private int recipientType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RecipientType {
          get { return recipientType_; }
          set {
            recipientType_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 4;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "muteable" field.</summary>
        public const int MuteableFieldNumber = 5;
        private bool muteable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Muteable {
          get { return muteable_; }
          set {
            muteable_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Speech);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Speech other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Concept != other.Concept) return false;
          if (Response != other.Response) return false;
          if (RecipientType != other.RecipientType) return false;
          if (Level != other.Level) return false;
          if (Muteable != other.Muteable) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Concept != 0) hash ^= Concept.GetHashCode();
          if (Response.Length != 0) hash ^= Response.GetHashCode();
          if (RecipientType != 0) hash ^= RecipientType.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (Muteable != false) hash ^= Muteable.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Concept != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Concept);
          }
          if (Response.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Response);
          }
          if (RecipientType != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(RecipientType);
          }
          if (Level != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Level);
          }
          if (Muteable != false) {
            output.WriteRawTag(40);
            output.WriteBool(Muteable);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Concept != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Concept);
          }
          if (Response.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
          }
          if (RecipientType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecipientType);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (Muteable != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Speech other) {
          if (other == null) {
            return;
          }
          if (other.Concept != 0) {
            Concept = other.Concept;
          }
          if (other.Response.Length != 0) {
            Response = other.Response;
          }
          if (other.RecipientType != 0) {
            RecipientType = other.RecipientType;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.Muteable != false) {
            Muteable = other.Muteable;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Concept = input.ReadInt32();
                break;
              }
              case 18: {
                Response = input.ReadString();
                break;
              }
              case 24: {
                RecipientType = input.ReadInt32();
                break;
              }
              case 32: {
                Level = input.ReadInt32();
                break;
              }
              case 40: {
                Muteable = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SpeechMute : pb::IMessage<SpeechMute> {
        private static readonly pb::MessageParser<SpeechMute> _parser = new pb::MessageParser<SpeechMute>(() => new SpeechMute());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpeechMute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeechMute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeechMute(SpeechMute other) : this() {
          delay_ = other.delay_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeechMute Clone() {
          return new SpeechMute(this);
        }

        /// <summary>Field number for the "delay" field.</summary>
        public const int DelayFieldNumber = 1;
        private float delay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Delay {
          get { return delay_; }
          set {
            delay_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpeechMute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpeechMute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delay, other.Delay)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Delay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delay);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Delay != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Delay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Delay != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpeechMute other) {
          if (other == null) {
            return;
          }
          if (other.Delay != 0F) {
            Delay = other.Delay;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Delay = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AddGesture : pb::IMessage<AddGesture> {
        private static readonly pb::MessageParser<AddGesture> _parser = new pb::MessageParser<AddGesture>(() => new AddGesture());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddGesture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddGesture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddGesture(AddGesture other) : this() {
          activity_ = other.activity_;
          slot_ = other.slot_;
          fadeIn_ = other.fadeIn_;
          fadeOut_ = other.fadeOut_;
          playbackRate_ = other.playbackRate_;
          sequenceVariant_ = other.sequenceVariant_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddGesture Clone() {
          return new AddGesture(this);
        }

        /// <summary>Field number for the "activity" field.</summary>
        public const int ActivityFieldNumber = 1;
        private int activity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Activity {
          get { return activity_; }
          set {
            activity_ = value;
          }
        }

        /// <summary>Field number for the "slot" field.</summary>
        public const int SlotFieldNumber = 2;
        private int slot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Slot {
          get { return slot_; }
          set {
            slot_ = value;
          }
        }

        /// <summary>Field number for the "fade_in" field.</summary>
        public const int FadeInFieldNumber = 3;
        private float fadeIn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FadeIn {
          get { return fadeIn_; }
          set {
            fadeIn_ = value;
          }
        }

        /// <summary>Field number for the "fade_out" field.</summary>
        public const int FadeOutFieldNumber = 4;
        private float fadeOut_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FadeOut {
          get { return fadeOut_; }
          set {
            fadeOut_ = value;
          }
        }

        /// <summary>Field number for the "playback_rate" field.</summary>
        public const int PlaybackRateFieldNumber = 5;
        private float playbackRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PlaybackRate {
          get { return playbackRate_; }
          set {
            playbackRate_ = value;
          }
        }

        /// <summary>Field number for the "sequence_variant" field.</summary>
        public const int SequenceVariantFieldNumber = 6;
        private int sequenceVariant_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SequenceVariant {
          get { return sequenceVariant_; }
          set {
            sequenceVariant_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AddGesture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddGesture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activity != other.Activity) return false;
          if (Slot != other.Slot) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FadeIn, other.FadeIn)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FadeOut, other.FadeOut)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlaybackRate, other.PlaybackRate)) return false;
          if (SequenceVariant != other.SequenceVariant) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Activity != 0) hash ^= Activity.GetHashCode();
          if (Slot != 0) hash ^= Slot.GetHashCode();
          if (FadeIn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FadeIn);
          if (FadeOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FadeOut);
          if (PlaybackRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlaybackRate);
          if (SequenceVariant != 0) hash ^= SequenceVariant.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Activity != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (Slot != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Slot);
          }
          if (FadeIn != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(FadeIn);
          }
          if (FadeOut != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(FadeOut);
          }
          if (PlaybackRate != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(PlaybackRate);
          }
          if (SequenceVariant != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(SequenceVariant);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Activity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
          }
          if (Slot != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
          }
          if (FadeIn != 0F) {
            size += 1 + 4;
          }
          if (FadeOut != 0F) {
            size += 1 + 4;
          }
          if (PlaybackRate != 0F) {
            size += 1 + 4;
          }
          if (SequenceVariant != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceVariant);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddGesture other) {
          if (other == null) {
            return;
          }
          if (other.Activity != 0) {
            Activity = other.Activity;
          }
          if (other.Slot != 0) {
            Slot = other.Slot;
          }
          if (other.FadeIn != 0F) {
            FadeIn = other.FadeIn;
          }
          if (other.FadeOut != 0F) {
            FadeOut = other.FadeOut;
          }
          if (other.PlaybackRate != 0F) {
            PlaybackRate = other.PlaybackRate;
          }
          if (other.SequenceVariant != 0) {
            SequenceVariant = other.SequenceVariant;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
              case 16: {
                Slot = input.ReadInt32();
                break;
              }
              case 29: {
                FadeIn = input.ReadFloat();
                break;
              }
              case 37: {
                FadeOut = input.ReadFloat();
                break;
              }
              case 45: {
                PlaybackRate = input.ReadFloat();
                break;
              }
              case 48: {
                SequenceVariant = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RemoveGesture : pb::IMessage<RemoveGesture> {
        private static readonly pb::MessageParser<RemoveGesture> _parser = new pb::MessageParser<RemoveGesture>(() => new RemoveGesture());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoveGesture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveGesture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveGesture(RemoveGesture other) : this() {
          activity_ = other.activity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveGesture Clone() {
          return new RemoveGesture(this);
        }

        /// <summary>Field number for the "activity" field.</summary>
        public const int ActivityFieldNumber = 1;
        private int activity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Activity {
          get { return activity_; }
          set {
            activity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoveGesture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoveGesture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activity != other.Activity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Activity != 0) hash ^= Activity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Activity != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Activity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoveGesture other) {
          if (other == null) {
            return;
          }
          if (other.Activity != 0) {
            Activity = other.Activity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BloodImpact : pb::IMessage<BloodImpact> {
        private static readonly pb::MessageParser<BloodImpact> _parser = new pb::MessageParser<BloodImpact>(() => new BloodImpact());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BloodImpact> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BloodImpact() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BloodImpact(BloodImpact other) : this() {
          scale_ = other.scale_;
          xNormal_ = other.xNormal_;
          yNormal_ = other.yNormal_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BloodImpact Clone() {
          return new BloodImpact(this);
        }

        /// <summary>Field number for the "scale" field.</summary>
        public const int ScaleFieldNumber = 1;
        private int scale_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Scale {
          get { return scale_; }
          set {
            scale_ = value;
          }
        }

        /// <summary>Field number for the "x_normal" field.</summary>
        public const int XNormalFieldNumber = 2;
        private int xNormal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int XNormal {
          get { return xNormal_; }
          set {
            xNormal_ = value;
          }
        }

        /// <summary>Field number for the "y_normal" field.</summary>
        public const int YNormalFieldNumber = 3;
        private int yNormal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int YNormal {
          get { return yNormal_; }
          set {
            yNormal_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BloodImpact);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BloodImpact other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Scale != other.Scale) return false;
          if (XNormal != other.XNormal) return false;
          if (YNormal != other.YNormal) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Scale != 0) hash ^= Scale.GetHashCode();
          if (XNormal != 0) hash ^= XNormal.GetHashCode();
          if (YNormal != 0) hash ^= YNormal.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Scale != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Scale);
          }
          if (XNormal != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(XNormal);
          }
          if (YNormal != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(YNormal);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Scale != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scale);
          }
          if (XNormal != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(XNormal);
          }
          if (YNormal != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(YNormal);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BloodImpact other) {
          if (other == null) {
            return;
          }
          if (other.Scale != 0) {
            Scale = other.Scale;
          }
          if (other.XNormal != 0) {
            XNormal = other.XNormal;
          }
          if (other.YNormal != 0) {
            YNormal = other.YNormal;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Scale = input.ReadInt32();
                break;
              }
              case 16: {
                XNormal = input.ReadInt32();
                break;
              }
              case 24: {
                YNormal = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class FadeGesture : pb::IMessage<FadeGesture> {
        private static readonly pb::MessageParser<FadeGesture> _parser = new pb::MessageParser<FadeGesture>(() => new FadeGesture());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FadeGesture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FadeGesture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FadeGesture(FadeGesture other) : this() {
          activity_ = other.activity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FadeGesture Clone() {
          return new FadeGesture(this);
        }

        /// <summary>Field number for the "activity" field.</summary>
        public const int ActivityFieldNumber = 1;
        private int activity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Activity {
          get { return activity_; }
          set {
            activity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FadeGesture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FadeGesture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activity != other.Activity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Activity != 0) hash ^= Activity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Activity != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Activity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FadeGesture other) {
          if (other == null) {
            return;
          }
          if (other.Activity != 0) {
            Activity = other.Activity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_ItemPurchased : pb::IMessage<CDOTAUserMsg_ItemPurchased> {
    private static readonly pb::MessageParser<CDOTAUserMsg_ItemPurchased> _parser = new pb::MessageParser<CDOTAUserMsg_ItemPurchased>(() => new CDOTAUserMsg_ItemPurchased());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ItemPurchased> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemPurchased() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemPurchased(CDOTAUserMsg_ItemPurchased other) : this() {
      itemAbilityId_ = other.itemAbilityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemPurchased Clone() {
      return new CDOTAUserMsg_ItemPurchased(this);
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 1;
    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { return itemAbilityId_; }
      set {
        itemAbilityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ItemPurchased);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ItemPurchased other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemAbilityId != other.ItemAbilityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemAbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemAbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ItemPurchased other) {
      if (other == null) {
        return;
      }
      if (other.ItemAbilityId != 0) {
        ItemAbilityId = other.ItemAbilityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_ParticleManager : pb::IMessage<CDOTAUserMsg_ParticleManager> {
    private static readonly pb::MessageParser<CDOTAUserMsg_ParticleManager> _parser = new pb::MessageParser<CDOTAUserMsg_ParticleManager>(() => new CDOTAUserMsg_ParticleManager());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ParticleManager> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ParticleManager() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ParticleManager(CDOTAUserMsg_ParticleManager other) : this() {
      type_ = other.type_;
      index_ = other.index_;
      releaseParticleIndex_ = other.releaseParticleIndex_ != null ? other.releaseParticleIndex_.Clone() : null;
      createParticle_ = other.createParticle_ != null ? other.createParticle_.Clone() : null;
      destroyParticle_ = other.destroyParticle_ != null ? other.destroyParticle_.Clone() : null;
      destroyParticleInvolving_ = other.destroyParticleInvolving_ != null ? other.destroyParticleInvolving_.Clone() : null;
      updateParticle_ = other.updateParticle_ != null ? other.updateParticle_.Clone() : null;
      updateParticleFwd_ = other.updateParticleFwd_ != null ? other.updateParticleFwd_.Clone() : null;
      updateParticleOrient_ = other.updateParticleOrient_ != null ? other.updateParticleOrient_.Clone() : null;
      updateParticleFallback_ = other.updateParticleFallback_ != null ? other.updateParticleFallback_.Clone() : null;
      updateParticleOffset_ = other.updateParticleOffset_ != null ? other.updateParticleOffset_.Clone() : null;
      updateParticleEnt_ = other.updateParticleEnt_ != null ? other.updateParticleEnt_.Clone() : null;
      updateParticleShouldDraw_ = other.updateParticleShouldDraw_ != null ? other.updateParticleShouldDraw_.Clone() : null;
      updateParticleSetFrozen_ = other.updateParticleSetFrozen_ != null ? other.updateParticleSetFrozen_.Clone() : null;
      changeControlPointAttachment_ = other.changeControlPointAttachment_ != null ? other.changeControlPointAttachment_.Clone() : null;
      updateEntityPosition_ = other.updateEntityPosition_ != null ? other.updateEntityPosition_.Clone() : null;
      setParticleFowProperties_ = other.setParticleFowProperties_ != null ? other.setParticleFowProperties_.Clone() : null;
      setParticleText_ = other.setParticleText_ != null ? other.setParticleText_.Clone() : null;
      setParticleShouldCheckFow_ = other.setParticleShouldCheckFow_ != null ? other.setParticleShouldCheckFow_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ParticleManager Clone() {
      return new CDOTAUserMsg_ParticleManager(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.Dota.DOTA_PARTICLE_MESSAGE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.DOTA_PARTICLE_MESSAGE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "release_particle_index" field.</summary>
    public const int ReleaseParticleIndexFieldNumber = 3;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ReleaseParticleIndex releaseParticleIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ReleaseParticleIndex ReleaseParticleIndex {
      get { return releaseParticleIndex_; }
      set {
        releaseParticleIndex_ = value;
      }
    }

    /// <summary>Field number for the "create_particle" field.</summary>
    public const int CreateParticleFieldNumber = 4;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.CreateParticle createParticle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.CreateParticle CreateParticle {
      get { return createParticle_; }
      set {
        createParticle_ = value;
      }
    }

    /// <summary>Field number for the "destroy_particle" field.</summary>
    public const int DestroyParticleFieldNumber = 5;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticle destroyParticle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticle DestroyParticle {
      get { return destroyParticle_; }
      set {
        destroyParticle_ = value;
      }
    }

    /// <summary>Field number for the "destroy_particle_involving" field.</summary>
    public const int DestroyParticleInvolvingFieldNumber = 6;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticleInvolving destroyParticleInvolving_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticleInvolving DestroyParticleInvolving {
      get { return destroyParticleInvolving_; }
      set {
        destroyParticleInvolving_ = value;
      }
    }

    /// <summary>Field number for the "update_particle" field.</summary>
    public const int UpdateParticleFieldNumber = 7;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticle updateParticle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticle UpdateParticle {
      get { return updateParticle_; }
      set {
        updateParticle_ = value;
      }
    }

    /// <summary>Field number for the "update_particle_fwd" field.</summary>
    public const int UpdateParticleFwdFieldNumber = 8;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFwd updateParticleFwd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFwd UpdateParticleFwd {
      get { return updateParticleFwd_; }
      set {
        updateParticleFwd_ = value;
      }
    }

    /// <summary>Field number for the "update_particle_orient" field.</summary>
    public const int UpdateParticleOrientFieldNumber = 9;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOrient updateParticleOrient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOrient UpdateParticleOrient {
      get { return updateParticleOrient_; }
      set {
        updateParticleOrient_ = value;
      }
    }

    /// <summary>Field number for the "update_particle_fallback" field.</summary>
    public const int UpdateParticleFallbackFieldNumber = 10;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFallback updateParticleFallback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFallback UpdateParticleFallback {
      get { return updateParticleFallback_; }
      set {
        updateParticleFallback_ = value;
      }
    }

    /// <summary>Field number for the "update_particle_offset" field.</summary>
    public const int UpdateParticleOffsetFieldNumber = 11;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOffset updateParticleOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOffset UpdateParticleOffset {
      get { return updateParticleOffset_; }
      set {
        updateParticleOffset_ = value;
      }
    }

    /// <summary>Field number for the "update_particle_ent" field.</summary>
    public const int UpdateParticleEntFieldNumber = 12;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleEnt updateParticleEnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleEnt UpdateParticleEnt {
      get { return updateParticleEnt_; }
      set {
        updateParticleEnt_ = value;
      }
    }

    /// <summary>Field number for the "update_particle_should_draw" field.</summary>
    public const int UpdateParticleShouldDrawFieldNumber = 14;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleShouldDraw updateParticleShouldDraw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleShouldDraw UpdateParticleShouldDraw {
      get { return updateParticleShouldDraw_; }
      set {
        updateParticleShouldDraw_ = value;
      }
    }

    /// <summary>Field number for the "update_particle_set_frozen" field.</summary>
    public const int UpdateParticleSetFrozenFieldNumber = 15;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleSetFrozen updateParticleSetFrozen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleSetFrozen UpdateParticleSetFrozen {
      get { return updateParticleSetFrozen_; }
      set {
        updateParticleSetFrozen_ = value;
      }
    }

    /// <summary>Field number for the "change_control_point_attachment" field.</summary>
    public const int ChangeControlPointAttachmentFieldNumber = 16;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ChangeControlPointAttachment changeControlPointAttachment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ChangeControlPointAttachment ChangeControlPointAttachment {
      get { return changeControlPointAttachment_; }
      set {
        changeControlPointAttachment_ = value;
      }
    }

    /// <summary>Field number for the "update_entity_position" field.</summary>
    public const int UpdateEntityPositionFieldNumber = 17;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateEntityPosition updateEntityPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateEntityPosition UpdateEntityPosition {
      get { return updateEntityPosition_; }
      set {
        updateEntityPosition_ = value;
      }
    }

    /// <summary>Field number for the "set_particle_fow_properties" field.</summary>
    public const int SetParticleFowPropertiesFieldNumber = 18;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleFoWProperties setParticleFowProperties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleFoWProperties SetParticleFowProperties {
      get { return setParticleFowProperties_; }
      set {
        setParticleFowProperties_ = value;
      }
    }

    /// <summary>Field number for the "set_particle_text" field.</summary>
    public const int SetParticleTextFieldNumber = 19;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleText setParticleText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleText SetParticleText {
      get { return setParticleText_; }
      set {
        setParticleText_ = value;
      }
    }

    /// <summary>Field number for the "set_particle_should_check_fow" field.</summary>
    public const int SetParticleShouldCheckFowFieldNumber = 20;
    private global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleShouldCheckFoW setParticleShouldCheckFow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleShouldCheckFoW SetParticleShouldCheckFow {
      get { return setParticleShouldCheckFow_; }
      set {
        setParticleShouldCheckFow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ParticleManager);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ParticleManager other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Index != other.Index) return false;
      if (!object.Equals(ReleaseParticleIndex, other.ReleaseParticleIndex)) return false;
      if (!object.Equals(CreateParticle, other.CreateParticle)) return false;
      if (!object.Equals(DestroyParticle, other.DestroyParticle)) return false;
      if (!object.Equals(DestroyParticleInvolving, other.DestroyParticleInvolving)) return false;
      if (!object.Equals(UpdateParticle, other.UpdateParticle)) return false;
      if (!object.Equals(UpdateParticleFwd, other.UpdateParticleFwd)) return false;
      if (!object.Equals(UpdateParticleOrient, other.UpdateParticleOrient)) return false;
      if (!object.Equals(UpdateParticleFallback, other.UpdateParticleFallback)) return false;
      if (!object.Equals(UpdateParticleOffset, other.UpdateParticleOffset)) return false;
      if (!object.Equals(UpdateParticleEnt, other.UpdateParticleEnt)) return false;
      if (!object.Equals(UpdateParticleShouldDraw, other.UpdateParticleShouldDraw)) return false;
      if (!object.Equals(UpdateParticleSetFrozen, other.UpdateParticleSetFrozen)) return false;
      if (!object.Equals(ChangeControlPointAttachment, other.ChangeControlPointAttachment)) return false;
      if (!object.Equals(UpdateEntityPosition, other.UpdateEntityPosition)) return false;
      if (!object.Equals(SetParticleFowProperties, other.SetParticleFowProperties)) return false;
      if (!object.Equals(SetParticleText, other.SetParticleText)) return false;
      if (!object.Equals(SetParticleShouldCheckFow, other.SetParticleShouldCheckFow)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (releaseParticleIndex_ != null) hash ^= ReleaseParticleIndex.GetHashCode();
      if (createParticle_ != null) hash ^= CreateParticle.GetHashCode();
      if (destroyParticle_ != null) hash ^= DestroyParticle.GetHashCode();
      if (destroyParticleInvolving_ != null) hash ^= DestroyParticleInvolving.GetHashCode();
      if (updateParticle_ != null) hash ^= UpdateParticle.GetHashCode();
      if (updateParticleFwd_ != null) hash ^= UpdateParticleFwd.GetHashCode();
      if (updateParticleOrient_ != null) hash ^= UpdateParticleOrient.GetHashCode();
      if (updateParticleFallback_ != null) hash ^= UpdateParticleFallback.GetHashCode();
      if (updateParticleOffset_ != null) hash ^= UpdateParticleOffset.GetHashCode();
      if (updateParticleEnt_ != null) hash ^= UpdateParticleEnt.GetHashCode();
      if (updateParticleShouldDraw_ != null) hash ^= UpdateParticleShouldDraw.GetHashCode();
      if (updateParticleSetFrozen_ != null) hash ^= UpdateParticleSetFrozen.GetHashCode();
      if (changeControlPointAttachment_ != null) hash ^= ChangeControlPointAttachment.GetHashCode();
      if (updateEntityPosition_ != null) hash ^= UpdateEntityPosition.GetHashCode();
      if (setParticleFowProperties_ != null) hash ^= SetParticleFowProperties.GetHashCode();
      if (setParticleText_ != null) hash ^= SetParticleText.GetHashCode();
      if (setParticleShouldCheckFow_ != null) hash ^= SetParticleShouldCheckFow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (releaseParticleIndex_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReleaseParticleIndex);
      }
      if (createParticle_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateParticle);
      }
      if (destroyParticle_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DestroyParticle);
      }
      if (destroyParticleInvolving_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DestroyParticleInvolving);
      }
      if (updateParticle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdateParticle);
      }
      if (updateParticleFwd_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UpdateParticleFwd);
      }
      if (updateParticleOrient_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdateParticleOrient);
      }
      if (updateParticleFallback_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateParticleFallback);
      }
      if (updateParticleOffset_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(UpdateParticleOffset);
      }
      if (updateParticleEnt_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(UpdateParticleEnt);
      }
      if (updateParticleShouldDraw_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UpdateParticleShouldDraw);
      }
      if (updateParticleSetFrozen_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UpdateParticleSetFrozen);
      }
      if (changeControlPointAttachment_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ChangeControlPointAttachment);
      }
      if (updateEntityPosition_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(UpdateEntityPosition);
      }
      if (setParticleFowProperties_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SetParticleFowProperties);
      }
      if (setParticleText_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SetParticleText);
      }
      if (setParticleShouldCheckFow_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SetParticleShouldCheckFow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (releaseParticleIndex_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReleaseParticleIndex);
      }
      if (createParticle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateParticle);
      }
      if (destroyParticle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyParticle);
      }
      if (destroyParticleInvolving_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyParticleInvolving);
      }
      if (updateParticle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticle);
      }
      if (updateParticleFwd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticleFwd);
      }
      if (updateParticleOrient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticleOrient);
      }
      if (updateParticleFallback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticleFallback);
      }
      if (updateParticleOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticleOffset);
      }
      if (updateParticleEnt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticleEnt);
      }
      if (updateParticleShouldDraw_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticleShouldDraw);
      }
      if (updateParticleSetFrozen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParticleSetFrozen);
      }
      if (changeControlPointAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChangeControlPointAttachment);
      }
      if (updateEntityPosition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateEntityPosition);
      }
      if (setParticleFowProperties_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetParticleFowProperties);
      }
      if (setParticleText_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetParticleText);
      }
      if (setParticleShouldCheckFow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetParticleShouldCheckFow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ParticleManager other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.releaseParticleIndex_ != null) {
        if (releaseParticleIndex_ == null) {
          releaseParticleIndex_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ReleaseParticleIndex();
        }
        ReleaseParticleIndex.MergeFrom(other.ReleaseParticleIndex);
      }
      if (other.createParticle_ != null) {
        if (createParticle_ == null) {
          createParticle_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.CreateParticle();
        }
        CreateParticle.MergeFrom(other.CreateParticle);
      }
      if (other.destroyParticle_ != null) {
        if (destroyParticle_ == null) {
          destroyParticle_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticle();
        }
        DestroyParticle.MergeFrom(other.DestroyParticle);
      }
      if (other.destroyParticleInvolving_ != null) {
        if (destroyParticleInvolving_ == null) {
          destroyParticleInvolving_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticleInvolving();
        }
        DestroyParticleInvolving.MergeFrom(other.DestroyParticleInvolving);
      }
      if (other.updateParticle_ != null) {
        if (updateParticle_ == null) {
          updateParticle_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticle();
        }
        UpdateParticle.MergeFrom(other.UpdateParticle);
      }
      if (other.updateParticleFwd_ != null) {
        if (updateParticleFwd_ == null) {
          updateParticleFwd_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFwd();
        }
        UpdateParticleFwd.MergeFrom(other.UpdateParticleFwd);
      }
      if (other.updateParticleOrient_ != null) {
        if (updateParticleOrient_ == null) {
          updateParticleOrient_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOrient();
        }
        UpdateParticleOrient.MergeFrom(other.UpdateParticleOrient);
      }
      if (other.updateParticleFallback_ != null) {
        if (updateParticleFallback_ == null) {
          updateParticleFallback_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFallback();
        }
        UpdateParticleFallback.MergeFrom(other.UpdateParticleFallback);
      }
      if (other.updateParticleOffset_ != null) {
        if (updateParticleOffset_ == null) {
          updateParticleOffset_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOffset();
        }
        UpdateParticleOffset.MergeFrom(other.UpdateParticleOffset);
      }
      if (other.updateParticleEnt_ != null) {
        if (updateParticleEnt_ == null) {
          updateParticleEnt_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleEnt();
        }
        UpdateParticleEnt.MergeFrom(other.UpdateParticleEnt);
      }
      if (other.updateParticleShouldDraw_ != null) {
        if (updateParticleShouldDraw_ == null) {
          updateParticleShouldDraw_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleShouldDraw();
        }
        UpdateParticleShouldDraw.MergeFrom(other.UpdateParticleShouldDraw);
      }
      if (other.updateParticleSetFrozen_ != null) {
        if (updateParticleSetFrozen_ == null) {
          updateParticleSetFrozen_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleSetFrozen();
        }
        UpdateParticleSetFrozen.MergeFrom(other.UpdateParticleSetFrozen);
      }
      if (other.changeControlPointAttachment_ != null) {
        if (changeControlPointAttachment_ == null) {
          changeControlPointAttachment_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ChangeControlPointAttachment();
        }
        ChangeControlPointAttachment.MergeFrom(other.ChangeControlPointAttachment);
      }
      if (other.updateEntityPosition_ != null) {
        if (updateEntityPosition_ == null) {
          updateEntityPosition_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateEntityPosition();
        }
        UpdateEntityPosition.MergeFrom(other.UpdateEntityPosition);
      }
      if (other.setParticleFowProperties_ != null) {
        if (setParticleFowProperties_ == null) {
          setParticleFowProperties_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleFoWProperties();
        }
        SetParticleFowProperties.MergeFrom(other.SetParticleFowProperties);
      }
      if (other.setParticleText_ != null) {
        if (setParticleText_ == null) {
          setParticleText_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleText();
        }
        SetParticleText.MergeFrom(other.SetParticleText);
      }
      if (other.setParticleShouldCheckFow_ != null) {
        if (setParticleShouldCheckFow_ == null) {
          setParticleShouldCheckFow_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleShouldCheckFoW();
        }
        SetParticleShouldCheckFow.MergeFrom(other.SetParticleShouldCheckFow);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Proto.Dota.DOTA_PARTICLE_MESSAGE) input.ReadEnum();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 26: {
            if (releaseParticleIndex_ == null) {
              releaseParticleIndex_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ReleaseParticleIndex();
            }
            input.ReadMessage(releaseParticleIndex_);
            break;
          }
          case 34: {
            if (createParticle_ == null) {
              createParticle_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.CreateParticle();
            }
            input.ReadMessage(createParticle_);
            break;
          }
          case 42: {
            if (destroyParticle_ == null) {
              destroyParticle_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticle();
            }
            input.ReadMessage(destroyParticle_);
            break;
          }
          case 50: {
            if (destroyParticleInvolving_ == null) {
              destroyParticleInvolving_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.DestroyParticleInvolving();
            }
            input.ReadMessage(destroyParticleInvolving_);
            break;
          }
          case 58: {
            if (updateParticle_ == null) {
              updateParticle_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticle();
            }
            input.ReadMessage(updateParticle_);
            break;
          }
          case 66: {
            if (updateParticleFwd_ == null) {
              updateParticleFwd_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFwd();
            }
            input.ReadMessage(updateParticleFwd_);
            break;
          }
          case 74: {
            if (updateParticleOrient_ == null) {
              updateParticleOrient_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOrient();
            }
            input.ReadMessage(updateParticleOrient_);
            break;
          }
          case 82: {
            if (updateParticleFallback_ == null) {
              updateParticleFallback_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleFallback();
            }
            input.ReadMessage(updateParticleFallback_);
            break;
          }
          case 90: {
            if (updateParticleOffset_ == null) {
              updateParticleOffset_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleOffset();
            }
            input.ReadMessage(updateParticleOffset_);
            break;
          }
          case 98: {
            if (updateParticleEnt_ == null) {
              updateParticleEnt_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleEnt();
            }
            input.ReadMessage(updateParticleEnt_);
            break;
          }
          case 114: {
            if (updateParticleShouldDraw_ == null) {
              updateParticleShouldDraw_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleShouldDraw();
            }
            input.ReadMessage(updateParticleShouldDraw_);
            break;
          }
          case 122: {
            if (updateParticleSetFrozen_ == null) {
              updateParticleSetFrozen_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateParticleSetFrozen();
            }
            input.ReadMessage(updateParticleSetFrozen_);
            break;
          }
          case 130: {
            if (changeControlPointAttachment_ == null) {
              changeControlPointAttachment_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.ChangeControlPointAttachment();
            }
            input.ReadMessage(changeControlPointAttachment_);
            break;
          }
          case 138: {
            if (updateEntityPosition_ == null) {
              updateEntityPosition_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.UpdateEntityPosition();
            }
            input.ReadMessage(updateEntityPosition_);
            break;
          }
          case 146: {
            if (setParticleFowProperties_ == null) {
              setParticleFowProperties_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleFoWProperties();
            }
            input.ReadMessage(setParticleFowProperties_);
            break;
          }
          case 154: {
            if (setParticleText_ == null) {
              setParticleText_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleText();
            }
            input.ReadMessage(setParticleText_);
            break;
          }
          case 162: {
            if (setParticleShouldCheckFow_ == null) {
              setParticleShouldCheckFow_ = new global::Proto.Dota.CDOTAUserMsg_ParticleManager.Types.SetParticleShouldCheckFoW();
            }
            input.ReadMessage(setParticleShouldCheckFow_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_ParticleManager message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ReleaseParticleIndex : pb::IMessage<ReleaseParticleIndex> {
        private static readonly pb::MessageParser<ReleaseParticleIndex> _parser = new pb::MessageParser<ReleaseParticleIndex>(() => new ReleaseParticleIndex());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReleaseParticleIndex> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReleaseParticleIndex() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReleaseParticleIndex(ReleaseParticleIndex other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReleaseParticleIndex Clone() {
          return new ReleaseParticleIndex(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReleaseParticleIndex);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReleaseParticleIndex other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReleaseParticleIndex other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class CreateParticle : pb::IMessage<CreateParticle> {
        private static readonly pb::MessageParser<CreateParticle> _parser = new pb::MessageParser<CreateParticle>(() => new CreateParticle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateParticle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateParticle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateParticle(CreateParticle other) : this() {
          particleNameIndex_ = other.particleNameIndex_;
          attachType_ = other.attachType_;
          entityHandle_ = other.entityHandle_;
          entityHandleForModifiers_ = other.entityHandleForModifiers_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateParticle Clone() {
          return new CreateParticle(this);
        }

        /// <summary>Field number for the "particle_name_index" field.</summary>
        public const int ParticleNameIndexFieldNumber = 1;
        private ulong particleNameIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ParticleNameIndex {
          get { return particleNameIndex_; }
          set {
            particleNameIndex_ = value;
          }
        }

        /// <summary>Field number for the "attach_type" field.</summary>
        public const int AttachTypeFieldNumber = 2;
        private int attachType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttachType {
          get { return attachType_; }
          set {
            attachType_ = value;
          }
        }

        /// <summary>Field number for the "entity_handle" field.</summary>
        public const int EntityHandleFieldNumber = 3;
        private int entityHandle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntityHandle {
          get { return entityHandle_; }
          set {
            entityHandle_ = value;
          }
        }

        /// <summary>Field number for the "entity_handle_for_modifiers" field.</summary>
        public const int EntityHandleForModifiersFieldNumber = 4;
        private int entityHandleForModifiers_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntityHandleForModifiers {
          get { return entityHandleForModifiers_; }
          set {
            entityHandleForModifiers_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CreateParticle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateParticle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ParticleNameIndex != other.ParticleNameIndex) return false;
          if (AttachType != other.AttachType) return false;
          if (EntityHandle != other.EntityHandle) return false;
          if (EntityHandleForModifiers != other.EntityHandleForModifiers) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ParticleNameIndex != 0UL) hash ^= ParticleNameIndex.GetHashCode();
          if (AttachType != 0) hash ^= AttachType.GetHashCode();
          if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
          if (EntityHandleForModifiers != 0) hash ^= EntityHandleForModifiers.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ParticleNameIndex != 0UL) {
            output.WriteRawTag(9);
            output.WriteFixed64(ParticleNameIndex);
          }
          if (AttachType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AttachType);
          }
          if (EntityHandle != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EntityHandle);
          }
          if (EntityHandleForModifiers != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(EntityHandleForModifiers);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ParticleNameIndex != 0UL) {
            size += 1 + 8;
          }
          if (AttachType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachType);
          }
          if (EntityHandle != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
          }
          if (EntityHandleForModifiers != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandleForModifiers);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateParticle other) {
          if (other == null) {
            return;
          }
          if (other.ParticleNameIndex != 0UL) {
            ParticleNameIndex = other.ParticleNameIndex;
          }
          if (other.AttachType != 0) {
            AttachType = other.AttachType;
          }
          if (other.EntityHandle != 0) {
            EntityHandle = other.EntityHandle;
          }
          if (other.EntityHandleForModifiers != 0) {
            EntityHandleForModifiers = other.EntityHandleForModifiers;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                ParticleNameIndex = input.ReadFixed64();
                break;
              }
              case 16: {
                AttachType = input.ReadInt32();
                break;
              }
              case 24: {
                EntityHandle = input.ReadInt32();
                break;
              }
              case 32: {
                EntityHandleForModifiers = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DestroyParticle : pb::IMessage<DestroyParticle> {
        private static readonly pb::MessageParser<DestroyParticle> _parser = new pb::MessageParser<DestroyParticle>(() => new DestroyParticle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DestroyParticle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyParticle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyParticle(DestroyParticle other) : this() {
          destroyImmediately_ = other.destroyImmediately_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyParticle Clone() {
          return new DestroyParticle(this);
        }

        /// <summary>Field number for the "destroy_immediately" field.</summary>
        public const int DestroyImmediatelyFieldNumber = 1;
        private bool destroyImmediately_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DestroyImmediately {
          get { return destroyImmediately_; }
          set {
            destroyImmediately_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DestroyParticle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DestroyParticle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DestroyImmediately != other.DestroyImmediately) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DestroyImmediately != false) hash ^= DestroyImmediately.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DestroyImmediately != false) {
            output.WriteRawTag(8);
            output.WriteBool(DestroyImmediately);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DestroyImmediately != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DestroyParticle other) {
          if (other == null) {
            return;
          }
          if (other.DestroyImmediately != false) {
            DestroyImmediately = other.DestroyImmediately;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DestroyImmediately = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DestroyParticleInvolving : pb::IMessage<DestroyParticleInvolving> {
        private static readonly pb::MessageParser<DestroyParticleInvolving> _parser = new pb::MessageParser<DestroyParticleInvolving>(() => new DestroyParticleInvolving());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DestroyParticleInvolving> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyParticleInvolving() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyParticleInvolving(DestroyParticleInvolving other) : this() {
          destroyImmediately_ = other.destroyImmediately_;
          entityHandle_ = other.entityHandle_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyParticleInvolving Clone() {
          return new DestroyParticleInvolving(this);
        }

        /// <summary>Field number for the "destroy_immediately" field.</summary>
        public const int DestroyImmediatelyFieldNumber = 1;
        private bool destroyImmediately_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DestroyImmediately {
          get { return destroyImmediately_; }
          set {
            destroyImmediately_ = value;
          }
        }

        /// <summary>Field number for the "entity_handle" field.</summary>
        public const int EntityHandleFieldNumber = 3;
        private int entityHandle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntityHandle {
          get { return entityHandle_; }
          set {
            entityHandle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DestroyParticleInvolving);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DestroyParticleInvolving other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DestroyImmediately != other.DestroyImmediately) return false;
          if (EntityHandle != other.EntityHandle) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DestroyImmediately != false) hash ^= DestroyImmediately.GetHashCode();
          if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DestroyImmediately != false) {
            output.WriteRawTag(8);
            output.WriteBool(DestroyImmediately);
          }
          if (EntityHandle != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EntityHandle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DestroyImmediately != false) {
            size += 1 + 1;
          }
          if (EntityHandle != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DestroyParticleInvolving other) {
          if (other == null) {
            return;
          }
          if (other.DestroyImmediately != false) {
            DestroyImmediately = other.DestroyImmediately;
          }
          if (other.EntityHandle != 0) {
            EntityHandle = other.EntityHandle;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DestroyImmediately = input.ReadBool();
                break;
              }
              case 24: {
                EntityHandle = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticle : pb::IMessage<UpdateParticle> {
        private static readonly pb::MessageParser<UpdateParticle> _parser = new pb::MessageParser<UpdateParticle>(() => new UpdateParticle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticle(UpdateParticle other) : this() {
          controlPoint_ = other.controlPoint_;
          position_ = other.position_ != null ? other.position_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticle Clone() {
          return new UpdateParticle(this);
        }

        /// <summary>Field number for the "control_point" field.</summary>
        public const int ControlPointFieldNumber = 1;
        private int controlPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlPoint {
          get { return controlPoint_; }
          set {
            controlPoint_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private global::Proto.Dota.CMsgVector position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ControlPoint != other.ControlPoint) return false;
          if (!object.Equals(Position, other.Position)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ControlPoint != 0) hash ^= ControlPoint.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ControlPoint != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ControlPoint);
          }
          if (position_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ControlPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticle other) {
          if (other == null) {
            return;
          }
          if (other.ControlPoint != 0) {
            ControlPoint = other.ControlPoint;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              position_ = new global::Proto.Dota.CMsgVector();
            }
            Position.MergeFrom(other.Position);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ControlPoint = input.ReadInt32();
                break;
              }
              case 18: {
                if (position_ == null) {
                  position_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(position_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticleFwd : pb::IMessage<UpdateParticleFwd> {
        private static readonly pb::MessageParser<UpdateParticleFwd> _parser = new pb::MessageParser<UpdateParticleFwd>(() => new UpdateParticleFwd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticleFwd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleFwd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleFwd(UpdateParticleFwd other) : this() {
          controlPoint_ = other.controlPoint_;
          forward_ = other.forward_ != null ? other.forward_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleFwd Clone() {
          return new UpdateParticleFwd(this);
        }

        /// <summary>Field number for the "control_point" field.</summary>
        public const int ControlPointFieldNumber = 1;
        private int controlPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlPoint {
          get { return controlPoint_; }
          set {
            controlPoint_ = value;
          }
        }

        /// <summary>Field number for the "forward" field.</summary>
        public const int ForwardFieldNumber = 2;
        private global::Proto.Dota.CMsgVector forward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Forward {
          get { return forward_; }
          set {
            forward_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticleFwd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticleFwd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ControlPoint != other.ControlPoint) return false;
          if (!object.Equals(Forward, other.Forward)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ControlPoint != 0) hash ^= ControlPoint.GetHashCode();
          if (forward_ != null) hash ^= Forward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ControlPoint != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ControlPoint);
          }
          if (forward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Forward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ControlPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
          }
          if (forward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticleFwd other) {
          if (other == null) {
            return;
          }
          if (other.ControlPoint != 0) {
            ControlPoint = other.ControlPoint;
          }
          if (other.forward_ != null) {
            if (forward_ == null) {
              forward_ = new global::Proto.Dota.CMsgVector();
            }
            Forward.MergeFrom(other.Forward);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ControlPoint = input.ReadInt32();
                break;
              }
              case 18: {
                if (forward_ == null) {
                  forward_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(forward_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticleOrient : pb::IMessage<UpdateParticleOrient> {
        private static readonly pb::MessageParser<UpdateParticleOrient> _parser = new pb::MessageParser<UpdateParticleOrient>(() => new UpdateParticleOrient());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticleOrient> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleOrient() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleOrient(UpdateParticleOrient other) : this() {
          controlPoint_ = other.controlPoint_;
          forward_ = other.forward_ != null ? other.forward_.Clone() : null;
          right_ = other.right_ != null ? other.right_.Clone() : null;
          up_ = other.up_ != null ? other.up_.Clone() : null;
          left_ = other.left_ != null ? other.left_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleOrient Clone() {
          return new UpdateParticleOrient(this);
        }

        /// <summary>Field number for the "control_point" field.</summary>
        public const int ControlPointFieldNumber = 1;
        private int controlPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlPoint {
          get { return controlPoint_; }
          set {
            controlPoint_ = value;
          }
        }

        /// <summary>Field number for the "forward" field.</summary>
        public const int ForwardFieldNumber = 2;
        private global::Proto.Dota.CMsgVector forward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Forward {
          get { return forward_; }
          set {
            forward_ = value;
          }
        }

        /// <summary>Field number for the "right" field.</summary>
        public const int RightFieldNumber = 3;
        private global::Proto.Dota.CMsgVector right_;
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Right {
          get { return right_; }
          set {
            right_ = value;
          }
        }

        /// <summary>Field number for the "up" field.</summary>
        public const int UpFieldNumber = 4;
        private global::Proto.Dota.CMsgVector up_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Up {
          get { return up_; }
          set {
            up_ = value;
          }
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 5;
        private global::Proto.Dota.CMsgVector left_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticleOrient);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticleOrient other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ControlPoint != other.ControlPoint) return false;
          if (!object.Equals(Forward, other.Forward)) return false;
          if (!object.Equals(Right, other.Right)) return false;
          if (!object.Equals(Up, other.Up)) return false;
          if (!object.Equals(Left, other.Left)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ControlPoint != 0) hash ^= ControlPoint.GetHashCode();
          if (forward_ != null) hash ^= Forward.GetHashCode();
          if (right_ != null) hash ^= Right.GetHashCode();
          if (up_ != null) hash ^= Up.GetHashCode();
          if (left_ != null) hash ^= Left.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ControlPoint != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ControlPoint);
          }
          if (forward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Forward);
          }
          if (right_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Right);
          }
          if (up_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Up);
          }
          if (left_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Left);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ControlPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
          }
          if (forward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
          }
          if (right_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
          }
          if (up_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Up);
          }
          if (left_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticleOrient other) {
          if (other == null) {
            return;
          }
          if (other.ControlPoint != 0) {
            ControlPoint = other.ControlPoint;
          }
          if (other.forward_ != null) {
            if (forward_ == null) {
              forward_ = new global::Proto.Dota.CMsgVector();
            }
            Forward.MergeFrom(other.Forward);
          }
          if (other.right_ != null) {
            if (right_ == null) {
              right_ = new global::Proto.Dota.CMsgVector();
            }
            Right.MergeFrom(other.Right);
          }
          if (other.up_ != null) {
            if (up_ == null) {
              up_ = new global::Proto.Dota.CMsgVector();
            }
            Up.MergeFrom(other.Up);
          }
          if (other.left_ != null) {
            if (left_ == null) {
              left_ = new global::Proto.Dota.CMsgVector();
            }
            Left.MergeFrom(other.Left);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ControlPoint = input.ReadInt32();
                break;
              }
              case 18: {
                if (forward_ == null) {
                  forward_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(forward_);
                break;
              }
              case 26: {
                if (right_ == null) {
                  right_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(right_);
                break;
              }
              case 34: {
                if (up_ == null) {
                  up_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(up_);
                break;
              }
              case 42: {
                if (left_ == null) {
                  left_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(left_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticleFallback : pb::IMessage<UpdateParticleFallback> {
        private static readonly pb::MessageParser<UpdateParticleFallback> _parser = new pb::MessageParser<UpdateParticleFallback>(() => new UpdateParticleFallback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticleFallback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleFallback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleFallback(UpdateParticleFallback other) : this() {
          controlPoint_ = other.controlPoint_;
          position_ = other.position_ != null ? other.position_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleFallback Clone() {
          return new UpdateParticleFallback(this);
        }

        /// <summary>Field number for the "control_point" field.</summary>
        public const int ControlPointFieldNumber = 1;
        private int controlPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlPoint {
          get { return controlPoint_; }
          set {
            controlPoint_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private global::Proto.Dota.CMsgVector position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticleFallback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticleFallback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ControlPoint != other.ControlPoint) return false;
          if (!object.Equals(Position, other.Position)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ControlPoint != 0) hash ^= ControlPoint.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ControlPoint != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ControlPoint);
          }
          if (position_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ControlPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticleFallback other) {
          if (other == null) {
            return;
          }
          if (other.ControlPoint != 0) {
            ControlPoint = other.ControlPoint;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              position_ = new global::Proto.Dota.CMsgVector();
            }
            Position.MergeFrom(other.Position);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ControlPoint = input.ReadInt32();
                break;
              }
              case 18: {
                if (position_ == null) {
                  position_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(position_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticleOffset : pb::IMessage<UpdateParticleOffset> {
        private static readonly pb::MessageParser<UpdateParticleOffset> _parser = new pb::MessageParser<UpdateParticleOffset>(() => new UpdateParticleOffset());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticleOffset> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleOffset() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleOffset(UpdateParticleOffset other) : this() {
          controlPoint_ = other.controlPoint_;
          originOffset_ = other.originOffset_ != null ? other.originOffset_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleOffset Clone() {
          return new UpdateParticleOffset(this);
        }

        /// <summary>Field number for the "control_point" field.</summary>
        public const int ControlPointFieldNumber = 1;
        private int controlPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlPoint {
          get { return controlPoint_; }
          set {
            controlPoint_ = value;
          }
        }

        /// <summary>Field number for the "origin_offset" field.</summary>
        public const int OriginOffsetFieldNumber = 2;
        private global::Proto.Dota.CMsgVector originOffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector OriginOffset {
          get { return originOffset_; }
          set {
            originOffset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticleOffset);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticleOffset other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ControlPoint != other.ControlPoint) return false;
          if (!object.Equals(OriginOffset, other.OriginOffset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ControlPoint != 0) hash ^= ControlPoint.GetHashCode();
          if (originOffset_ != null) hash ^= OriginOffset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ControlPoint != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ControlPoint);
          }
          if (originOffset_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(OriginOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ControlPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
          }
          if (originOffset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginOffset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticleOffset other) {
          if (other == null) {
            return;
          }
          if (other.ControlPoint != 0) {
            ControlPoint = other.ControlPoint;
          }
          if (other.originOffset_ != null) {
            if (originOffset_ == null) {
              originOffset_ = new global::Proto.Dota.CMsgVector();
            }
            OriginOffset.MergeFrom(other.OriginOffset);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ControlPoint = input.ReadInt32();
                break;
              }
              case 18: {
                if (originOffset_ == null) {
                  originOffset_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(originOffset_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticleEnt : pb::IMessage<UpdateParticleEnt> {
        private static readonly pb::MessageParser<UpdateParticleEnt> _parser = new pb::MessageParser<UpdateParticleEnt>(() => new UpdateParticleEnt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticleEnt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleEnt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleEnt(UpdateParticleEnt other) : this() {
          controlPoint_ = other.controlPoint_;
          entityHandle_ = other.entityHandle_;
          attachType_ = other.attachType_;
          attachment_ = other.attachment_;
          fallbackPosition_ = other.fallbackPosition_ != null ? other.fallbackPosition_.Clone() : null;
          includeWearables_ = other.includeWearables_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleEnt Clone() {
          return new UpdateParticleEnt(this);
        }

        /// <summary>Field number for the "control_point" field.</summary>
        public const int ControlPointFieldNumber = 1;
        private int controlPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlPoint {
          get { return controlPoint_; }
          set {
            controlPoint_ = value;
          }
        }

        /// <summary>Field number for the "entity_handle" field.</summary>
        public const int EntityHandleFieldNumber = 2;
        private int entityHandle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntityHandle {
          get { return entityHandle_; }
          set {
            entityHandle_ = value;
          }
        }

        /// <summary>Field number for the "attach_type" field.</summary>
        public const int AttachTypeFieldNumber = 3;
        private int attachType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttachType {
          get { return attachType_; }
          set {
            attachType_ = value;
          }
        }

        /// <summary>Field number for the "attachment" field.</summary>
        public const int AttachmentFieldNumber = 4;
        private int attachment_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Attachment {
          get { return attachment_; }
          set {
            attachment_ = value;
          }
        }

        /// <summary>Field number for the "fallback_position" field.</summary>
        public const int FallbackPositionFieldNumber = 5;
        private global::Proto.Dota.CMsgVector fallbackPosition_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector FallbackPosition {
          get { return fallbackPosition_; }
          set {
            fallbackPosition_ = value;
          }
        }

        /// <summary>Field number for the "include_wearables" field.</summary>
        public const int IncludeWearablesFieldNumber = 6;
        private bool includeWearables_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IncludeWearables {
          get { return includeWearables_; }
          set {
            includeWearables_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticleEnt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticleEnt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ControlPoint != other.ControlPoint) return false;
          if (EntityHandle != other.EntityHandle) return false;
          if (AttachType != other.AttachType) return false;
          if (Attachment != other.Attachment) return false;
          if (!object.Equals(FallbackPosition, other.FallbackPosition)) return false;
          if (IncludeWearables != other.IncludeWearables) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ControlPoint != 0) hash ^= ControlPoint.GetHashCode();
          if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
          if (AttachType != 0) hash ^= AttachType.GetHashCode();
          if (Attachment != 0) hash ^= Attachment.GetHashCode();
          if (fallbackPosition_ != null) hash ^= FallbackPosition.GetHashCode();
          if (IncludeWearables != false) hash ^= IncludeWearables.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ControlPoint != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ControlPoint);
          }
          if (EntityHandle != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(EntityHandle);
          }
          if (AttachType != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(AttachType);
          }
          if (Attachment != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Attachment);
          }
          if (fallbackPosition_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(FallbackPosition);
          }
          if (IncludeWearables != false) {
            output.WriteRawTag(48);
            output.WriteBool(IncludeWearables);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ControlPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
          }
          if (EntityHandle != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
          }
          if (AttachType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachType);
          }
          if (Attachment != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attachment);
          }
          if (fallbackPosition_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FallbackPosition);
          }
          if (IncludeWearables != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticleEnt other) {
          if (other == null) {
            return;
          }
          if (other.ControlPoint != 0) {
            ControlPoint = other.ControlPoint;
          }
          if (other.EntityHandle != 0) {
            EntityHandle = other.EntityHandle;
          }
          if (other.AttachType != 0) {
            AttachType = other.AttachType;
          }
          if (other.Attachment != 0) {
            Attachment = other.Attachment;
          }
          if (other.fallbackPosition_ != null) {
            if (fallbackPosition_ == null) {
              fallbackPosition_ = new global::Proto.Dota.CMsgVector();
            }
            FallbackPosition.MergeFrom(other.FallbackPosition);
          }
          if (other.IncludeWearables != false) {
            IncludeWearables = other.IncludeWearables;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ControlPoint = input.ReadInt32();
                break;
              }
              case 16: {
                EntityHandle = input.ReadInt32();
                break;
              }
              case 24: {
                AttachType = input.ReadInt32();
                break;
              }
              case 32: {
                Attachment = input.ReadInt32();
                break;
              }
              case 42: {
                if (fallbackPosition_ == null) {
                  fallbackPosition_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(fallbackPosition_);
                break;
              }
              case 48: {
                IncludeWearables = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticleSetFrozen : pb::IMessage<UpdateParticleSetFrozen> {
        private static readonly pb::MessageParser<UpdateParticleSetFrozen> _parser = new pb::MessageParser<UpdateParticleSetFrozen>(() => new UpdateParticleSetFrozen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticleSetFrozen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleSetFrozen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleSetFrozen(UpdateParticleSetFrozen other) : this() {
          setFrozen_ = other.setFrozen_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleSetFrozen Clone() {
          return new UpdateParticleSetFrozen(this);
        }

        /// <summary>Field number for the "set_frozen" field.</summary>
        public const int SetFrozenFieldNumber = 1;
        private bool setFrozen_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SetFrozen {
          get { return setFrozen_; }
          set {
            setFrozen_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticleSetFrozen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticleSetFrozen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SetFrozen != other.SetFrozen) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SetFrozen != false) hash ^= SetFrozen.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SetFrozen != false) {
            output.WriteRawTag(8);
            output.WriteBool(SetFrozen);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SetFrozen != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticleSetFrozen other) {
          if (other == null) {
            return;
          }
          if (other.SetFrozen != false) {
            SetFrozen = other.SetFrozen;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SetFrozen = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParticleShouldDraw : pb::IMessage<UpdateParticleShouldDraw> {
        private static readonly pb::MessageParser<UpdateParticleShouldDraw> _parser = new pb::MessageParser<UpdateParticleShouldDraw>(() => new UpdateParticleShouldDraw());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParticleShouldDraw> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleShouldDraw() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleShouldDraw(UpdateParticleShouldDraw other) : this() {
          shouldDraw_ = other.shouldDraw_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParticleShouldDraw Clone() {
          return new UpdateParticleShouldDraw(this);
        }

        /// <summary>Field number for the "should_draw" field.</summary>
        public const int ShouldDrawFieldNumber = 1;
        private bool shouldDraw_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ShouldDraw {
          get { return shouldDraw_; }
          set {
            shouldDraw_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParticleShouldDraw);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParticleShouldDraw other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ShouldDraw != other.ShouldDraw) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ShouldDraw != false) hash ^= ShouldDraw.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ShouldDraw != false) {
            output.WriteRawTag(8);
            output.WriteBool(ShouldDraw);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ShouldDraw != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParticleShouldDraw other) {
          if (other == null) {
            return;
          }
          if (other.ShouldDraw != false) {
            ShouldDraw = other.ShouldDraw;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ShouldDraw = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ChangeControlPointAttachment : pb::IMessage<ChangeControlPointAttachment> {
        private static readonly pb::MessageParser<ChangeControlPointAttachment> _parser = new pb::MessageParser<ChangeControlPointAttachment>(() => new ChangeControlPointAttachment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChangeControlPointAttachment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChangeControlPointAttachment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChangeControlPointAttachment(ChangeControlPointAttachment other) : this() {
          attachmentOld_ = other.attachmentOld_;
          attachmentNew_ = other.attachmentNew_;
          entityHandle_ = other.entityHandle_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChangeControlPointAttachment Clone() {
          return new ChangeControlPointAttachment(this);
        }

        /// <summary>Field number for the "attachment_old" field.</summary>
        public const int AttachmentOldFieldNumber = 1;
        private int attachmentOld_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttachmentOld {
          get { return attachmentOld_; }
          set {
            attachmentOld_ = value;
          }
        }

        /// <summary>Field number for the "attachment_new" field.</summary>
        public const int AttachmentNewFieldNumber = 2;
        private int attachmentNew_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttachmentNew {
          get { return attachmentNew_; }
          set {
            attachmentNew_ = value;
          }
        }

        /// <summary>Field number for the "entity_handle" field.</summary>
        public const int EntityHandleFieldNumber = 3;
        private int entityHandle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntityHandle {
          get { return entityHandle_; }
          set {
            entityHandle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChangeControlPointAttachment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChangeControlPointAttachment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AttachmentOld != other.AttachmentOld) return false;
          if (AttachmentNew != other.AttachmentNew) return false;
          if (EntityHandle != other.EntityHandle) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AttachmentOld != 0) hash ^= AttachmentOld.GetHashCode();
          if (AttachmentNew != 0) hash ^= AttachmentNew.GetHashCode();
          if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AttachmentOld != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(AttachmentOld);
          }
          if (AttachmentNew != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AttachmentNew);
          }
          if (EntityHandle != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EntityHandle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AttachmentOld != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachmentOld);
          }
          if (AttachmentNew != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachmentNew);
          }
          if (EntityHandle != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChangeControlPointAttachment other) {
          if (other == null) {
            return;
          }
          if (other.AttachmentOld != 0) {
            AttachmentOld = other.AttachmentOld;
          }
          if (other.AttachmentNew != 0) {
            AttachmentNew = other.AttachmentNew;
          }
          if (other.EntityHandle != 0) {
            EntityHandle = other.EntityHandle;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AttachmentOld = input.ReadInt32();
                break;
              }
              case 16: {
                AttachmentNew = input.ReadInt32();
                break;
              }
              case 24: {
                EntityHandle = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateEntityPosition : pb::IMessage<UpdateEntityPosition> {
        private static readonly pb::MessageParser<UpdateEntityPosition> _parser = new pb::MessageParser<UpdateEntityPosition>(() => new UpdateEntityPosition());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateEntityPosition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateEntityPosition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateEntityPosition(UpdateEntityPosition other) : this() {
          entityHandle_ = other.entityHandle_;
          position_ = other.position_ != null ? other.position_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateEntityPosition Clone() {
          return new UpdateEntityPosition(this);
        }

        /// <summary>Field number for the "entity_handle" field.</summary>
        public const int EntityHandleFieldNumber = 1;
        private int entityHandle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntityHandle {
          get { return entityHandle_; }
          set {
            entityHandle_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private global::Proto.Dota.CMsgVector position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgVector Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateEntityPosition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateEntityPosition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EntityHandle != other.EntityHandle) return false;
          if (!object.Equals(Position, other.Position)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EntityHandle != 0) hash ^= EntityHandle.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EntityHandle != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(EntityHandle);
          }
          if (position_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EntityHandle != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityHandle);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateEntityPosition other) {
          if (other == null) {
            return;
          }
          if (other.EntityHandle != 0) {
            EntityHandle = other.EntityHandle;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              position_ = new global::Proto.Dota.CMsgVector();
            }
            Position.MergeFrom(other.Position);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EntityHandle = input.ReadInt32();
                break;
              }
              case 18: {
                if (position_ == null) {
                  position_ = new global::Proto.Dota.CMsgVector();
                }
                input.ReadMessage(position_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class SetParticleFoWProperties : pb::IMessage<SetParticleFoWProperties> {
        private static readonly pb::MessageParser<SetParticleFoWProperties> _parser = new pb::MessageParser<SetParticleFoWProperties>(() => new SetParticleFoWProperties());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetParticleFoWProperties> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleFoWProperties() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleFoWProperties(SetParticleFoWProperties other) : this() {
          fowControlPoint_ = other.fowControlPoint_;
          fowControlPoint2_ = other.fowControlPoint2_;
          fowRadius_ = other.fowRadius_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleFoWProperties Clone() {
          return new SetParticleFoWProperties(this);
        }

        /// <summary>Field number for the "fow_control_point" field.</summary>
        public const int FowControlPointFieldNumber = 1;
        private int fowControlPoint_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FowControlPoint {
          get { return fowControlPoint_; }
          set {
            fowControlPoint_ = value;
          }
        }

        /// <summary>Field number for the "fow_control_point2" field.</summary>
        public const int FowControlPoint2FieldNumber = 2;
        private int fowControlPoint2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FowControlPoint2 {
          get { return fowControlPoint2_; }
          set {
            fowControlPoint2_ = value;
          }
        }

        /// <summary>Field number for the "fow_radius" field.</summary>
        public const int FowRadiusFieldNumber = 3;
        private float fowRadius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FowRadius {
          get { return fowRadius_; }
          set {
            fowRadius_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SetParticleFoWProperties);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetParticleFoWProperties other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FowControlPoint != other.FowControlPoint) return false;
          if (FowControlPoint2 != other.FowControlPoint2) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FowRadius, other.FowRadius)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FowControlPoint != 0) hash ^= FowControlPoint.GetHashCode();
          if (FowControlPoint2 != 0) hash ^= FowControlPoint2.GetHashCode();
          if (FowRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FowRadius);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FowControlPoint != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(FowControlPoint);
          }
          if (FowControlPoint2 != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(FowControlPoint2);
          }
          if (FowRadius != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(FowRadius);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FowControlPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FowControlPoint);
          }
          if (FowControlPoint2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FowControlPoint2);
          }
          if (FowRadius != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetParticleFoWProperties other) {
          if (other == null) {
            return;
          }
          if (other.FowControlPoint != 0) {
            FowControlPoint = other.FowControlPoint;
          }
          if (other.FowControlPoint2 != 0) {
            FowControlPoint2 = other.FowControlPoint2;
          }
          if (other.FowRadius != 0F) {
            FowRadius = other.FowRadius;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FowControlPoint = input.ReadInt32();
                break;
              }
              case 16: {
                FowControlPoint2 = input.ReadInt32();
                break;
              }
              case 29: {
                FowRadius = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SetParticleShouldCheckFoW : pb::IMessage<SetParticleShouldCheckFoW> {
        private static readonly pb::MessageParser<SetParticleShouldCheckFoW> _parser = new pb::MessageParser<SetParticleShouldCheckFoW>(() => new SetParticleShouldCheckFoW());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetParticleShouldCheckFoW> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleShouldCheckFoW() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleShouldCheckFoW(SetParticleShouldCheckFoW other) : this() {
          checkFow_ = other.checkFow_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleShouldCheckFoW Clone() {
          return new SetParticleShouldCheckFoW(this);
        }

        /// <summary>Field number for the "check_fow" field.</summary>
        public const int CheckFowFieldNumber = 1;
        private bool checkFow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CheckFow {
          get { return checkFow_; }
          set {
            checkFow_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SetParticleShouldCheckFoW);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetParticleShouldCheckFoW other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CheckFow != other.CheckFow) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CheckFow != false) hash ^= CheckFow.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CheckFow != false) {
            output.WriteRawTag(8);
            output.WriteBool(CheckFow);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CheckFow != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetParticleShouldCheckFoW other) {
          if (other == null) {
            return;
          }
          if (other.CheckFow != false) {
            CheckFow = other.CheckFow;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CheckFow = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SetParticleText : pb::IMessage<SetParticleText> {
        private static readonly pb::MessageParser<SetParticleText> _parser = new pb::MessageParser<SetParticleText>(() => new SetParticleText());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetParticleText> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_ParticleManager.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleText() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleText(SetParticleText other) : this() {
          text_ = other.text_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetParticleText Clone() {
          return new SetParticleText(this);
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 1;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SetParticleText);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetParticleText other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Text != other.Text) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Text.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetParticleText other) {
          if (other == null) {
            return;
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_OverheadEvent : pb::IMessage<CDOTAUserMsg_OverheadEvent> {
    private static readonly pb::MessageParser<CDOTAUserMsg_OverheadEvent> _parser = new pb::MessageParser<CDOTAUserMsg_OverheadEvent>(() => new CDOTAUserMsg_OverheadEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_OverheadEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OverheadEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OverheadEvent(CDOTAUserMsg_OverheadEvent other) : this() {
      messageType_ = other.messageType_;
      value_ = other.value_;
      targetPlayerEntindex_ = other.targetPlayerEntindex_;
      targetEntindex_ = other.targetEntindex_;
      sourcePlayerEntindex_ = other.sourcePlayerEntindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OverheadEvent Clone() {
      return new CDOTAUserMsg_OverheadEvent(this);
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private global::Proto.Dota.DOTA_OVERHEAD_ALERT messageType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.DOTA_OVERHEAD_ALERT MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "target_player_entindex" field.</summary>
    public const int TargetPlayerEntindexFieldNumber = 3;
    private int targetPlayerEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerEntindex {
      get { return targetPlayerEntindex_; }
      set {
        targetPlayerEntindex_ = value;
      }
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 4;
    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { return targetEntindex_; }
      set {
        targetEntindex_ = value;
      }
    }

    /// <summary>Field number for the "source_player_entindex" field.</summary>
    public const int SourcePlayerEntindexFieldNumber = 5;
    private int sourcePlayerEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerEntindex {
      get { return sourcePlayerEntindex_; }
      set {
        sourcePlayerEntindex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_OverheadEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_OverheadEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (Value != other.Value) return false;
      if (TargetPlayerEntindex != other.TargetPlayerEntindex) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (SourcePlayerEntindex != other.SourcePlayerEntindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType != 0) hash ^= MessageType.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (TargetPlayerEntindex != 0) hash ^= TargetPlayerEntindex.GetHashCode();
      if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
      if (SourcePlayerEntindex != 0) hash ^= SourcePlayerEntindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (TargetPlayerEntindex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetPlayerEntindex);
      }
      if (TargetEntindex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetEntindex);
      }
      if (SourcePlayerEntindex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SourcePlayerEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (TargetPlayerEntindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerEntindex);
      }
      if (TargetEntindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (SourcePlayerEntindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerEntindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_OverheadEvent other) {
      if (other == null) {
        return;
      }
      if (other.MessageType != 0) {
        MessageType = other.MessageType;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.TargetPlayerEntindex != 0) {
        TargetPlayerEntindex = other.TargetPlayerEntindex;
      }
      if (other.TargetEntindex != 0) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.SourcePlayerEntindex != 0) {
        SourcePlayerEntindex = other.SourcePlayerEntindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            messageType_ = (global::Proto.Dota.DOTA_OVERHEAD_ALERT) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            TargetPlayerEntindex = input.ReadInt32();
            break;
          }
          case 32: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 40: {
            SourcePlayerEntindex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_WorldLine : pb::IMessage<CDOTAUserMsg_WorldLine> {
    private static readonly pb::MessageParser<CDOTAUserMsg_WorldLine> _parser = new pb::MessageParser<CDOTAUserMsg_WorldLine>(() => new CDOTAUserMsg_WorldLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_WorldLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WorldLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WorldLine(CDOTAUserMsg_WorldLine other) : this() {
      playerId_ = other.playerId_;
      worldline_ = other.worldline_ != null ? other.worldline_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WorldLine Clone() {
      return new CDOTAUserMsg_WorldLine(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "worldline" field.</summary>
    public const int WorldlineFieldNumber = 2;
    private global::Proto.Dota.CDOTAMsg_WorldLine worldline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAMsg_WorldLine Worldline {
      get { return worldline_; }
      set {
        worldline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_WorldLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_WorldLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Worldline, other.Worldline)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (worldline_ != null) hash ^= Worldline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (worldline_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Worldline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (worldline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worldline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_WorldLine other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.worldline_ != null) {
        if (worldline_ == null) {
          worldline_ = new global::Proto.Dota.CDOTAMsg_WorldLine();
        }
        Worldline.MergeFrom(other.Worldline);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (worldline_ == null) {
              worldline_ = new global::Proto.Dota.CDOTAMsg_WorldLine();
            }
            input.ReadMessage(worldline_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_ChatWheel : pb::IMessage<CDOTAUserMsg_ChatWheel> {
    private static readonly pb::MessageParser<CDOTAUserMsg_ChatWheel> _parser = new pb::MessageParser<CDOTAUserMsg_ChatWheel>(() => new CDOTAUserMsg_ChatWheel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ChatWheel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheel(CDOTAUserMsg_ChatWheel other) : this() {
      chatMessageId_ = other.chatMessageId_;
      playerId_ = other.playerId_;
      accountId_ = other.accountId_;
      paramHeroId_ = other.paramHeroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheel Clone() {
      return new CDOTAUserMsg_ChatWheel(this);
    }

    /// <summary>Field number for the "chat_message_id" field.</summary>
    public const int ChatMessageIdFieldNumber = 1;
    private uint chatMessageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatMessageId {
      get { return chatMessageId_; }
      set {
        chatMessageId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "param_hero_id" field.</summary>
    public const int ParamHeroIdFieldNumber = 4;
    private uint paramHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParamHeroId {
      get { return paramHeroId_; }
      set {
        paramHeroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ChatWheel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ChatWheel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatMessageId != other.ChatMessageId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (AccountId != other.AccountId) return false;
      if (ParamHeroId != other.ParamHeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatMessageId != 0) hash ^= ChatMessageId.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (ParamHeroId != 0) hash ^= ParamHeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatMessageId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChatMessageId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerId);
      }
      if (AccountId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AccountId);
      }
      if (ParamHeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ParamHeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatMessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatMessageId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (ParamHeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParamHeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ChatWheel other) {
      if (other == null) {
        return;
      }
      if (other.ChatMessageId != 0) {
        ChatMessageId = other.ChatMessageId;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.ParamHeroId != 0) {
        ParamHeroId = other.ParamHeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChatMessageId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 24: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 32: {
            ParamHeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_GamerulesStateChanged : pb::IMessage<CDOTAUserMsg_GamerulesStateChanged> {
    private static readonly pb::MessageParser<CDOTAUserMsg_GamerulesStateChanged> _parser = new pb::MessageParser<CDOTAUserMsg_GamerulesStateChanged>(() => new CDOTAUserMsg_GamerulesStateChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GamerulesStateChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GamerulesStateChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GamerulesStateChanged(CDOTAUserMsg_GamerulesStateChanged other) : this() {
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GamerulesStateChanged Clone() {
      return new CDOTAUserMsg_GamerulesStateChanged(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GamerulesStateChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GamerulesStateChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GamerulesStateChanged other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SendStatPopup : pb::IMessage<CDOTAUserMsg_SendStatPopup> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendStatPopup> _parser = new pb::MessageParser<CDOTAUserMsg_SendStatPopup>(() => new CDOTAUserMsg_SendStatPopup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendStatPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendStatPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendStatPopup(CDOTAUserMsg_SendStatPopup other) : this() {
      playerId_ = other.playerId_;
      statpopup_ = other.statpopup_ != null ? other.statpopup_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendStatPopup Clone() {
      return new CDOTAUserMsg_SendStatPopup(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "statpopup" field.</summary>
    public const int StatpopupFieldNumber = 2;
    private global::Proto.Dota.CDOTAMsg_SendStatPopup statpopup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAMsg_SendStatPopup Statpopup {
      get { return statpopup_; }
      set {
        statpopup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendStatPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendStatPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Statpopup, other.Statpopup)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (statpopup_ != null) hash ^= Statpopup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (statpopup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Statpopup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (statpopup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statpopup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendStatPopup other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.statpopup_ != null) {
        if (statpopup_ == null) {
          statpopup_ = new global::Proto.Dota.CDOTAMsg_SendStatPopup();
        }
        Statpopup.MergeFrom(other.Statpopup);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (statpopup_ == null) {
              statpopup_ = new global::Proto.Dota.CDOTAMsg_SendStatPopup();
            }
            input.ReadMessage(statpopup_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_DismissAllStatPopups : pb::IMessage<CDOTAUserMsg_DismissAllStatPopups> {
    private static readonly pb::MessageParser<CDOTAUserMsg_DismissAllStatPopups> _parser = new pb::MessageParser<CDOTAUserMsg_DismissAllStatPopups>(() => new CDOTAUserMsg_DismissAllStatPopups());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DismissAllStatPopups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DismissAllStatPopups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DismissAllStatPopups(CDOTAUserMsg_DismissAllStatPopups other) : this() {
      dismissallmsg_ = other.dismissallmsg_ != null ? other.dismissallmsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DismissAllStatPopups Clone() {
      return new CDOTAUserMsg_DismissAllStatPopups(this);
    }

    /// <summary>Field number for the "dismissallmsg" field.</summary>
    public const int DismissallmsgFieldNumber = 1;
    private global::Proto.Dota.CDOTAMsg_DismissAllStatPopups dismissallmsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAMsg_DismissAllStatPopups Dismissallmsg {
      get { return dismissallmsg_; }
      set {
        dismissallmsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DismissAllStatPopups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DismissAllStatPopups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dismissallmsg, other.Dismissallmsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dismissallmsg_ != null) hash ^= Dismissallmsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dismissallmsg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dismissallmsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dismissallmsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dismissallmsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DismissAllStatPopups other) {
      if (other == null) {
        return;
      }
      if (other.dismissallmsg_ != null) {
        if (dismissallmsg_ == null) {
          dismissallmsg_ = new global::Proto.Dota.CDOTAMsg_DismissAllStatPopups();
        }
        Dismissallmsg.MergeFrom(other.Dismissallmsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dismissallmsg_ == null) {
              dismissallmsg_ = new global::Proto.Dota.CDOTAMsg_DismissAllStatPopups();
            }
            input.ReadMessage(dismissallmsg_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SendRoshanSpectatorPhase : pb::IMessage<CDOTAUserMsg_SendRoshanSpectatorPhase> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendRoshanSpectatorPhase> _parser = new pb::MessageParser<CDOTAUserMsg_SendRoshanSpectatorPhase>(() => new CDOTAUserMsg_SendRoshanSpectatorPhase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendRoshanSpectatorPhase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanSpectatorPhase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanSpectatorPhase(CDOTAUserMsg_SendRoshanSpectatorPhase other) : this() {
      phase_ = other.phase_;
      phaseStartTime_ = other.phaseStartTime_;
      phaseLength_ = other.phaseLength_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanSpectatorPhase Clone() {
      return new CDOTAUserMsg_SendRoshanSpectatorPhase(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private global::Proto.Dota.DOTA_ROSHAN_PHASE phase_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.DOTA_ROSHAN_PHASE Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "phase_start_time" field.</summary>
    public const int PhaseStartTimeFieldNumber = 2;
    private int phaseStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhaseStartTime {
      get { return phaseStartTime_; }
      set {
        phaseStartTime_ = value;
      }
    }

    /// <summary>Field number for the "phase_length" field.</summary>
    public const int PhaseLengthFieldNumber = 3;
    private int phaseLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhaseLength {
      get { return phaseLength_; }
      set {
        phaseLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendRoshanSpectatorPhase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendRoshanSpectatorPhase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (PhaseStartTime != other.PhaseStartTime) return false;
      if (PhaseLength != other.PhaseLength) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (PhaseStartTime != 0) hash ^= PhaseStartTime.GetHashCode();
      if (PhaseLength != 0) hash ^= PhaseLength.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (PhaseStartTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PhaseStartTime);
      }
      if (PhaseLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PhaseLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (PhaseStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhaseStartTime);
      }
      if (PhaseLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhaseLength);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendRoshanSpectatorPhase other) {
      if (other == null) {
        return;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.PhaseStartTime != 0) {
        PhaseStartTime = other.PhaseStartTime;
      }
      if (other.PhaseLength != 0) {
        PhaseLength = other.PhaseLength;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            phase_ = (global::Proto.Dota.DOTA_ROSHAN_PHASE) input.ReadEnum();
            break;
          }
          case 16: {
            PhaseStartTime = input.ReadInt32();
            break;
          }
          case 24: {
            PhaseLength = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SendRoshanPopup : pb::IMessage<CDOTAUserMsg_SendRoshanPopup> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendRoshanPopup> _parser = new pb::MessageParser<CDOTAUserMsg_SendRoshanPopup>(() => new CDOTAUserMsg_SendRoshanPopup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendRoshanPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanPopup(CDOTAUserMsg_SendRoshanPopup other) : this() {
      reclaimed_ = other.reclaimed_;
      gametime_ = other.gametime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanPopup Clone() {
      return new CDOTAUserMsg_SendRoshanPopup(this);
    }

    /// <summary>Field number for the "reclaimed" field.</summary>
    public const int ReclaimedFieldNumber = 1;
    private bool reclaimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reclaimed {
      get { return reclaimed_; }
      set {
        reclaimed_ = value;
      }
    }

    /// <summary>Field number for the "gametime" field.</summary>
    public const int GametimeFieldNumber = 2;
    private int gametime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gametime {
      get { return gametime_; }
      set {
        gametime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendRoshanPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendRoshanPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reclaimed != other.Reclaimed) return false;
      if (Gametime != other.Gametime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reclaimed != false) hash ^= Reclaimed.GetHashCode();
      if (Gametime != 0) hash ^= Gametime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reclaimed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Reclaimed);
      }
      if (Gametime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gametime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reclaimed != false) {
        size += 1 + 1;
      }
      if (Gametime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gametime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendRoshanPopup other) {
      if (other == null) {
        return;
      }
      if (other.Reclaimed != false) {
        Reclaimed = other.Reclaimed;
      }
      if (other.Gametime != 0) {
        Gametime = other.Gametime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reclaimed = input.ReadBool();
            break;
          }
          case 16: {
            Gametime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_TE_Projectile : pb::IMessage<CDOTAUserMsg_TE_Projectile> {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_Projectile> _parser = new pb::MessageParser<CDOTAUserMsg_TE_Projectile>(() => new CDOTAUserMsg_TE_Projectile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_Projectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_Projectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_Projectile(CDOTAUserMsg_TE_Projectile other) : this() {
      hSource_ = other.hSource_;
      hTarget_ = other.hTarget_;
      moveSpeed_ = other.moveSpeed_;
      sourceAttachment_ = other.sourceAttachment_;
      particleSystemHandle_ = other.particleSystemHandle_;
      dodgeable_ = other.dodgeable_;
      isAttack_ = other.isAttack_;
      isEvaded_ = other.isEvaded_;
      expireTime_ = other.expireTime_;
      maximpacttime_ = other.maximpacttime_;
      colorgemcolor_ = other.colorgemcolor_;
      launchTick_ = other.launchTick_;
      handle_ = other.handle_;
      vTargetLoc_ = other.vTargetLoc_ != null ? other.vTargetLoc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_Projectile Clone() {
      return new CDOTAUserMsg_TE_Projectile(this);
    }

    /// <summary>Field number for the "hSource" field.</summary>
    public const int HSourceFieldNumber = 1;
    private int hSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HSource {
      get { return hSource_; }
      set {
        hSource_ = value;
      }
    }

    /// <summary>Field number for the "hTarget" field.</summary>
    public const int HTargetFieldNumber = 2;
    private int hTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HTarget {
      get { return hTarget_; }
      set {
        hTarget_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 3;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "sourceAttachment" field.</summary>
    public const int SourceAttachmentFieldNumber = 4;
    private int sourceAttachment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceAttachment {
      get { return sourceAttachment_; }
      set {
        sourceAttachment_ = value;
      }
    }

    /// <summary>Field number for the "particleSystemHandle" field.</summary>
    public const int ParticleSystemHandleFieldNumber = 5;
    private long particleSystemHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParticleSystemHandle {
      get { return particleSystemHandle_; }
      set {
        particleSystemHandle_ = value;
      }
    }

    /// <summary>Field number for the "dodgeable" field.</summary>
    public const int DodgeableFieldNumber = 6;
    private bool dodgeable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dodgeable {
      get { return dodgeable_; }
      set {
        dodgeable_ = value;
      }
    }

    /// <summary>Field number for the "isAttack" field.</summary>
    public const int IsAttackFieldNumber = 7;
    private bool isAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttack {
      get { return isAttack_; }
      set {
        isAttack_ = value;
      }
    }

    /// <summary>Field number for the "isEvaded" field.</summary>
    public const int IsEvadedFieldNumber = 8;
    private bool isEvaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvaded {
      get { return isEvaded_; }
      set {
        isEvaded_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 9;
    private float expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "maximpacttime" field.</summary>
    public const int MaximpacttimeFieldNumber = 10;
    private float maximpacttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Maximpacttime {
      get { return maximpacttime_; }
      set {
        maximpacttime_ = value;
      }
    }

    /// <summary>Field number for the "colorgemcolor" field.</summary>
    public const int ColorgemcolorFieldNumber = 11;
    private uint colorgemcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Colorgemcolor {
      get { return colorgemcolor_; }
      set {
        colorgemcolor_ = value;
      }
    }

    /// <summary>Field number for the "launch_tick" field.</summary>
    public const int LaunchTickFieldNumber = 12;
    private int launchTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaunchTick {
      get { return launchTick_; }
      set {
        launchTick_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 13;
    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "vTargetLoc" field.</summary>
    public const int VTargetLocFieldNumber = 14;
    private global::Proto.Dota.CMsgVector vTargetLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector VTargetLoc {
      get { return vTargetLoc_; }
      set {
        vTargetLoc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_Projectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_Projectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HSource != other.HSource) return false;
      if (HTarget != other.HTarget) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (SourceAttachment != other.SourceAttachment) return false;
      if (ParticleSystemHandle != other.ParticleSystemHandle) return false;
      if (Dodgeable != other.Dodgeable) return false;
      if (IsAttack != other.IsAttack) return false;
      if (IsEvaded != other.IsEvaded) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpireTime, other.ExpireTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Maximpacttime, other.Maximpacttime)) return false;
      if (Colorgemcolor != other.Colorgemcolor) return false;
      if (LaunchTick != other.LaunchTick) return false;
      if (Handle != other.Handle) return false;
      if (!object.Equals(VTargetLoc, other.VTargetLoc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HSource != 0) hash ^= HSource.GetHashCode();
      if (HTarget != 0) hash ^= HTarget.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (SourceAttachment != 0) hash ^= SourceAttachment.GetHashCode();
      if (ParticleSystemHandle != 0L) hash ^= ParticleSystemHandle.GetHashCode();
      if (Dodgeable != false) hash ^= Dodgeable.GetHashCode();
      if (IsAttack != false) hash ^= IsAttack.GetHashCode();
      if (IsEvaded != false) hash ^= IsEvaded.GetHashCode();
      if (ExpireTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpireTime);
      if (Maximpacttime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Maximpacttime);
      if (Colorgemcolor != 0) hash ^= Colorgemcolor.GetHashCode();
      if (LaunchTick != 0) hash ^= LaunchTick.GetHashCode();
      if (Handle != 0) hash ^= Handle.GetHashCode();
      if (vTargetLoc_ != null) hash ^= VTargetLoc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HSource != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HSource);
      }
      if (HTarget != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HTarget);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveSpeed);
      }
      if (SourceAttachment != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceAttachment);
      }
      if (ParticleSystemHandle != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ParticleSystemHandle);
      }
      if (Dodgeable != false) {
        output.WriteRawTag(48);
        output.WriteBool(Dodgeable);
      }
      if (IsAttack != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttack);
      }
      if (IsEvaded != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEvaded);
      }
      if (ExpireTime != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ExpireTime);
      }
      if (Maximpacttime != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Maximpacttime);
      }
      if (Colorgemcolor != 0) {
        output.WriteRawTag(93);
        output.WriteFixed32(Colorgemcolor);
      }
      if (LaunchTick != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(LaunchTick);
      }
      if (Handle != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Handle);
      }
      if (vTargetLoc_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(VTargetLoc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HSource);
      }
      if (HTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HTarget);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (SourceAttachment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceAttachment);
      }
      if (ParticleSystemHandle != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParticleSystemHandle);
      }
      if (Dodgeable != false) {
        size += 1 + 1;
      }
      if (IsAttack != false) {
        size += 1 + 1;
      }
      if (IsEvaded != false) {
        size += 1 + 1;
      }
      if (ExpireTime != 0F) {
        size += 1 + 4;
      }
      if (Maximpacttime != 0F) {
        size += 1 + 4;
      }
      if (Colorgemcolor != 0) {
        size += 1 + 4;
      }
      if (LaunchTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaunchTick);
      }
      if (Handle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (vTargetLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VTargetLoc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_Projectile other) {
      if (other == null) {
        return;
      }
      if (other.HSource != 0) {
        HSource = other.HSource;
      }
      if (other.HTarget != 0) {
        HTarget = other.HTarget;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.SourceAttachment != 0) {
        SourceAttachment = other.SourceAttachment;
      }
      if (other.ParticleSystemHandle != 0L) {
        ParticleSystemHandle = other.ParticleSystemHandle;
      }
      if (other.Dodgeable != false) {
        Dodgeable = other.Dodgeable;
      }
      if (other.IsAttack != false) {
        IsAttack = other.IsAttack;
      }
      if (other.IsEvaded != false) {
        IsEvaded = other.IsEvaded;
      }
      if (other.ExpireTime != 0F) {
        ExpireTime = other.ExpireTime;
      }
      if (other.Maximpacttime != 0F) {
        Maximpacttime = other.Maximpacttime;
      }
      if (other.Colorgemcolor != 0) {
        Colorgemcolor = other.Colorgemcolor;
      }
      if (other.LaunchTick != 0) {
        LaunchTick = other.LaunchTick;
      }
      if (other.Handle != 0) {
        Handle = other.Handle;
      }
      if (other.vTargetLoc_ != null) {
        if (vTargetLoc_ == null) {
          vTargetLoc_ = new global::Proto.Dota.CMsgVector();
        }
        VTargetLoc.MergeFrom(other.VTargetLoc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HSource = input.ReadInt32();
            break;
          }
          case 16: {
            HTarget = input.ReadInt32();
            break;
          }
          case 24: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            SourceAttachment = input.ReadInt32();
            break;
          }
          case 40: {
            ParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 48: {
            Dodgeable = input.ReadBool();
            break;
          }
          case 56: {
            IsAttack = input.ReadBool();
            break;
          }
          case 64: {
            IsEvaded = input.ReadBool();
            break;
          }
          case 77: {
            ExpireTime = input.ReadFloat();
            break;
          }
          case 85: {
            Maximpacttime = input.ReadFloat();
            break;
          }
          case 93: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 96: {
            LaunchTick = input.ReadInt32();
            break;
          }
          case 104: {
            Handle = input.ReadInt32();
            break;
          }
          case 114: {
            if (vTargetLoc_ == null) {
              vTargetLoc_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(vTargetLoc_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_TE_ProjectileLoc : pb::IMessage<CDOTAUserMsg_TE_ProjectileLoc> {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_ProjectileLoc> _parser = new pb::MessageParser<CDOTAUserMsg_TE_ProjectileLoc>(() => new CDOTAUserMsg_TE_ProjectileLoc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_ProjectileLoc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_ProjectileLoc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_ProjectileLoc(CDOTAUserMsg_TE_ProjectileLoc other) : this() {
      vSourceLoc_ = other.vSourceLoc_ != null ? other.vSourceLoc_.Clone() : null;
      hTarget_ = other.hTarget_;
      moveSpeed_ = other.moveSpeed_;
      particleSystemHandle_ = other.particleSystemHandle_;
      dodgeable_ = other.dodgeable_;
      isAttack_ = other.isAttack_;
      isEvaded_ = other.isEvaded_;
      expireTime_ = other.expireTime_;
      vTargetLoc_ = other.vTargetLoc_ != null ? other.vTargetLoc_.Clone() : null;
      colorgemcolor_ = other.colorgemcolor_;
      launchTick_ = other.launchTick_;
      handle_ = other.handle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_ProjectileLoc Clone() {
      return new CDOTAUserMsg_TE_ProjectileLoc(this);
    }

    /// <summary>Field number for the "vSourceLoc" field.</summary>
    public const int VSourceLocFieldNumber = 1;
    private global::Proto.Dota.CMsgVector vSourceLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector VSourceLoc {
      get { return vSourceLoc_; }
      set {
        vSourceLoc_ = value;
      }
    }

    /// <summary>Field number for the "hTarget" field.</summary>
    public const int HTargetFieldNumber = 2;
    private int hTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HTarget {
      get { return hTarget_; }
      set {
        hTarget_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 3;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "particleSystemHandle" field.</summary>
    public const int ParticleSystemHandleFieldNumber = 4;
    private long particleSystemHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParticleSystemHandle {
      get { return particleSystemHandle_; }
      set {
        particleSystemHandle_ = value;
      }
    }

    /// <summary>Field number for the "dodgeable" field.</summary>
    public const int DodgeableFieldNumber = 5;
    private bool dodgeable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dodgeable {
      get { return dodgeable_; }
      set {
        dodgeable_ = value;
      }
    }

    /// <summary>Field number for the "isAttack" field.</summary>
    public const int IsAttackFieldNumber = 6;
    private bool isAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttack {
      get { return isAttack_; }
      set {
        isAttack_ = value;
      }
    }

    /// <summary>Field number for the "isEvaded" field.</summary>
    public const int IsEvadedFieldNumber = 8;
    private bool isEvaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvaded {
      get { return isEvaded_; }
      set {
        isEvaded_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 9;
    private float expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "vTargetLoc" field.</summary>
    public const int VTargetLocFieldNumber = 10;
    private global::Proto.Dota.CMsgVector vTargetLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector VTargetLoc {
      get { return vTargetLoc_; }
      set {
        vTargetLoc_ = value;
      }
    }

    /// <summary>Field number for the "colorgemcolor" field.</summary>
    public const int ColorgemcolorFieldNumber = 11;
    private uint colorgemcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Colorgemcolor {
      get { return colorgemcolor_; }
      set {
        colorgemcolor_ = value;
      }
    }

    /// <summary>Field number for the "launch_tick" field.</summary>
    public const int LaunchTickFieldNumber = 12;
    private int launchTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaunchTick {
      get { return launchTick_; }
      set {
        launchTick_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 13;
    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_ProjectileLoc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_ProjectileLoc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VSourceLoc, other.VSourceLoc)) return false;
      if (HTarget != other.HTarget) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (ParticleSystemHandle != other.ParticleSystemHandle) return false;
      if (Dodgeable != other.Dodgeable) return false;
      if (IsAttack != other.IsAttack) return false;
      if (IsEvaded != other.IsEvaded) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpireTime, other.ExpireTime)) return false;
      if (!object.Equals(VTargetLoc, other.VTargetLoc)) return false;
      if (Colorgemcolor != other.Colorgemcolor) return false;
      if (LaunchTick != other.LaunchTick) return false;
      if (Handle != other.Handle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (vSourceLoc_ != null) hash ^= VSourceLoc.GetHashCode();
      if (HTarget != 0) hash ^= HTarget.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (ParticleSystemHandle != 0L) hash ^= ParticleSystemHandle.GetHashCode();
      if (Dodgeable != false) hash ^= Dodgeable.GetHashCode();
      if (IsAttack != false) hash ^= IsAttack.GetHashCode();
      if (IsEvaded != false) hash ^= IsEvaded.GetHashCode();
      if (ExpireTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpireTime);
      if (vTargetLoc_ != null) hash ^= VTargetLoc.GetHashCode();
      if (Colorgemcolor != 0) hash ^= Colorgemcolor.GetHashCode();
      if (LaunchTick != 0) hash ^= LaunchTick.GetHashCode();
      if (Handle != 0) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (vSourceLoc_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VSourceLoc);
      }
      if (HTarget != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HTarget);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveSpeed);
      }
      if (ParticleSystemHandle != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ParticleSystemHandle);
      }
      if (Dodgeable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Dodgeable);
      }
      if (IsAttack != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsAttack);
      }
      if (IsEvaded != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEvaded);
      }
      if (ExpireTime != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ExpireTime);
      }
      if (vTargetLoc_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(VTargetLoc);
      }
      if (Colorgemcolor != 0) {
        output.WriteRawTag(93);
        output.WriteFixed32(Colorgemcolor);
      }
      if (LaunchTick != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(LaunchTick);
      }
      if (Handle != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (vSourceLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VSourceLoc);
      }
      if (HTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HTarget);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (ParticleSystemHandle != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParticleSystemHandle);
      }
      if (Dodgeable != false) {
        size += 1 + 1;
      }
      if (IsAttack != false) {
        size += 1 + 1;
      }
      if (IsEvaded != false) {
        size += 1 + 1;
      }
      if (ExpireTime != 0F) {
        size += 1 + 4;
      }
      if (vTargetLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VTargetLoc);
      }
      if (Colorgemcolor != 0) {
        size += 1 + 4;
      }
      if (LaunchTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaunchTick);
      }
      if (Handle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_ProjectileLoc other) {
      if (other == null) {
        return;
      }
      if (other.vSourceLoc_ != null) {
        if (vSourceLoc_ == null) {
          vSourceLoc_ = new global::Proto.Dota.CMsgVector();
        }
        VSourceLoc.MergeFrom(other.VSourceLoc);
      }
      if (other.HTarget != 0) {
        HTarget = other.HTarget;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.ParticleSystemHandle != 0L) {
        ParticleSystemHandle = other.ParticleSystemHandle;
      }
      if (other.Dodgeable != false) {
        Dodgeable = other.Dodgeable;
      }
      if (other.IsAttack != false) {
        IsAttack = other.IsAttack;
      }
      if (other.IsEvaded != false) {
        IsEvaded = other.IsEvaded;
      }
      if (other.ExpireTime != 0F) {
        ExpireTime = other.ExpireTime;
      }
      if (other.vTargetLoc_ != null) {
        if (vTargetLoc_ == null) {
          vTargetLoc_ = new global::Proto.Dota.CMsgVector();
        }
        VTargetLoc.MergeFrom(other.VTargetLoc);
      }
      if (other.Colorgemcolor != 0) {
        Colorgemcolor = other.Colorgemcolor;
      }
      if (other.LaunchTick != 0) {
        LaunchTick = other.LaunchTick;
      }
      if (other.Handle != 0) {
        Handle = other.Handle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (vSourceLoc_ == null) {
              vSourceLoc_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(vSourceLoc_);
            break;
          }
          case 16: {
            HTarget = input.ReadInt32();
            break;
          }
          case 24: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            ParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 40: {
            Dodgeable = input.ReadBool();
            break;
          }
          case 48: {
            IsAttack = input.ReadBool();
            break;
          }
          case 64: {
            IsEvaded = input.ReadBool();
            break;
          }
          case 77: {
            ExpireTime = input.ReadFloat();
            break;
          }
          case 82: {
            if (vTargetLoc_ == null) {
              vTargetLoc_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(vTargetLoc_);
            break;
          }
          case 93: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 96: {
            LaunchTick = input.ReadInt32();
            break;
          }
          case 104: {
            Handle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_TE_DestroyProjectile : pb::IMessage<CDOTAUserMsg_TE_DestroyProjectile> {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_DestroyProjectile> _parser = new pb::MessageParser<CDOTAUserMsg_TE_DestroyProjectile>(() => new CDOTAUserMsg_TE_DestroyProjectile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_DestroyProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DestroyProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DestroyProjectile(CDOTAUserMsg_TE_DestroyProjectile other) : this() {
      handle_ = other.handle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DestroyProjectile Clone() {
      return new CDOTAUserMsg_TE_DestroyProjectile(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_DestroyProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_DestroyProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_DestroyProjectile other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0) {
        Handle = other.Handle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_TE_DotaBloodImpact : pb::IMessage<CDOTAUserMsg_TE_DotaBloodImpact> {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_DotaBloodImpact> _parser = new pb::MessageParser<CDOTAUserMsg_TE_DotaBloodImpact>(() => new CDOTAUserMsg_TE_DotaBloodImpact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_DotaBloodImpact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DotaBloodImpact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DotaBloodImpact(CDOTAUserMsg_TE_DotaBloodImpact other) : this() {
      entity_ = other.entity_;
      scale_ = other.scale_;
      xnormal_ = other.xnormal_;
      ynormal_ = other.ynormal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DotaBloodImpact Clone() {
      return new CDOTAUserMsg_TE_DotaBloodImpact(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private int entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "xnormal" field.</summary>
    public const int XnormalFieldNumber = 3;
    private float xnormal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xnormal {
      get { return xnormal_; }
      set {
        xnormal_ = value;
      }
    }

    /// <summary>Field number for the "ynormal" field.</summary>
    public const int YnormalFieldNumber = 4;
    private float ynormal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ynormal {
      get { return ynormal_; }
      set {
        ynormal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_DotaBloodImpact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_DotaBloodImpact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xnormal, other.Xnormal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ynormal, other.Ynormal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Xnormal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xnormal);
      if (Ynormal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ynormal);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entity);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Xnormal != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Xnormal);
      }
      if (Ynormal != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Ynormal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entity);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Xnormal != 0F) {
        size += 1 + 4;
      }
      if (Ynormal != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_DotaBloodImpact other) {
      if (other == null) {
        return;
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Xnormal != 0F) {
        Xnormal = other.Xnormal;
      }
      if (other.Ynormal != 0F) {
        Ynormal = other.Ynormal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = input.ReadInt32();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Xnormal = input.ReadFloat();
            break;
          }
          case 37: {
            Ynormal = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_TE_UnitAnimation : pb::IMessage<CDOTAUserMsg_TE_UnitAnimation> {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_UnitAnimation> _parser = new pb::MessageParser<CDOTAUserMsg_TE_UnitAnimation>(() => new CDOTAUserMsg_TE_UnitAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_UnitAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimation(CDOTAUserMsg_TE_UnitAnimation other) : this() {
      entity_ = other.entity_;
      sequenceVariant_ = other.sequenceVariant_;
      playbackrate_ = other.playbackrate_;
      castpoint_ = other.castpoint_;
      type_ = other.type_;
      activity_ = other.activity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimation Clone() {
      return new CDOTAUserMsg_TE_UnitAnimation(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private int entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "sequenceVariant" field.</summary>
    public const int SequenceVariantFieldNumber = 2;
    private int sequenceVariant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceVariant {
      get { return sequenceVariant_; }
      set {
        sequenceVariant_ = value;
      }
    }

    /// <summary>Field number for the "playbackrate" field.</summary>
    public const int PlaybackrateFieldNumber = 3;
    private float playbackrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Playbackrate {
      get { return playbackrate_; }
      set {
        playbackrate_ = value;
      }
    }

    /// <summary>Field number for the "castpoint" field.</summary>
    public const int CastpointFieldNumber = 4;
    private float castpoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Castpoint {
      get { return castpoint_; }
      set {
        castpoint_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "activity" field.</summary>
    public const int ActivityFieldNumber = 6;
    private int activity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Activity {
      get { return activity_; }
      set {
        activity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_UnitAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_UnitAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (SequenceVariant != other.SequenceVariant) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Playbackrate, other.Playbackrate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Castpoint, other.Castpoint)) return false;
      if (Type != other.Type) return false;
      if (Activity != other.Activity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (SequenceVariant != 0) hash ^= SequenceVariant.GetHashCode();
      if (Playbackrate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Playbackrate);
      if (Castpoint != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Castpoint);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Activity != 0) hash ^= Activity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entity);
      }
      if (SequenceVariant != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceVariant);
      }
      if (Playbackrate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Playbackrate);
      }
      if (Castpoint != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Castpoint);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (Activity != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Activity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entity);
      }
      if (SequenceVariant != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceVariant);
      }
      if (Playbackrate != 0F) {
        size += 1 + 4;
      }
      if (Castpoint != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Activity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_UnitAnimation other) {
      if (other == null) {
        return;
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      if (other.SequenceVariant != 0) {
        SequenceVariant = other.SequenceVariant;
      }
      if (other.Playbackrate != 0F) {
        Playbackrate = other.Playbackrate;
      }
      if (other.Castpoint != 0F) {
        Castpoint = other.Castpoint;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Activity != 0) {
        Activity = other.Activity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = input.ReadInt32();
            break;
          }
          case 16: {
            SequenceVariant = input.ReadInt32();
            break;
          }
          case 29: {
            Playbackrate = input.ReadFloat();
            break;
          }
          case 37: {
            Castpoint = input.ReadFloat();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Activity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_TE_UnitAnimationEnd : pb::IMessage<CDOTAUserMsg_TE_UnitAnimationEnd> {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_UnitAnimationEnd> _parser = new pb::MessageParser<CDOTAUserMsg_TE_UnitAnimationEnd>(() => new CDOTAUserMsg_TE_UnitAnimationEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_UnitAnimationEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimationEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimationEnd(CDOTAUserMsg_TE_UnitAnimationEnd other) : this() {
      entity_ = other.entity_;
      snap_ = other.snap_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimationEnd Clone() {
      return new CDOTAUserMsg_TE_UnitAnimationEnd(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private int entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "snap" field.</summary>
    public const int SnapFieldNumber = 2;
    private bool snap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Snap {
      get { return snap_; }
      set {
        snap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_UnitAnimationEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_UnitAnimationEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (Snap != other.Snap) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity != 0) hash ^= Entity.GetHashCode();
      if (Snap != false) hash ^= Snap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Entity);
      }
      if (Snap != false) {
        output.WriteRawTag(16);
        output.WriteBool(Snap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entity);
      }
      if (Snap != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_UnitAnimationEnd other) {
      if (other == null) {
        return;
      }
      if (other.Entity != 0) {
        Entity = other.Entity;
      }
      if (other.Snap != false) {
        Snap = other.Snap;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = input.ReadInt32();
            break;
          }
          case 16: {
            Snap = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_AbilitySteal : pb::IMessage<CDOTAUserMsg_AbilitySteal> {
    private static readonly pb::MessageParser<CDOTAUserMsg_AbilitySteal> _parser = new pb::MessageParser<CDOTAUserMsg_AbilitySteal>(() => new CDOTAUserMsg_AbilitySteal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AbilitySteal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilitySteal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilitySteal(CDOTAUserMsg_AbilitySteal other) : this() {
      playerId_ = other.playerId_;
      abilityId_ = other.abilityId_;
      abilityLevel_ = other.abilityLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilitySteal Clone() {
      return new CDOTAUserMsg_AbilitySteal(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 2;
    private uint abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 3;
    private uint abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityLevel {
      get { return abilityLevel_; }
      set {
        abilityLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AbilitySteal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AbilitySteal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AbilityId != other.AbilityId) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (AbilityLevel != 0) hash ^= AbilityLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (AbilityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AbilityId);
      }
      if (AbilityLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AbilityLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
      }
      if (AbilityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AbilitySteal other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.AbilityLevel != 0) {
        AbilityLevel = other.AbilityLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            AbilityId = input.ReadUInt32();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_StatsHeroLookup : pb::IMessage<CDOTAUserMsg_StatsHeroLookup> {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsHeroLookup> _parser = new pb::MessageParser<CDOTAUserMsg_StatsHeroLookup>(() => new CDOTAUserMsg_StatsHeroLookup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsHeroLookup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroLookup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroLookup(CDOTAUserMsg_StatsHeroLookup other) : this() {
      playerId_ = other.playerId_;
      heroId_ = other.heroId_;
      heroName_ = other.heroName_;
      persona_ = other.persona_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroLookup Clone() {
      return new CDOTAUserMsg_StatsHeroLookup(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "hero_name" field.</summary>
    public const int HeroNameFieldNumber = 3;
    private string heroName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroName {
      get { return heroName_; }
      set {
        heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "persona" field.</summary>
    public const int PersonaFieldNumber = 4;
    private string persona_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Persona {
      get { return persona_; }
      set {
        persona_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsHeroLookup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsHeroLookup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (HeroId != other.HeroId) return false;
      if (HeroName != other.HeroName) return false;
      if (Persona != other.Persona) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (HeroName.Length != 0) hash ^= HeroName.GetHashCode();
      if (Persona.Length != 0) hash ^= Persona.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HeroName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeroName);
      }
      if (Persona.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Persona);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HeroName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
      }
      if (Persona.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Persona);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsHeroLookup other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.HeroName.Length != 0) {
        HeroName = other.HeroName;
      }
      if (other.Persona.Length != 0) {
        Persona = other.Persona;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 26: {
            HeroName = input.ReadString();
            break;
          }
          case 34: {
            Persona = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_StatsHeroPositionInfo : pb::IMessage<CDOTAUserMsg_StatsHeroPositionInfo> {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsHeroPositionInfo> _parser = new pb::MessageParser<CDOTAUserMsg_StatsHeroPositionInfo>(() => new CDOTAUserMsg_StatsHeroPositionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsHeroPositionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroPositionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroPositionInfo(CDOTAUserMsg_StatsHeroPositionInfo other) : this() {
      averagePosition_ = other.averagePosition_;
      positionDetails_ = other.positionDetails_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroPositionInfo Clone() {
      return new CDOTAUserMsg_StatsHeroPositionInfo(this);
    }

    /// <summary>Field number for the "average_position" field.</summary>
    public const int AveragePositionFieldNumber = 1;
    private float averagePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AveragePosition {
      get { return averagePosition_; }
      set {
        averagePosition_ = value;
      }
    }

    /// <summary>Field number for the "position_details" field.</summary>
    public const int PositionDetailsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair> _repeated_positionDetails_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair> positionDetails_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair> PositionDetails {
      get { return positionDetails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsHeroPositionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsHeroPositionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AveragePosition, other.AveragePosition)) return false;
      if(!positionDetails_.Equals(other.positionDetails_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AveragePosition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AveragePosition);
      hash ^= positionDetails_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AveragePosition != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AveragePosition);
      }
      positionDetails_.WriteTo(output, _repeated_positionDetails_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AveragePosition != 0F) {
        size += 1 + 4;
      }
      size += positionDetails_.CalculateSize(_repeated_positionDetails_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsHeroPositionInfo other) {
      if (other == null) {
        return;
      }
      if (other.AveragePosition != 0F) {
        AveragePosition = other.AveragePosition;
      }
      positionDetails_.Add(other.positionDetails_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AveragePosition = input.ReadFloat();
            break;
          }
          case 18: {
            positionDetails_.AddEntriesFrom(input, _repeated_positionDetails_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_StatsHeroPositionInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PositionPair : pb::IMessage<PositionPair> {
        private static readonly pb::MessageParser<PositionPair> _parser = new pb::MessageParser<PositionPair>(() => new PositionPair());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PositionPair> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAUserMsg_StatsHeroPositionInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PositionPair() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PositionPair(PositionPair other) : this() {
          positionCategory_ = other.positionCategory_;
          positionCount_ = other.positionCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PositionPair Clone() {
          return new PositionPair(this);
        }

        /// <summary>Field number for the "position_category" field.</summary>
        public const int PositionCategoryFieldNumber = 1;
        private global::Proto.Dota.DOTA_POSITION_CATEGORY positionCategory_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.DOTA_POSITION_CATEGORY PositionCategory {
          get { return positionCategory_; }
          set {
            positionCategory_ = value;
          }
        }

        /// <summary>Field number for the "position_count" field.</summary>
        public const int PositionCountFieldNumber = 2;
        private uint positionCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionCount {
          get { return positionCount_; }
          set {
            positionCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PositionPair);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PositionPair other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PositionCategory != other.PositionCategory) return false;
          if (PositionCount != other.PositionCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PositionCategory != 0) hash ^= PositionCategory.GetHashCode();
          if (PositionCount != 0) hash ^= PositionCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionCategory != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PositionCategory);
          }
          if (PositionCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PositionCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PositionCategory != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositionCategory);
          }
          if (PositionCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PositionPair other) {
          if (other == null) {
            return;
          }
          if (other.PositionCategory != 0) {
            PositionCategory = other.PositionCategory;
          }
          if (other.PositionCount != 0) {
            PositionCount = other.PositionCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                positionCategory_ = (global::Proto.Dota.DOTA_POSITION_CATEGORY) input.ReadEnum();
                break;
              }
              case 16: {
                PositionCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_StatsPlayerKillShare : pb::IMessage<CDOTAUserMsg_StatsPlayerKillShare> {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsPlayerKillShare> _parser = new pb::MessageParser<CDOTAUserMsg_StatsPlayerKillShare>(() => new CDOTAUserMsg_StatsPlayerKillShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsPlayerKillShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsPlayerKillShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsPlayerKillShare(CDOTAUserMsg_StatsPlayerKillShare other) : this() {
      playerId_ = other.playerId_;
      killSharePercent_ = other.killSharePercent_;
      playerLocX_ = other.playerLocX_;
      playerLocY_ = other.playerLocY_;
      healthPercent_ = other.healthPercent_;
      manaPercent_ = other.manaPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsPlayerKillShare Clone() {
      return new CDOTAUserMsg_StatsPlayerKillShare(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "kill_share_percent" field.</summary>
    public const int KillSharePercentFieldNumber = 2;
    private float killSharePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KillSharePercent {
      get { return killSharePercent_; }
      set {
        killSharePercent_ = value;
      }
    }

    /// <summary>Field number for the "player_loc_x" field.</summary>
    public const int PlayerLocXFieldNumber = 3;
    private float playerLocX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerLocX {
      get { return playerLocX_; }
      set {
        playerLocX_ = value;
      }
    }

    /// <summary>Field number for the "player_loc_y" field.</summary>
    public const int PlayerLocYFieldNumber = 4;
    private float playerLocY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerLocY {
      get { return playerLocY_; }
      set {
        playerLocY_ = value;
      }
    }

    /// <summary>Field number for the "health_percent" field.</summary>
    public const int HealthPercentFieldNumber = 5;
    private float healthPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthPercent {
      get { return healthPercent_; }
      set {
        healthPercent_ = value;
      }
    }

    /// <summary>Field number for the "mana_percent" field.</summary>
    public const int ManaPercentFieldNumber = 6;
    private float manaPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ManaPercent {
      get { return manaPercent_; }
      set {
        manaPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsPlayerKillShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsPlayerKillShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KillSharePercent, other.KillSharePercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerLocX, other.PlayerLocX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerLocY, other.PlayerLocY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthPercent, other.HealthPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ManaPercent, other.ManaPercent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (KillSharePercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KillSharePercent);
      if (PlayerLocX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerLocX);
      if (PlayerLocY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerLocY);
      if (HealthPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthPercent);
      if (ManaPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ManaPercent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (KillSharePercent != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(KillSharePercent);
      }
      if (PlayerLocX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PlayerLocX);
      }
      if (PlayerLocY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PlayerLocY);
      }
      if (HealthPercent != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HealthPercent);
      }
      if (ManaPercent != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ManaPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (KillSharePercent != 0F) {
        size += 1 + 4;
      }
      if (PlayerLocX != 0F) {
        size += 1 + 4;
      }
      if (PlayerLocY != 0F) {
        size += 1 + 4;
      }
      if (HealthPercent != 0F) {
        size += 1 + 4;
      }
      if (ManaPercent != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsPlayerKillShare other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.KillSharePercent != 0F) {
        KillSharePercent = other.KillSharePercent;
      }
      if (other.PlayerLocX != 0F) {
        PlayerLocX = other.PlayerLocX;
      }
      if (other.PlayerLocY != 0F) {
        PlayerLocY = other.PlayerLocY;
      }
      if (other.HealthPercent != 0F) {
        HealthPercent = other.HealthPercent;
      }
      if (other.ManaPercent != 0F) {
        ManaPercent = other.ManaPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            KillSharePercent = input.ReadFloat();
            break;
          }
          case 29: {
            PlayerLocX = input.ReadFloat();
            break;
          }
          case 37: {
            PlayerLocY = input.ReadFloat();
            break;
          }
          case 45: {
            HealthPercent = input.ReadFloat();
            break;
          }
          case 53: {
            ManaPercent = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_StatsKillDetails : pb::IMessage<CDOTAUserMsg_StatsKillDetails> {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsKillDetails> _parser = new pb::MessageParser<CDOTAUserMsg_StatsKillDetails>(() => new CDOTAUserMsg_StatsKillDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsKillDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsKillDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsKillDetails(CDOTAUserMsg_StatsKillDetails other) : this() {
      victimId_ = other.victimId_;
      killShares_ = other.killShares_.Clone();
      damageToKill_ = other.damageToKill_;
      effectiveHealth_ = other.effectiveHealth_;
      deathTime_ = other.deathTime_;
      killerId_ = other.killerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsKillDetails Clone() {
      return new CDOTAUserMsg_StatsKillDetails(this);
    }

    /// <summary>Field number for the "victim_id" field.</summary>
    public const int VictimIdFieldNumber = 1;
    private uint victimId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VictimId {
      get { return victimId_; }
      set {
        victimId_ = value;
      }
    }

    /// <summary>Field number for the "kill_shares" field.</summary>
    public const int KillSharesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAUserMsg_StatsPlayerKillShare> _repeated_killShares_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CDOTAUserMsg_StatsPlayerKillShare.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_StatsPlayerKillShare> killShares_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_StatsPlayerKillShare>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAUserMsg_StatsPlayerKillShare> KillShares {
      get { return killShares_; }
    }

    /// <summary>Field number for the "damage_to_kill" field.</summary>
    public const int DamageToKillFieldNumber = 3;
    private uint damageToKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageToKill {
      get { return damageToKill_; }
      set {
        damageToKill_ = value;
      }
    }

    /// <summary>Field number for the "effective_health" field.</summary>
    public const int EffectiveHealthFieldNumber = 4;
    private uint effectiveHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectiveHealth {
      get { return effectiveHealth_; }
      set {
        effectiveHealth_ = value;
      }
    }

    /// <summary>Field number for the "death_time" field.</summary>
    public const int DeathTimeFieldNumber = 5;
    private float deathTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeathTime {
      get { return deathTime_; }
      set {
        deathTime_ = value;
      }
    }

    /// <summary>Field number for the "killer_id" field.</summary>
    public const int KillerIdFieldNumber = 6;
    private uint killerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillerId {
      get { return killerId_; }
      set {
        killerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsKillDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsKillDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VictimId != other.VictimId) return false;
      if(!killShares_.Equals(other.killShares_)) return false;
      if (DamageToKill != other.DamageToKill) return false;
      if (EffectiveHealth != other.EffectiveHealth) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathTime, other.DeathTime)) return false;
      if (KillerId != other.KillerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VictimId != 0) hash ^= VictimId.GetHashCode();
      hash ^= killShares_.GetHashCode();
      if (DamageToKill != 0) hash ^= DamageToKill.GetHashCode();
      if (EffectiveHealth != 0) hash ^= EffectiveHealth.GetHashCode();
      if (DeathTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathTime);
      if (KillerId != 0) hash ^= KillerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VictimId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VictimId);
      }
      killShares_.WriteTo(output, _repeated_killShares_codec);
      if (DamageToKill != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DamageToKill);
      }
      if (EffectiveHealth != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EffectiveHealth);
      }
      if (DeathTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DeathTime);
      }
      if (KillerId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(KillerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VictimId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VictimId);
      }
      size += killShares_.CalculateSize(_repeated_killShares_codec);
      if (DamageToKill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageToKill);
      }
      if (EffectiveHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectiveHealth);
      }
      if (DeathTime != 0F) {
        size += 1 + 4;
      }
      if (KillerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsKillDetails other) {
      if (other == null) {
        return;
      }
      if (other.VictimId != 0) {
        VictimId = other.VictimId;
      }
      killShares_.Add(other.killShares_);
      if (other.DamageToKill != 0) {
        DamageToKill = other.DamageToKill;
      }
      if (other.EffectiveHealth != 0) {
        EffectiveHealth = other.EffectiveHealth;
      }
      if (other.DeathTime != 0F) {
        DeathTime = other.DeathTime;
      }
      if (other.KillerId != 0) {
        KillerId = other.KillerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VictimId = input.ReadUInt32();
            break;
          }
          case 18: {
            killShares_.AddEntriesFrom(input, _repeated_killShares_codec);
            break;
          }
          case 24: {
            DamageToKill = input.ReadUInt32();
            break;
          }
          case 32: {
            EffectiveHealth = input.ReadUInt32();
            break;
          }
          case 45: {
            DeathTime = input.ReadFloat();
            break;
          }
          case 48: {
            KillerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgHeroAbilityStat : pb::IMessage<CMsgHeroAbilityStat> {
    private static readonly pb::MessageParser<CMsgHeroAbilityStat> _parser = new pb::MessageParser<CMsgHeroAbilityStat>(() => new CMsgHeroAbilityStat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgHeroAbilityStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroAbilityStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroAbilityStat(CMsgHeroAbilityStat other) : this() {
      statType_ = other.statType_;
      intValue_ = other.intValue_;
      floatValue_ = other.floatValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroAbilityStat Clone() {
      return new CMsgHeroAbilityStat(this);
    }

    /// <summary>Field number for the "stat_type" field.</summary>
    public const int StatTypeFieldNumber = 1;
    private global::Proto.Dota.EHeroStatType statType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.EHeroStatType StatType {
      get { return statType_; }
      set {
        statType_ = value;
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 2;
    private int intValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntValue {
      get { return intValue_; }
      set {
        intValue_ = value;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 3;
    private float floatValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return floatValue_; }
      set {
        floatValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgHeroAbilityStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgHeroAbilityStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatType != other.StatType) return false;
      if (IntValue != other.IntValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatType != 0) hash ^= StatType.GetHashCode();
      if (IntValue != 0) hash ^= IntValue.GetHashCode();
      if (FloatValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatType);
      }
      if (IntValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IntValue);
      }
      if (FloatValue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FloatValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatType);
      }
      if (IntValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
      }
      if (FloatValue != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgHeroAbilityStat other) {
      if (other == null) {
        return;
      }
      if (other.StatType != 0) {
        StatType = other.StatType;
      }
      if (other.IntValue != 0) {
        IntValue = other.IntValue;
      }
      if (other.FloatValue != 0F) {
        FloatValue = other.FloatValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            statType_ = (global::Proto.Dota.EHeroStatType) input.ReadEnum();
            break;
          }
          case 16: {
            IntValue = input.ReadInt32();
            break;
          }
          case 29: {
            FloatValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgCombatAnalyzerPlayerStat : pb::IMessage<CMsgCombatAnalyzerPlayerStat> {
    private static readonly pb::MessageParser<CMsgCombatAnalyzerPlayerStat> _parser = new pb::MessageParser<CMsgCombatAnalyzerPlayerStat>(() => new CMsgCombatAnalyzerPlayerStat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCombatAnalyzerPlayerStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerPlayerStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerPlayerStat(CMsgCombatAnalyzerPlayerStat other) : this() {
      accountId_ = other.accountId_;
      heroAbilityStats_ = other.heroAbilityStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerPlayerStat Clone() {
      return new CMsgCombatAnalyzerPlayerStat(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "hero_ability_stats" field.</summary>
    public const int HeroAbilityStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgHeroAbilityStat> _repeated_heroAbilityStats_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CMsgHeroAbilityStat.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgHeroAbilityStat> heroAbilityStats_ = new pbc::RepeatedField<global::Proto.Dota.CMsgHeroAbilityStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgHeroAbilityStat> HeroAbilityStats {
      get { return heroAbilityStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCombatAnalyzerPlayerStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCombatAnalyzerPlayerStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!heroAbilityStats_.Equals(other.heroAbilityStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      hash ^= heroAbilityStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      heroAbilityStats_.WriteTo(output, _repeated_heroAbilityStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      size += heroAbilityStats_.CalculateSize(_repeated_heroAbilityStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCombatAnalyzerPlayerStat other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      heroAbilityStats_.Add(other.heroAbilityStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            heroAbilityStats_.AddEntriesFrom(input, _repeated_heroAbilityStats_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgCombatAnalyzerStats : pb::IMessage<CMsgCombatAnalyzerStats> {
    private static readonly pb::MessageParser<CMsgCombatAnalyzerStats> _parser = new pb::MessageParser<CMsgCombatAnalyzerStats>(() => new CMsgCombatAnalyzerStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCombatAnalyzerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerStats(CMsgCombatAnalyzerStats other) : this() {
      matchId_ = other.matchId_;
      playerStats_ = other.playerStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerStats Clone() {
      return new CMsgCombatAnalyzerStats(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "player_stats" field.</summary>
    public const int PlayerStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgCombatAnalyzerPlayerStat> _repeated_playerStats_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CMsgCombatAnalyzerPlayerStat.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgCombatAnalyzerPlayerStat> playerStats_ = new pbc::RepeatedField<global::Proto.Dota.CMsgCombatAnalyzerPlayerStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgCombatAnalyzerPlayerStat> PlayerStats {
      get { return playerStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCombatAnalyzerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCombatAnalyzerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!playerStats_.Equals(other.playerStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
      hash ^= playerStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      playerStats_.WriteTo(output, _repeated_playerStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      size += playerStats_.CalculateSize(_repeated_playerStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCombatAnalyzerStats other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0UL) {
        MatchId = other.MatchId;
      }
      playerStats_.Add(other.playerStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            playerStats_.AddEntriesFrom(input, _repeated_playerStats_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_ProjectionAbility : pb::IMessage<CDOTAUserMsg_ProjectionAbility> {
    private static readonly pb::MessageParser<CDOTAUserMsg_ProjectionAbility> _parser = new pb::MessageParser<CDOTAUserMsg_ProjectionAbility>(() => new CDOTAUserMsg_ProjectionAbility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ProjectionAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionAbility(CDOTAUserMsg_ProjectionAbility other) : this() {
      abilityId_ = other.abilityId_;
      casterEntIndex_ = other.casterEntIndex_;
      casterTeam_ = other.casterTeam_;
      channelEnd_ = other.channelEnd_;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      trackCasterOnly_ = other.trackCasterOnly_;
      endTime_ = other.endTime_;
      victimEntIndex_ = other.victimEntIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionAbility Clone() {
      return new CDOTAUserMsg_ProjectionAbility(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private uint abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "caster_ent_index" field.</summary>
    public const int CasterEntIndexFieldNumber = 2;
    private int casterEntIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CasterEntIndex {
      get { return casterEntIndex_; }
      set {
        casterEntIndex_ = value;
      }
    }

    /// <summary>Field number for the "caster_team" field.</summary>
    public const int CasterTeamFieldNumber = 3;
    private int casterTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CasterTeam {
      get { return casterTeam_; }
      set {
        casterTeam_ = value;
      }
    }

    /// <summary>Field number for the "channel_end" field.</summary>
    public const int ChannelEndFieldNumber = 4;
    private bool channelEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChannelEnd {
      get { return channelEnd_; }
      set {
        channelEnd_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 5;
    private global::Proto.Dota.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "track_caster_only" field.</summary>
    public const int TrackCasterOnlyFieldNumber = 6;
    private bool trackCasterOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrackCasterOnly {
      get { return trackCasterOnly_; }
      set {
        trackCasterOnly_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 7;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "victim_ent_index" field.</summary>
    public const int VictimEntIndexFieldNumber = 8;
    private int victimEntIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictimEntIndex {
      get { return victimEntIndex_; }
      set {
        victimEntIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ProjectionAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ProjectionAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (CasterEntIndex != other.CasterEntIndex) return false;
      if (CasterTeam != other.CasterTeam) return false;
      if (ChannelEnd != other.ChannelEnd) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (TrackCasterOnly != other.TrackCasterOnly) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (VictimEntIndex != other.VictimEntIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (CasterEntIndex != 0) hash ^= CasterEntIndex.GetHashCode();
      if (CasterTeam != 0) hash ^= CasterTeam.GetHashCode();
      if (ChannelEnd != false) hash ^= ChannelEnd.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (TrackCasterOnly != false) hash ^= TrackCasterOnly.GetHashCode();
      if (EndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (VictimEntIndex != 0) hash ^= VictimEntIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AbilityId);
      }
      if (CasterEntIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CasterEntIndex);
      }
      if (CasterTeam != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CasterTeam);
      }
      if (ChannelEnd != false) {
        output.WriteRawTag(32);
        output.WriteBool(ChannelEnd);
      }
      if (origin_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Origin);
      }
      if (TrackCasterOnly != false) {
        output.WriteRawTag(48);
        output.WriteBool(TrackCasterOnly);
      }
      if (EndTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EndTime);
      }
      if (VictimEntIndex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VictimEntIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
      }
      if (CasterEntIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CasterEntIndex);
      }
      if (CasterTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CasterTeam);
      }
      if (ChannelEnd != false) {
        size += 1 + 1;
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (TrackCasterOnly != false) {
        size += 1 + 1;
      }
      if (EndTime != 0F) {
        size += 1 + 4;
      }
      if (VictimEntIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictimEntIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ProjectionAbility other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.CasterEntIndex != 0) {
        CasterEntIndex = other.CasterEntIndex;
      }
      if (other.CasterTeam != 0) {
        CasterTeam = other.CasterTeam;
      }
      if (other.ChannelEnd != false) {
        ChannelEnd = other.ChannelEnd;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Proto.Dota.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.TrackCasterOnly != false) {
        TrackCasterOnly = other.TrackCasterOnly;
      }
      if (other.EndTime != 0F) {
        EndTime = other.EndTime;
      }
      if (other.VictimEntIndex != 0) {
        VictimEntIndex = other.VictimEntIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadUInt32();
            break;
          }
          case 16: {
            CasterEntIndex = input.ReadInt32();
            break;
          }
          case 24: {
            CasterTeam = input.ReadInt32();
            break;
          }
          case 32: {
            ChannelEnd = input.ReadBool();
            break;
          }
          case 42: {
            if (origin_ == null) {
              origin_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 48: {
            TrackCasterOnly = input.ReadBool();
            break;
          }
          case 61: {
            EndTime = input.ReadFloat();
            break;
          }
          case 64: {
            VictimEntIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_ProjectionEvent : pb::IMessage<CDOTAUserMsg_ProjectionEvent> {
    private static readonly pb::MessageParser<CDOTAUserMsg_ProjectionEvent> _parser = new pb::MessageParser<CDOTAUserMsg_ProjectionEvent>(() => new CDOTAUserMsg_ProjectionEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ProjectionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionEvent(CDOTAUserMsg_ProjectionEvent other) : this() {
      eventId_ = other.eventId_;
      team_ = other.team_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionEvent Clone() {
      return new CDOTAUserMsg_ProjectionEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private global::Proto.Dota.EProjectionEvent eventId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.EProjectionEvent EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ProjectionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ProjectionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (Team != other.Team) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (Team != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ProjectionEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            eventId_ = (global::Proto.Dota.EProjectionEvent) input.ReadEnum();
            break;
          }
          case 16: {
            Team = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_XPAlert : pb::IMessage<CDOTAUserMsg_XPAlert> {
    private static readonly pb::MessageParser<CDOTAUserMsg_XPAlert> _parser = new pb::MessageParser<CDOTAUserMsg_XPAlert>(() => new CDOTAUserMsg_XPAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_XPAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_XPAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_XPAlert(CDOTAUserMsg_XPAlert other) : this() {
      playerId_ = other.playerId_;
      targetEntindex_ = other.targetEntindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_XPAlert Clone() {
      return new CDOTAUserMsg_XPAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 2;
    private uint targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEntindex {
      get { return targetEntindex_; }
      set {
        targetEntindex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_XPAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_XPAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (TargetEntindex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (TargetEntindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_XPAlert other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TargetEntindex != 0) {
        TargetEntindex = other.TargetEntindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SelectPenaltyGold : pb::IMessage<CDOTAUserMsg_SelectPenaltyGold> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SelectPenaltyGold> _parser = new pb::MessageParser<CDOTAUserMsg_SelectPenaltyGold>(() => new CDOTAUserMsg_SelectPenaltyGold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SelectPenaltyGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SelectPenaltyGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SelectPenaltyGold(CDOTAUserMsg_SelectPenaltyGold other) : this() {
      playerId_ = other.playerId_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SelectPenaltyGold Clone() {
      return new CDOTAUserMsg_SelectPenaltyGold(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SelectPenaltyGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SelectPenaltyGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SelectPenaltyGold other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            Cost = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_RollDiceResult : pb::IMessage<CDOTAUserMsg_RollDiceResult> {
    private static readonly pb::MessageParser<CDOTAUserMsg_RollDiceResult> _parser = new pb::MessageParser<CDOTAUserMsg_RollDiceResult>(() => new CDOTAUserMsg_RollDiceResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_RollDiceResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RollDiceResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RollDiceResult(CDOTAUserMsg_RollDiceResult other) : this() {
      playerId_ = other.playerId_;
      channelType_ = other.channelType_;
      rollMin_ = other.rollMin_;
      rollMax_ = other.rollMax_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RollDiceResult Clone() {
      return new CDOTAUserMsg_RollDiceResult(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 2;
    private uint channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "roll_min" field.</summary>
    public const int RollMinFieldNumber = 3;
    private uint rollMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RollMin {
      get { return rollMin_; }
      set {
        rollMin_ = value;
      }
    }

    /// <summary>Field number for the "roll_max" field.</summary>
    public const int RollMaxFieldNumber = 4;
    private uint rollMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RollMax {
      get { return rollMax_; }
      set {
        rollMax_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_RollDiceResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_RollDiceResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ChannelType != other.ChannelType) return false;
      if (RollMin != other.RollMin) return false;
      if (RollMax != other.RollMax) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (ChannelType != 0) hash ^= ChannelType.GetHashCode();
      if (RollMin != 0) hash ^= RollMin.GetHashCode();
      if (RollMax != 0) hash ^= RollMax.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (ChannelType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (RollMin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RollMin);
      }
      if (RollMax != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RollMax);
      }
      if (Result != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelType);
      }
      if (RollMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollMin);
      }
      if (RollMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollMax);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_RollDiceResult other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ChannelType != 0) {
        ChannelType = other.ChannelType;
      }
      if (other.RollMin != 0) {
        RollMin = other.RollMin;
      }
      if (other.RollMax != 0) {
        RollMax = other.RollMax;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 24: {
            RollMin = input.ReadUInt32();
            break;
          }
          case 32: {
            RollMax = input.ReadUInt32();
            break;
          }
          case 40: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_FlipCoinResult : pb::IMessage<CDOTAUserMsg_FlipCoinResult> {
    private static readonly pb::MessageParser<CDOTAUserMsg_FlipCoinResult> _parser = new pb::MessageParser<CDOTAUserMsg_FlipCoinResult>(() => new CDOTAUserMsg_FlipCoinResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_FlipCoinResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FlipCoinResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FlipCoinResult(CDOTAUserMsg_FlipCoinResult other) : this() {
      playerId_ = other.playerId_;
      channelType_ = other.channelType_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FlipCoinResult Clone() {
      return new CDOTAUserMsg_FlipCoinResult(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 2;
    private uint channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_FlipCoinResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_FlipCoinResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ChannelType != other.ChannelType) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (ChannelType != 0) hash ^= ChannelType.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (ChannelType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelType);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_FlipCoinResult other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ChannelType != 0) {
        ChannelType = other.ChannelType;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMessage_TeamCaptainChanged : pb::IMessage<CDOTAUserMessage_TeamCaptainChanged> {
    private static readonly pb::MessageParser<CDOTAUserMessage_TeamCaptainChanged> _parser = new pb::MessageParser<CDOTAUserMessage_TeamCaptainChanged>(() => new CDOTAUserMessage_TeamCaptainChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMessage_TeamCaptainChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_TeamCaptainChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_TeamCaptainChanged(CDOTAUserMessage_TeamCaptainChanged other) : this() {
      team_ = other.team_;
      captainPlayerId_ = other.captainPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_TeamCaptainChanged Clone() {
      return new CDOTAUserMessage_TeamCaptainChanged(this);
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "captain_player_id" field.</summary>
    public const int CaptainPlayerIdFieldNumber = 2;
    private uint captainPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CaptainPlayerId {
      get { return captainPlayerId_; }
      set {
        captainPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMessage_TeamCaptainChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMessage_TeamCaptainChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Team != other.Team) return false;
      if (CaptainPlayerId != other.CaptainPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Team != 0) hash ^= Team.GetHashCode();
      if (CaptainPlayerId != 0) hash ^= CaptainPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Team != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (CaptainPlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CaptainPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (CaptainPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CaptainPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMessage_TeamCaptainChanged other) {
      if (other == null) {
        return;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.CaptainPlayerId != 0) {
        CaptainPlayerId = other.CaptainPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 16: {
            CaptainPlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_HeroRelicProgress : pb::IMessage<CDOTAUserMsg_HeroRelicProgress> {
    private static readonly pb::MessageParser<CDOTAUserMsg_HeroRelicProgress> _parser = new pb::MessageParser<CDOTAUserMsg_HeroRelicProgress>(() => new CDOTAUserMsg_HeroRelicProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HeroRelicProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HeroRelicProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HeroRelicProgress(CDOTAUserMsg_HeroRelicProgress other) : this() {
      heroRelicType_ = other.heroRelicType_;
      value_ = other.value_;
      ehandle_ = other.ehandle_;
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HeroRelicProgress Clone() {
      return new CDOTAUserMsg_HeroRelicProgress(this);
    }

    /// <summary>Field number for the "hero_relic_type" field.</summary>
    public const int HeroRelicTypeFieldNumber = 1;
    private uint heroRelicType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroRelicType {
      get { return heroRelicType_; }
      set {
        heroRelicType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 3;
    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { return ehandle_; }
      set {
        ehandle_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 4;
    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HeroRelicProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HeroRelicProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroRelicType != other.HeroRelicType) return false;
      if (Value != other.Value) return false;
      if (Ehandle != other.Ehandle) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroRelicType != 0) hash ^= HeroRelicType.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Ehandle != 0) hash ^= Ehandle.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroRelicType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroRelicType);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (Ehandle != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ehandle);
      }
      if (EventId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroRelicType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroRelicType);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Ehandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HeroRelicProgress other) {
      if (other == null) {
        return;
      }
      if (other.HeroRelicType != 0) {
        HeroRelicType = other.HeroRelicType;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Ehandle != 0) {
        Ehandle = other.Ehandle;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroRelicType = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_DamageReport : pb::IMessage<CDOTAUserMsg_DamageReport> {
    private static readonly pb::MessageParser<CDOTAUserMsg_DamageReport> _parser = new pb::MessageParser<CDOTAUserMsg_DamageReport>(() => new CDOTAUserMsg_DamageReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DamageReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DamageReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DamageReport(CDOTAUserMsg_DamageReport other) : this() {
      playerId_ = other.playerId_;
      targetHeroId_ = other.targetHeroId_;
      sourceHeroId_ = other.sourceHeroId_;
      damageAmount_ = other.damageAmount_;
      broadcast_ = other.broadcast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DamageReport Clone() {
      return new CDOTAUserMsg_DamageReport(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "target_hero_id" field.</summary>
    public const int TargetHeroIdFieldNumber = 2;
    private uint targetHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetHeroId {
      get { return targetHeroId_; }
      set {
        targetHeroId_ = value;
      }
    }

    /// <summary>Field number for the "source_hero_id" field.</summary>
    public const int SourceHeroIdFieldNumber = 3;
    private uint sourceHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceHeroId {
      get { return sourceHeroId_; }
      set {
        sourceHeroId_ = value;
      }
    }

    /// <summary>Field number for the "damage_amount" field.</summary>
    public const int DamageAmountFieldNumber = 4;
    private int damageAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageAmount {
      get { return damageAmount_; }
      set {
        damageAmount_ = value;
      }
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 5;
    private bool broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DamageReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DamageReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetHeroId != other.TargetHeroId) return false;
      if (SourceHeroId != other.SourceHeroId) return false;
      if (DamageAmount != other.DamageAmount) return false;
      if (Broadcast != other.Broadcast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (TargetHeroId != 0) hash ^= TargetHeroId.GetHashCode();
      if (SourceHeroId != 0) hash ^= SourceHeroId.GetHashCode();
      if (DamageAmount != 0) hash ^= DamageAmount.GetHashCode();
      if (Broadcast != false) hash ^= Broadcast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (TargetHeroId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetHeroId);
      }
      if (SourceHeroId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SourceHeroId);
      }
      if (DamageAmount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DamageAmount);
      }
      if (Broadcast != false) {
        output.WriteRawTag(40);
        output.WriteBool(Broadcast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (TargetHeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetHeroId);
      }
      if (SourceHeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceHeroId);
      }
      if (DamageAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageAmount);
      }
      if (Broadcast != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DamageReport other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TargetHeroId != 0) {
        TargetHeroId = other.TargetHeroId;
      }
      if (other.SourceHeroId != 0) {
        SourceHeroId = other.SourceHeroId;
      }
      if (other.DamageAmount != 0) {
        DamageAmount = other.DamageAmount;
      }
      if (other.Broadcast != false) {
        Broadcast = other.Broadcast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetHeroId = input.ReadUInt32();
            break;
          }
          case 24: {
            SourceHeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            DamageAmount = input.ReadInt32();
            break;
          }
          case 40: {
            Broadcast = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_SalutePlayer : pb::IMessage<CDOTAUserMsg_SalutePlayer> {
    private static readonly pb::MessageParser<CDOTAUserMsg_SalutePlayer> _parser = new pb::MessageParser<CDOTAUserMsg_SalutePlayer>(() => new CDOTAUserMsg_SalutePlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SalutePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SalutePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SalutePlayer(CDOTAUserMsg_SalutePlayer other) : this() {
      sourcePlayerId_ = other.sourcePlayerId_;
      targetPlayerId_ = other.targetPlayerId_;
      tipAmount_ = other.tipAmount_;
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SalutePlayer Clone() {
      return new CDOTAUserMsg_SalutePlayer(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { return sourcePlayerId_; }
      set {
        sourcePlayerId_ = value;
      }
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { return targetPlayerId_; }
      set {
        targetPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "tip_amount" field.</summary>
    public const int TipAmountFieldNumber = 3;
    private uint tipAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TipAmount {
      get { return tipAmount_; }
      set {
        tipAmount_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 4;
    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SalutePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SalutePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (TipAmount != other.TipAmount) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourcePlayerId != 0) hash ^= SourcePlayerId.GetHashCode();
      if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
      if (TipAmount != 0) hash ^= TipAmount.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourcePlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (TargetPlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (TipAmount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TipAmount);
      }
      if (EventId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourcePlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (TargetPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (TipAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TipAmount);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SalutePlayer other) {
      if (other == null) {
        return;
      }
      if (other.SourcePlayerId != 0) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.TargetPlayerId != 0) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.TipAmount != 0) {
        TipAmount = other.TipAmount;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            TipAmount = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAUserMsg_TipAlert : pb::IMessage<CDOTAUserMsg_TipAlert> {
    private static readonly pb::MessageParser<CDOTAUserMsg_TipAlert> _parser = new pb::MessageParser<CDOTAUserMsg_TipAlert>(() => new CDOTAUserMsg_TipAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TipAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TipAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TipAlert(CDOTAUserMsg_TipAlert other) : this() {
      playerId_ = other.playerId_;
      tipText_ = other.tipText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TipAlert Clone() {
      return new CDOTAUserMsg_TipAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "tip_text" field.</summary>
    public const int TipTextFieldNumber = 2;
    private string tipText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TipText {
      get { return tipText_; }
      set {
        tipText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TipAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TipAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TipText != other.TipText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (TipText.Length != 0) hash ^= TipText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (TipText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TipText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (TipText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TipText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TipAlert other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TipText.Length != 0) {
        TipText = other.TipText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 18: {
            TipText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgDOTACombatLogEntry : pb::IMessage<CMsgDOTACombatLogEntry> {
    private static readonly pb::MessageParser<CMsgDOTACombatLogEntry> _parser = new pb::MessageParser<CMsgDOTACombatLogEntry>(() => new CMsgDOTACombatLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTACombatLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaUsermessagesReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTACombatLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTACombatLogEntry(CMsgDOTACombatLogEntry other) : this() {
      type_ = other.type_;
      targetName_ = other.targetName_;
      targetSourceName_ = other.targetSourceName_;
      attackerName_ = other.attackerName_;
      damageSourceName_ = other.damageSourceName_;
      inflictorName_ = other.inflictorName_;
      isAttackerIllusion_ = other.isAttackerIllusion_;
      isAttackerHero_ = other.isAttackerHero_;
      isTargetIllusion_ = other.isTargetIllusion_;
      isTargetHero_ = other.isTargetHero_;
      isVisibleRadiant_ = other.isVisibleRadiant_;
      isVisibleDire_ = other.isVisibleDire_;
      value_ = other.value_;
      health_ = other.health_;
      timestamp_ = other.timestamp_;
      stunDuration_ = other.stunDuration_;
      slowDuration_ = other.slowDuration_;
      isAbilityToggleOn_ = other.isAbilityToggleOn_;
      isAbilityToggleOff_ = other.isAbilityToggleOff_;
      abilityLevel_ = other.abilityLevel_;
      locationX_ = other.locationX_;
      locationY_ = other.locationY_;
      goldReason_ = other.goldReason_;
      timestampRaw_ = other.timestampRaw_;
      modifierDuration_ = other.modifierDuration_;
      xpReason_ = other.xpReason_;
      lastHits_ = other.lastHits_;
      attackerTeam_ = other.attackerTeam_;
      targetTeam_ = other.targetTeam_;
      obsWardsPlaced_ = other.obsWardsPlaced_;
      assistPlayer0_ = other.assistPlayer0_;
      assistPlayer1_ = other.assistPlayer1_;
      assistPlayer2_ = other.assistPlayer2_;
      assistPlayer3_ = other.assistPlayer3_;
      stackCount_ = other.stackCount_;
      hiddenModifier_ = other.hiddenModifier_;
      isTargetBuilding_ = other.isTargetBuilding_;
      neutralCampType_ = other.neutralCampType_;
      runeType_ = other.runeType_;
      assistPlayers_ = other.assistPlayers_.Clone();
      isHealSave_ = other.isHealSave_;
      isUltimateAbility_ = other.isUltimateAbility_;
      attackerHeroLevel_ = other.attackerHeroLevel_;
      targetHeroLevel_ = other.targetHeroLevel_;
      xpm_ = other.xpm_;
      gpm_ = other.gpm_;
      eventLocation_ = other.eventLocation_;
      targetIsSelf_ = other.targetIsSelf_;
      damageType_ = other.damageType_;
      invisibilityModifier_ = other.invisibilityModifier_;
      damageCategory_ = other.damageCategory_;
      networth_ = other.networth_;
      buildingType_ = other.buildingType_;
      modifierElapsedDuration_ = other.modifierElapsedDuration_;
      silenceModifier_ = other.silenceModifier_;
      healFromLifesteal_ = other.healFromLifesteal_;
      modifierPurged_ = other.modifierPurged_;
      spellEvaded_ = other.spellEvaded_;
      motionControllerModifier_ = other.motionControllerModifier_;
      longRangeKill_ = other.longRangeKill_;
      modifierPurgeAbility_ = other.modifierPurgeAbility_;
      modifierPurgeNpc_ = other.modifierPurgeNpc_;
      rootModifier_ = other.rootModifier_;
      totalUnitDeathCount_ = other.totalUnitDeathCount_;
      auraModifier_ = other.auraModifier_;
      armorDebuffModifier_ = other.armorDebuffModifier_;
      noPhysicalDamageModifier_ = other.noPhysicalDamageModifier_;
      modifierAbility_ = other.modifierAbility_;
      modifierHidden_ = other.modifierHidden_;
      inflictorIsStolenAbility_ = other.inflictorIsStolenAbility_;
      killEaterEvent_ = other.killEaterEvent_;
      unitStatusLabel_ = other.unitStatusLabel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTACombatLogEntry Clone() {
      return new CMsgDOTACombatLogEntry(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.Dota.DOTA_COMBATLOG_TYPES type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.DOTA_COMBATLOG_TYPES Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "target_name" field.</summary>
    public const int TargetNameFieldNumber = 2;
    private uint targetName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetName {
      get { return targetName_; }
      set {
        targetName_ = value;
      }
    }

    /// <summary>Field number for the "target_source_name" field.</summary>
    public const int TargetSourceNameFieldNumber = 3;
    private uint targetSourceName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetSourceName {
      get { return targetSourceName_; }
      set {
        targetSourceName_ = value;
      }
    }

    /// <summary>Field number for the "attacker_name" field.</summary>
    public const int AttackerNameFieldNumber = 4;
    private uint attackerName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = value;
      }
    }

    /// <summary>Field number for the "damage_source_name" field.</summary>
    public const int DamageSourceNameFieldNumber = 5;
    private uint damageSourceName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageSourceName {
      get { return damageSourceName_; }
      set {
        damageSourceName_ = value;
      }
    }

    /// <summary>Field number for the "inflictor_name" field.</summary>
    public const int InflictorNameFieldNumber = 6;
    private uint inflictorName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InflictorName {
      get { return inflictorName_; }
      set {
        inflictorName_ = value;
      }
    }

    /// <summary>Field number for the "is_attacker_illusion" field.</summary>
    public const int IsAttackerIllusionFieldNumber = 7;
    private bool isAttackerIllusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackerIllusion {
      get { return isAttackerIllusion_; }
      set {
        isAttackerIllusion_ = value;
      }
    }

    /// <summary>Field number for the "is_attacker_hero" field.</summary>
    public const int IsAttackerHeroFieldNumber = 8;
    private bool isAttackerHero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackerHero {
      get { return isAttackerHero_; }
      set {
        isAttackerHero_ = value;
      }
    }

    /// <summary>Field number for the "is_target_illusion" field.</summary>
    public const int IsTargetIllusionFieldNumber = 9;
    private bool isTargetIllusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetIllusion {
      get { return isTargetIllusion_; }
      set {
        isTargetIllusion_ = value;
      }
    }

    /// <summary>Field number for the "is_target_hero" field.</summary>
    public const int IsTargetHeroFieldNumber = 10;
    private bool isTargetHero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetHero {
      get { return isTargetHero_; }
      set {
        isTargetHero_ = value;
      }
    }

    /// <summary>Field number for the "is_visible_radiant" field.</summary>
    public const int IsVisibleRadiantFieldNumber = 11;
    private bool isVisibleRadiant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVisibleRadiant {
      get { return isVisibleRadiant_; }
      set {
        isVisibleRadiant_ = value;
      }
    }

    /// <summary>Field number for the "is_visible_dire" field.</summary>
    public const int IsVisibleDireFieldNumber = 12;
    private bool isVisibleDire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVisibleDire {
      get { return isVisibleDire_; }
      set {
        isVisibleDire_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 13;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 14;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 15;
    private float timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "stun_duration" field.</summary>
    public const int StunDurationFieldNumber = 16;
    private float stunDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StunDuration {
      get { return stunDuration_; }
      set {
        stunDuration_ = value;
      }
    }

    /// <summary>Field number for the "slow_duration" field.</summary>
    public const int SlowDurationFieldNumber = 17;
    private float slowDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlowDuration {
      get { return slowDuration_; }
      set {
        slowDuration_ = value;
      }
    }

    /// <summary>Field number for the "is_ability_toggle_on" field.</summary>
    public const int IsAbilityToggleOnFieldNumber = 18;
    private bool isAbilityToggleOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbilityToggleOn {
      get { return isAbilityToggleOn_; }
      set {
        isAbilityToggleOn_ = value;
      }
    }

    /// <summary>Field number for the "is_ability_toggle_off" field.</summary>
    public const int IsAbilityToggleOffFieldNumber = 19;
    private bool isAbilityToggleOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbilityToggleOff {
      get { return isAbilityToggleOff_; }
      set {
        isAbilityToggleOff_ = value;
      }
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 20;
    private uint abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityLevel {
      get { return abilityLevel_; }
      set {
        abilityLevel_ = value;
      }
    }

    /// <summary>Field number for the "location_x" field.</summary>
    public const int LocationXFieldNumber = 21;
    private float locationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocationX {
      get { return locationX_; }
      set {
        locationX_ = value;
      }
    }

    /// <summary>Field number for the "location_y" field.</summary>
    public const int LocationYFieldNumber = 22;
    private float locationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocationY {
      get { return locationY_; }
      set {
        locationY_ = value;
      }
    }

    /// <summary>Field number for the "gold_reason" field.</summary>
    public const int GoldReasonFieldNumber = 23;
    private uint goldReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldReason {
      get { return goldReason_; }
      set {
        goldReason_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_raw" field.</summary>
    public const int TimestampRawFieldNumber = 24;
    private float timestampRaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimestampRaw {
      get { return timestampRaw_; }
      set {
        timestampRaw_ = value;
      }
    }

    /// <summary>Field number for the "modifier_duration" field.</summary>
    public const int ModifierDurationFieldNumber = 25;
    private float modifierDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ModifierDuration {
      get { return modifierDuration_; }
      set {
        modifierDuration_ = value;
      }
    }

    /// <summary>Field number for the "xp_reason" field.</summary>
    public const int XpReasonFieldNumber = 26;
    private uint xpReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint XpReason {
      get { return xpReason_; }
      set {
        xpReason_ = value;
      }
    }

    /// <summary>Field number for the "last_hits" field.</summary>
    public const int LastHitsFieldNumber = 27;
    private uint lastHits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastHits {
      get { return lastHits_; }
      set {
        lastHits_ = value;
      }
    }

    /// <summary>Field number for the "attacker_team" field.</summary>
    public const int AttackerTeamFieldNumber = 28;
    private uint attackerTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackerTeam {
      get { return attackerTeam_; }
      set {
        attackerTeam_ = value;
      }
    }

    /// <summary>Field number for the "target_team" field.</summary>
    public const int TargetTeamFieldNumber = 29;
    private uint targetTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetTeam {
      get { return targetTeam_; }
      set {
        targetTeam_ = value;
      }
    }

    /// <summary>Field number for the "obs_wards_placed" field.</summary>
    public const int ObsWardsPlacedFieldNumber = 30;
    private uint obsWardsPlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObsWardsPlaced {
      get { return obsWardsPlaced_; }
      set {
        obsWardsPlaced_ = value;
      }
    }

    /// <summary>Field number for the "assist_player0" field.</summary>
    public const int AssistPlayer0FieldNumber = 31;
    private uint assistPlayer0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer0 {
      get { return assistPlayer0_; }
      set {
        assistPlayer0_ = value;
      }
    }

    /// <summary>Field number for the "assist_player1" field.</summary>
    public const int AssistPlayer1FieldNumber = 32;
    private uint assistPlayer1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer1 {
      get { return assistPlayer1_; }
      set {
        assistPlayer1_ = value;
      }
    }

    /// <summary>Field number for the "assist_player2" field.</summary>
    public const int AssistPlayer2FieldNumber = 33;
    private uint assistPlayer2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer2 {
      get { return assistPlayer2_; }
      set {
        assistPlayer2_ = value;
      }
    }

    /// <summary>Field number for the "assist_player3" field.</summary>
    public const int AssistPlayer3FieldNumber = 34;
    private uint assistPlayer3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssistPlayer3 {
      get { return assistPlayer3_; }
      set {
        assistPlayer3_ = value;
      }
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 35;
    private uint stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackCount {
      get { return stackCount_; }
      set {
        stackCount_ = value;
      }
    }

    /// <summary>Field number for the "hidden_modifier" field.</summary>
    public const int HiddenModifierFieldNumber = 36;
    private bool hiddenModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HiddenModifier {
      get { return hiddenModifier_; }
      set {
        hiddenModifier_ = value;
      }
    }

    /// <summary>Field number for the "is_target_building" field.</summary>
    public const int IsTargetBuildingFieldNumber = 37;
    private bool isTargetBuilding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetBuilding {
      get { return isTargetBuilding_; }
      set {
        isTargetBuilding_ = value;
      }
    }

    /// <summary>Field number for the "neutral_camp_type" field.</summary>
    public const int NeutralCampTypeFieldNumber = 38;
    private uint neutralCampType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeutralCampType {
      get { return neutralCampType_; }
      set {
        neutralCampType_ = value;
      }
    }

    /// <summary>Field number for the "rune_type" field.</summary>
    public const int RuneTypeFieldNumber = 39;
    private uint runeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneType {
      get { return runeType_; }
      set {
        runeType_ = value;
      }
    }

    /// <summary>Field number for the "assist_players" field.</summary>
    public const int AssistPlayersFieldNumber = 40;
    private static readonly pb::FieldCodec<uint> _repeated_assistPlayers_codec
        = pb::FieldCodec.ForUInt32(322);
    private readonly pbc::RepeatedField<uint> assistPlayers_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AssistPlayers {
      get { return assistPlayers_; }
    }

    /// <summary>Field number for the "is_heal_save" field.</summary>
    public const int IsHealSaveFieldNumber = 41;
    private bool isHealSave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHealSave {
      get { return isHealSave_; }
      set {
        isHealSave_ = value;
      }
    }

    /// <summary>Field number for the "is_ultimate_ability" field.</summary>
    public const int IsUltimateAbilityFieldNumber = 42;
    private bool isUltimateAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUltimateAbility {
      get { return isUltimateAbility_; }
      set {
        isUltimateAbility_ = value;
      }
    }

    /// <summary>Field number for the "attacker_hero_level" field.</summary>
    public const int AttackerHeroLevelFieldNumber = 43;
    private uint attackerHeroLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackerHeroLevel {
      get { return attackerHeroLevel_; }
      set {
        attackerHeroLevel_ = value;
      }
    }

    /// <summary>Field number for the "target_hero_level" field.</summary>
    public const int TargetHeroLevelFieldNumber = 44;
    private uint targetHeroLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetHeroLevel {
      get { return targetHeroLevel_; }
      set {
        targetHeroLevel_ = value;
      }
    }

    /// <summary>Field number for the "xpm" field.</summary>
    public const int XpmFieldNumber = 45;
    private uint xpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xpm {
      get { return xpm_; }
      set {
        xpm_ = value;
      }
    }

    /// <summary>Field number for the "gpm" field.</summary>
    public const int GpmFieldNumber = 46;
    private uint gpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gpm {
      get { return gpm_; }
      set {
        gpm_ = value;
      }
    }

    /// <summary>Field number for the "event_location" field.</summary>
    public const int EventLocationFieldNumber = 47;
    private uint eventLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventLocation {
      get { return eventLocation_; }
      set {
        eventLocation_ = value;
      }
    }

    /// <summary>Field number for the "target_is_self" field.</summary>
    public const int TargetIsSelfFieldNumber = 48;
    private bool targetIsSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TargetIsSelf {
      get { return targetIsSelf_; }
      set {
        targetIsSelf_ = value;
      }
    }

    /// <summary>Field number for the "damage_type" field.</summary>
    public const int DamageTypeFieldNumber = 49;
    private uint damageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    /// <summary>Field number for the "invisibility_modifier" field.</summary>
    public const int InvisibilityModifierFieldNumber = 50;
    private bool invisibilityModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InvisibilityModifier {
      get { return invisibilityModifier_; }
      set {
        invisibilityModifier_ = value;
      }
    }

    /// <summary>Field number for the "damage_category" field.</summary>
    public const int DamageCategoryFieldNumber = 51;
    private uint damageCategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageCategory {
      get { return damageCategory_; }
      set {
        damageCategory_ = value;
      }
    }

    /// <summary>Field number for the "networth" field.</summary>
    public const int NetworthFieldNumber = 52;
    private uint networth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Networth {
      get { return networth_; }
      set {
        networth_ = value;
      }
    }

    /// <summary>Field number for the "building_type" field.</summary>
    public const int BuildingTypeFieldNumber = 53;
    private uint buildingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildingType {
      get { return buildingType_; }
      set {
        buildingType_ = value;
      }
    }

    /// <summary>Field number for the "modifier_elapsed_duration" field.</summary>
    public const int ModifierElapsedDurationFieldNumber = 54;
    private float modifierElapsedDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ModifierElapsedDuration {
      get { return modifierElapsedDuration_; }
      set {
        modifierElapsedDuration_ = value;
      }
    }

    /// <summary>Field number for the "silence_modifier" field.</summary>
    public const int SilenceModifierFieldNumber = 55;
    private bool silenceModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SilenceModifier {
      get { return silenceModifier_; }
      set {
        silenceModifier_ = value;
      }
    }

    /// <summary>Field number for the "heal_from_lifesteal" field.</summary>
    public const int HealFromLifestealFieldNumber = 56;
    private bool healFromLifesteal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HealFromLifesteal {
      get { return healFromLifesteal_; }
      set {
        healFromLifesteal_ = value;
      }
    }

    /// <summary>Field number for the "modifier_purged" field.</summary>
    public const int ModifierPurgedFieldNumber = 57;
    private bool modifierPurged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModifierPurged {
      get { return modifierPurged_; }
      set {
        modifierPurged_ = value;
      }
    }

    /// <summary>Field number for the "spell_evaded" field.</summary>
    public const int SpellEvadedFieldNumber = 58;
    private bool spellEvaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpellEvaded {
      get { return spellEvaded_; }
      set {
        spellEvaded_ = value;
      }
    }

    /// <summary>Field number for the "motion_controller_modifier" field.</summary>
    public const int MotionControllerModifierFieldNumber = 59;
    private bool motionControllerModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MotionControllerModifier {
      get { return motionControllerModifier_; }
      set {
        motionControllerModifier_ = value;
      }
    }

    /// <summary>Field number for the "long_range_kill" field.</summary>
    public const int LongRangeKillFieldNumber = 60;
    private bool longRangeKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LongRangeKill {
      get { return longRangeKill_; }
      set {
        longRangeKill_ = value;
      }
    }

    /// <summary>Field number for the "modifier_purge_ability" field.</summary>
    public const int ModifierPurgeAbilityFieldNumber = 61;
    private uint modifierPurgeAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModifierPurgeAbility {
      get { return modifierPurgeAbility_; }
      set {
        modifierPurgeAbility_ = value;
      }
    }

    /// <summary>Field number for the "modifier_purge_npc" field.</summary>
    public const int ModifierPurgeNpcFieldNumber = 62;
    private uint modifierPurgeNpc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModifierPurgeNpc {
      get { return modifierPurgeNpc_; }
      set {
        modifierPurgeNpc_ = value;
      }
    }

    /// <summary>Field number for the "root_modifier" field.</summary>
    public const int RootModifierFieldNumber = 63;
    private bool rootModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RootModifier {
      get { return rootModifier_; }
      set {
        rootModifier_ = value;
      }
    }

    /// <summary>Field number for the "total_unit_death_count" field.</summary>
    public const int TotalUnitDeathCountFieldNumber = 64;
    private uint totalUnitDeathCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalUnitDeathCount {
      get { return totalUnitDeathCount_; }
      set {
        totalUnitDeathCount_ = value;
      }
    }

    /// <summary>Field number for the "aura_modifier" field.</summary>
    public const int AuraModifierFieldNumber = 65;
    private bool auraModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AuraModifier {
      get { return auraModifier_; }
      set {
        auraModifier_ = value;
      }
    }

    /// <summary>Field number for the "armor_debuff_modifier" field.</summary>
    public const int ArmorDebuffModifierFieldNumber = 66;
    private bool armorDebuffModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArmorDebuffModifier {
      get { return armorDebuffModifier_; }
      set {
        armorDebuffModifier_ = value;
      }
    }

    /// <summary>Field number for the "no_physical_damage_modifier" field.</summary>
    public const int NoPhysicalDamageModifierFieldNumber = 67;
    private bool noPhysicalDamageModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoPhysicalDamageModifier {
      get { return noPhysicalDamageModifier_; }
      set {
        noPhysicalDamageModifier_ = value;
      }
    }

    /// <summary>Field number for the "modifier_ability" field.</summary>
    public const int ModifierAbilityFieldNumber = 68;
    private uint modifierAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModifierAbility {
      get { return modifierAbility_; }
      set {
        modifierAbility_ = value;
      }
    }

    /// <summary>Field number for the "modifier_hidden" field.</summary>
    public const int ModifierHiddenFieldNumber = 69;
    private bool modifierHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModifierHidden {
      get { return modifierHidden_; }
      set {
        modifierHidden_ = value;
      }
    }

    /// <summary>Field number for the "inflictor_is_stolen_ability" field.</summary>
    public const int InflictorIsStolenAbilityFieldNumber = 70;
    private bool inflictorIsStolenAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InflictorIsStolenAbility {
      get { return inflictorIsStolenAbility_; }
      set {
        inflictorIsStolenAbility_ = value;
      }
    }

    /// <summary>Field number for the "kill_eater_event" field.</summary>
    public const int KillEaterEventFieldNumber = 71;
    private uint killEaterEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillEaterEvent {
      get { return killEaterEvent_; }
      set {
        killEaterEvent_ = value;
      }
    }

    /// <summary>Field number for the "unit_status_label" field.</summary>
    public const int UnitStatusLabelFieldNumber = 72;
    private uint unitStatusLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitStatusLabel {
      get { return unitStatusLabel_; }
      set {
        unitStatusLabel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTACombatLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTACombatLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TargetName != other.TargetName) return false;
      if (TargetSourceName != other.TargetSourceName) return false;
      if (AttackerName != other.AttackerName) return false;
      if (DamageSourceName != other.DamageSourceName) return false;
      if (InflictorName != other.InflictorName) return false;
      if (IsAttackerIllusion != other.IsAttackerIllusion) return false;
      if (IsAttackerHero != other.IsAttackerHero) return false;
      if (IsTargetIllusion != other.IsTargetIllusion) return false;
      if (IsTargetHero != other.IsTargetHero) return false;
      if (IsVisibleRadiant != other.IsVisibleRadiant) return false;
      if (IsVisibleDire != other.IsVisibleDire) return false;
      if (Value != other.Value) return false;
      if (Health != other.Health) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StunDuration, other.StunDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlowDuration, other.SlowDuration)) return false;
      if (IsAbilityToggleOn != other.IsAbilityToggleOn) return false;
      if (IsAbilityToggleOff != other.IsAbilityToggleOff) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocationX, other.LocationX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocationY, other.LocationY)) return false;
      if (GoldReason != other.GoldReason) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimestampRaw, other.TimestampRaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ModifierDuration, other.ModifierDuration)) return false;
      if (XpReason != other.XpReason) return false;
      if (LastHits != other.LastHits) return false;
      if (AttackerTeam != other.AttackerTeam) return false;
      if (TargetTeam != other.TargetTeam) return false;
      if (ObsWardsPlaced != other.ObsWardsPlaced) return false;
      if (AssistPlayer0 != other.AssistPlayer0) return false;
      if (AssistPlayer1 != other.AssistPlayer1) return false;
      if (AssistPlayer2 != other.AssistPlayer2) return false;
      if (AssistPlayer3 != other.AssistPlayer3) return false;
      if (StackCount != other.StackCount) return false;
      if (HiddenModifier != other.HiddenModifier) return false;
      if (IsTargetBuilding != other.IsTargetBuilding) return false;
      if (NeutralCampType != other.NeutralCampType) return false;
      if (RuneType != other.RuneType) return false;
      if(!assistPlayers_.Equals(other.assistPlayers_)) return false;
      if (IsHealSave != other.IsHealSave) return false;
      if (IsUltimateAbility != other.IsUltimateAbility) return false;
      if (AttackerHeroLevel != other.AttackerHeroLevel) return false;
      if (TargetHeroLevel != other.TargetHeroLevel) return false;
      if (Xpm != other.Xpm) return false;
      if (Gpm != other.Gpm) return false;
      if (EventLocation != other.EventLocation) return false;
      if (TargetIsSelf != other.TargetIsSelf) return false;
      if (DamageType != other.DamageType) return false;
      if (InvisibilityModifier != other.InvisibilityModifier) return false;
      if (DamageCategory != other.DamageCategory) return false;
      if (Networth != other.Networth) return false;
      if (BuildingType != other.BuildingType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ModifierElapsedDuration, other.ModifierElapsedDuration)) return false;
      if (SilenceModifier != other.SilenceModifier) return false;
      if (HealFromLifesteal != other.HealFromLifesteal) return false;
      if (ModifierPurged != other.ModifierPurged) return false;
      if (SpellEvaded != other.SpellEvaded) return false;
      if (MotionControllerModifier != other.MotionControllerModifier) return false;
      if (LongRangeKill != other.LongRangeKill) return false;
      if (ModifierPurgeAbility != other.ModifierPurgeAbility) return false;
      if (ModifierPurgeNpc != other.ModifierPurgeNpc) return false;
      if (RootModifier != other.RootModifier) return false;
      if (TotalUnitDeathCount != other.TotalUnitDeathCount) return false;
      if (AuraModifier != other.AuraModifier) return false;
      if (ArmorDebuffModifier != other.ArmorDebuffModifier) return false;
      if (NoPhysicalDamageModifier != other.NoPhysicalDamageModifier) return false;
      if (ModifierAbility != other.ModifierAbility) return false;
      if (ModifierHidden != other.ModifierHidden) return false;
      if (InflictorIsStolenAbility != other.InflictorIsStolenAbility) return false;
      if (KillEaterEvent != other.KillEaterEvent) return false;
      if (UnitStatusLabel != other.UnitStatusLabel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TargetName != 0) hash ^= TargetName.GetHashCode();
      if (TargetSourceName != 0) hash ^= TargetSourceName.GetHashCode();
      if (AttackerName != 0) hash ^= AttackerName.GetHashCode();
      if (DamageSourceName != 0) hash ^= DamageSourceName.GetHashCode();
      if (InflictorName != 0) hash ^= InflictorName.GetHashCode();
      if (IsAttackerIllusion != false) hash ^= IsAttackerIllusion.GetHashCode();
      if (IsAttackerHero != false) hash ^= IsAttackerHero.GetHashCode();
      if (IsTargetIllusion != false) hash ^= IsTargetIllusion.GetHashCode();
      if (IsTargetHero != false) hash ^= IsTargetHero.GetHashCode();
      if (IsVisibleRadiant != false) hash ^= IsVisibleRadiant.GetHashCode();
      if (IsVisibleDire != false) hash ^= IsVisibleDire.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Timestamp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
      if (StunDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StunDuration);
      if (SlowDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlowDuration);
      if (IsAbilityToggleOn != false) hash ^= IsAbilityToggleOn.GetHashCode();
      if (IsAbilityToggleOff != false) hash ^= IsAbilityToggleOff.GetHashCode();
      if (AbilityLevel != 0) hash ^= AbilityLevel.GetHashCode();
      if (LocationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocationX);
      if (LocationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocationY);
      if (GoldReason != 0) hash ^= GoldReason.GetHashCode();
      if (TimestampRaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimestampRaw);
      if (ModifierDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ModifierDuration);
      if (XpReason != 0) hash ^= XpReason.GetHashCode();
      if (LastHits != 0) hash ^= LastHits.GetHashCode();
      if (AttackerTeam != 0) hash ^= AttackerTeam.GetHashCode();
      if (TargetTeam != 0) hash ^= TargetTeam.GetHashCode();
      if (ObsWardsPlaced != 0) hash ^= ObsWardsPlaced.GetHashCode();
      if (AssistPlayer0 != 0) hash ^= AssistPlayer0.GetHashCode();
      if (AssistPlayer1 != 0) hash ^= AssistPlayer1.GetHashCode();
      if (AssistPlayer2 != 0) hash ^= AssistPlayer2.GetHashCode();
      if (AssistPlayer3 != 0) hash ^= AssistPlayer3.GetHashCode();
      if (StackCount != 0) hash ^= StackCount.GetHashCode();
      if (HiddenModifier != false) hash ^= HiddenModifier.GetHashCode();
      if (IsTargetBuilding != false) hash ^= IsTargetBuilding.GetHashCode();
      if (NeutralCampType != 0) hash ^= NeutralCampType.GetHashCode();
      if (RuneType != 0) hash ^= RuneType.GetHashCode();
      hash ^= assistPlayers_.GetHashCode();
      if (IsHealSave != false) hash ^= IsHealSave.GetHashCode();
      if (IsUltimateAbility != false) hash ^= IsUltimateAbility.GetHashCode();
      if (AttackerHeroLevel != 0) hash ^= AttackerHeroLevel.GetHashCode();
      if (TargetHeroLevel != 0) hash ^= TargetHeroLevel.GetHashCode();
      if (Xpm != 0) hash ^= Xpm.GetHashCode();
      if (Gpm != 0) hash ^= Gpm.GetHashCode();
      if (EventLocation != 0) hash ^= EventLocation.GetHashCode();
      if (TargetIsSelf != false) hash ^= TargetIsSelf.GetHashCode();
      if (DamageType != 0) hash ^= DamageType.GetHashCode();
      if (InvisibilityModifier != false) hash ^= InvisibilityModifier.GetHashCode();
      if (DamageCategory != 0) hash ^= DamageCategory.GetHashCode();
      if (Networth != 0) hash ^= Networth.GetHashCode();
      if (BuildingType != 0) hash ^= BuildingType.GetHashCode();
      if (ModifierElapsedDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ModifierElapsedDuration);
      if (SilenceModifier != false) hash ^= SilenceModifier.GetHashCode();
      if (HealFromLifesteal != false) hash ^= HealFromLifesteal.GetHashCode();
      if (ModifierPurged != false) hash ^= ModifierPurged.GetHashCode();
      if (SpellEvaded != false) hash ^= SpellEvaded.GetHashCode();
      if (MotionControllerModifier != false) hash ^= MotionControllerModifier.GetHashCode();
      if (LongRangeKill != false) hash ^= LongRangeKill.GetHashCode();
      if (ModifierPurgeAbility != 0) hash ^= ModifierPurgeAbility.GetHashCode();
      if (ModifierPurgeNpc != 0) hash ^= ModifierPurgeNpc.GetHashCode();
      if (RootModifier != false) hash ^= RootModifier.GetHashCode();
      if (TotalUnitDeathCount != 0) hash ^= TotalUnitDeathCount.GetHashCode();
      if (AuraModifier != false) hash ^= AuraModifier.GetHashCode();
      if (ArmorDebuffModifier != false) hash ^= ArmorDebuffModifier.GetHashCode();
      if (NoPhysicalDamageModifier != false) hash ^= NoPhysicalDamageModifier.GetHashCode();
      if (ModifierAbility != 0) hash ^= ModifierAbility.GetHashCode();
      if (ModifierHidden != false) hash ^= ModifierHidden.GetHashCode();
      if (InflictorIsStolenAbility != false) hash ^= InflictorIsStolenAbility.GetHashCode();
      if (KillEaterEvent != 0) hash ^= KillEaterEvent.GetHashCode();
      if (UnitStatusLabel != 0) hash ^= UnitStatusLabel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TargetName != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetName);
      }
      if (TargetSourceName != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetSourceName);
      }
      if (AttackerName != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AttackerName);
      }
      if (DamageSourceName != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DamageSourceName);
      }
      if (InflictorName != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(InflictorName);
      }
      if (IsAttackerIllusion != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttackerIllusion);
      }
      if (IsAttackerHero != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAttackerHero);
      }
      if (IsTargetIllusion != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsTargetIllusion);
      }
      if (IsTargetHero != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsTargetHero);
      }
      if (IsVisibleRadiant != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsVisibleRadiant);
      }
      if (IsVisibleDire != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsVisibleDire);
      }
      if (Value != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Value);
      }
      if (Health != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Health);
      }
      if (Timestamp != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Timestamp);
      }
      if (StunDuration != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(StunDuration);
      }
      if (SlowDuration != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SlowDuration);
      }
      if (IsAbilityToggleOn != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAbilityToggleOn);
      }
      if (IsAbilityToggleOff != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsAbilityToggleOff);
      }
      if (AbilityLevel != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(AbilityLevel);
      }
      if (LocationX != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(LocationX);
      }
      if (LocationY != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(LocationY);
      }
      if (GoldReason != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(GoldReason);
      }
      if (TimestampRaw != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(TimestampRaw);
      }
      if (ModifierDuration != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(ModifierDuration);
      }
      if (XpReason != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(XpReason);
      }
      if (LastHits != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(LastHits);
      }
      if (AttackerTeam != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(AttackerTeam);
      }
      if (TargetTeam != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(TargetTeam);
      }
      if (ObsWardsPlaced != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ObsWardsPlaced);
      }
      if (AssistPlayer0 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(AssistPlayer0);
      }
      if (AssistPlayer1 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(AssistPlayer1);
      }
      if (AssistPlayer2 != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(AssistPlayer2);
      }
      if (AssistPlayer3 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(AssistPlayer3);
      }
      if (StackCount != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(StackCount);
      }
      if (HiddenModifier != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(HiddenModifier);
      }
      if (IsTargetBuilding != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsTargetBuilding);
      }
      if (NeutralCampType != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(NeutralCampType);
      }
      if (RuneType != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(RuneType);
      }
      assistPlayers_.WriteTo(output, _repeated_assistPlayers_codec);
      if (IsHealSave != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(IsHealSave);
      }
      if (IsUltimateAbility != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(IsUltimateAbility);
      }
      if (AttackerHeroLevel != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(AttackerHeroLevel);
      }
      if (TargetHeroLevel != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(TargetHeroLevel);
      }
      if (Xpm != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(Xpm);
      }
      if (Gpm != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(Gpm);
      }
      if (EventLocation != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(EventLocation);
      }
      if (TargetIsSelf != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(TargetIsSelf);
      }
      if (DamageType != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(DamageType);
      }
      if (InvisibilityModifier != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(InvisibilityModifier);
      }
      if (DamageCategory != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(DamageCategory);
      }
      if (Networth != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(Networth);
      }
      if (BuildingType != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(BuildingType);
      }
      if (ModifierElapsedDuration != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(ModifierElapsedDuration);
      }
      if (SilenceModifier != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(SilenceModifier);
      }
      if (HealFromLifesteal != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(HealFromLifesteal);
      }
      if (ModifierPurged != false) {
        output.WriteRawTag(200, 3);
        output.WriteBool(ModifierPurged);
      }
      if (SpellEvaded != false) {
        output.WriteRawTag(208, 3);
        output.WriteBool(SpellEvaded);
      }
      if (MotionControllerModifier != false) {
        output.WriteRawTag(216, 3);
        output.WriteBool(MotionControllerModifier);
      }
      if (LongRangeKill != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(LongRangeKill);
      }
      if (ModifierPurgeAbility != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(ModifierPurgeAbility);
      }
      if (ModifierPurgeNpc != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(ModifierPurgeNpc);
      }
      if (RootModifier != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(RootModifier);
      }
      if (TotalUnitDeathCount != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(TotalUnitDeathCount);
      }
      if (AuraModifier != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(AuraModifier);
      }
      if (ArmorDebuffModifier != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(ArmorDebuffModifier);
      }
      if (NoPhysicalDamageModifier != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(NoPhysicalDamageModifier);
      }
      if (ModifierAbility != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(ModifierAbility);
      }
      if (ModifierHidden != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(ModifierHidden);
      }
      if (InflictorIsStolenAbility != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(InflictorIsStolenAbility);
      }
      if (KillEaterEvent != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(KillEaterEvent);
      }
      if (UnitStatusLabel != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(UnitStatusLabel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TargetName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetName);
      }
      if (TargetSourceName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetSourceName);
      }
      if (AttackerName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackerName);
      }
      if (DamageSourceName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageSourceName);
      }
      if (InflictorName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InflictorName);
      }
      if (IsAttackerIllusion != false) {
        size += 1 + 1;
      }
      if (IsAttackerHero != false) {
        size += 1 + 1;
      }
      if (IsTargetIllusion != false) {
        size += 1 + 1;
      }
      if (IsTargetHero != false) {
        size += 1 + 1;
      }
      if (IsVisibleRadiant != false) {
        size += 1 + 1;
      }
      if (IsVisibleDire != false) {
        size += 1 + 1;
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Timestamp != 0F) {
        size += 1 + 4;
      }
      if (StunDuration != 0F) {
        size += 2 + 4;
      }
      if (SlowDuration != 0F) {
        size += 2 + 4;
      }
      if (IsAbilityToggleOn != false) {
        size += 2 + 1;
      }
      if (IsAbilityToggleOff != false) {
        size += 2 + 1;
      }
      if (AbilityLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AbilityLevel);
      }
      if (LocationX != 0F) {
        size += 2 + 4;
      }
      if (LocationY != 0F) {
        size += 2 + 4;
      }
      if (GoldReason != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldReason);
      }
      if (TimestampRaw != 0F) {
        size += 2 + 4;
      }
      if (ModifierDuration != 0F) {
        size += 2 + 4;
      }
      if (XpReason != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(XpReason);
      }
      if (LastHits != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
      }
      if (AttackerTeam != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackerTeam);
      }
      if (TargetTeam != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetTeam);
      }
      if (ObsWardsPlaced != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsWardsPlaced);
      }
      if (AssistPlayer0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer0);
      }
      if (AssistPlayer1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer1);
      }
      if (AssistPlayer2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer2);
      }
      if (AssistPlayer3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer3);
      }
      if (StackCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StackCount);
      }
      if (HiddenModifier != false) {
        size += 2 + 1;
      }
      if (IsTargetBuilding != false) {
        size += 2 + 1;
      }
      if (NeutralCampType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeutralCampType);
      }
      if (RuneType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RuneType);
      }
      size += assistPlayers_.CalculateSize(_repeated_assistPlayers_codec);
      if (IsHealSave != false) {
        size += 2 + 1;
      }
      if (IsUltimateAbility != false) {
        size += 2 + 1;
      }
      if (AttackerHeroLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackerHeroLevel);
      }
      if (TargetHeroLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetHeroLevel);
      }
      if (Xpm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Xpm);
      }
      if (Gpm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gpm);
      }
      if (EventLocation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventLocation);
      }
      if (TargetIsSelf != false) {
        size += 2 + 1;
      }
      if (DamageType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageType);
      }
      if (InvisibilityModifier != false) {
        size += 2 + 1;
      }
      if (DamageCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageCategory);
      }
      if (Networth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Networth);
      }
      if (BuildingType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuildingType);
      }
      if (ModifierElapsedDuration != 0F) {
        size += 2 + 4;
      }
      if (SilenceModifier != false) {
        size += 2 + 1;
      }
      if (HealFromLifesteal != false) {
        size += 2 + 1;
      }
      if (ModifierPurged != false) {
        size += 2 + 1;
      }
      if (SpellEvaded != false) {
        size += 2 + 1;
      }
      if (MotionControllerModifier != false) {
        size += 2 + 1;
      }
      if (LongRangeKill != false) {
        size += 2 + 1;
      }
      if (ModifierPurgeAbility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierPurgeAbility);
      }
      if (ModifierPurgeNpc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierPurgeNpc);
      }
      if (RootModifier != false) {
        size += 2 + 1;
      }
      if (TotalUnitDeathCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalUnitDeathCount);
      }
      if (AuraModifier != false) {
        size += 2 + 1;
      }
      if (ArmorDebuffModifier != false) {
        size += 2 + 1;
      }
      if (NoPhysicalDamageModifier != false) {
        size += 2 + 1;
      }
      if (ModifierAbility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierAbility);
      }
      if (ModifierHidden != false) {
        size += 2 + 1;
      }
      if (InflictorIsStolenAbility != false) {
        size += 2 + 1;
      }
      if (KillEaterEvent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KillEaterEvent);
      }
      if (UnitStatusLabel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnitStatusLabel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTACombatLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TargetName != 0) {
        TargetName = other.TargetName;
      }
      if (other.TargetSourceName != 0) {
        TargetSourceName = other.TargetSourceName;
      }
      if (other.AttackerName != 0) {
        AttackerName = other.AttackerName;
      }
      if (other.DamageSourceName != 0) {
        DamageSourceName = other.DamageSourceName;
      }
      if (other.InflictorName != 0) {
        InflictorName = other.InflictorName;
      }
      if (other.IsAttackerIllusion != false) {
        IsAttackerIllusion = other.IsAttackerIllusion;
      }
      if (other.IsAttackerHero != false) {
        IsAttackerHero = other.IsAttackerHero;
      }
      if (other.IsTargetIllusion != false) {
        IsTargetIllusion = other.IsTargetIllusion;
      }
      if (other.IsTargetHero != false) {
        IsTargetHero = other.IsTargetHero;
      }
      if (other.IsVisibleRadiant != false) {
        IsVisibleRadiant = other.IsVisibleRadiant;
      }
      if (other.IsVisibleDire != false) {
        IsVisibleDire = other.IsVisibleDire;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Timestamp != 0F) {
        Timestamp = other.Timestamp;
      }
      if (other.StunDuration != 0F) {
        StunDuration = other.StunDuration;
      }
      if (other.SlowDuration != 0F) {
        SlowDuration = other.SlowDuration;
      }
      if (other.IsAbilityToggleOn != false) {
        IsAbilityToggleOn = other.IsAbilityToggleOn;
      }
      if (other.IsAbilityToggleOff != false) {
        IsAbilityToggleOff = other.IsAbilityToggleOff;
      }
      if (other.AbilityLevel != 0) {
        AbilityLevel = other.AbilityLevel;
      }
      if (other.LocationX != 0F) {
        LocationX = other.LocationX;
      }
      if (other.LocationY != 0F) {
        LocationY = other.LocationY;
      }
      if (other.GoldReason != 0) {
        GoldReason = other.GoldReason;
      }
      if (other.TimestampRaw != 0F) {
        TimestampRaw = other.TimestampRaw;
      }
      if (other.ModifierDuration != 0F) {
        ModifierDuration = other.ModifierDuration;
      }
      if (other.XpReason != 0) {
        XpReason = other.XpReason;
      }
      if (other.LastHits != 0) {
        LastHits = other.LastHits;
      }
      if (other.AttackerTeam != 0) {
        AttackerTeam = other.AttackerTeam;
      }
      if (other.TargetTeam != 0) {
        TargetTeam = other.TargetTeam;
      }
      if (other.ObsWardsPlaced != 0) {
        ObsWardsPlaced = other.ObsWardsPlaced;
      }
      if (other.AssistPlayer0 != 0) {
        AssistPlayer0 = other.AssistPlayer0;
      }
      if (other.AssistPlayer1 != 0) {
        AssistPlayer1 = other.AssistPlayer1;
      }
      if (other.AssistPlayer2 != 0) {
        AssistPlayer2 = other.AssistPlayer2;
      }
      if (other.AssistPlayer3 != 0) {
        AssistPlayer3 = other.AssistPlayer3;
      }
      if (other.StackCount != 0) {
        StackCount = other.StackCount;
      }
      if (other.HiddenModifier != false) {
        HiddenModifier = other.HiddenModifier;
      }
      if (other.IsTargetBuilding != false) {
        IsTargetBuilding = other.IsTargetBuilding;
      }
      if (other.NeutralCampType != 0) {
        NeutralCampType = other.NeutralCampType;
      }
      if (other.RuneType != 0) {
        RuneType = other.RuneType;
      }
      assistPlayers_.Add(other.assistPlayers_);
      if (other.IsHealSave != false) {
        IsHealSave = other.IsHealSave;
      }
      if (other.IsUltimateAbility != false) {
        IsUltimateAbility = other.IsUltimateAbility;
      }
      if (other.AttackerHeroLevel != 0) {
        AttackerHeroLevel = other.AttackerHeroLevel;
      }
      if (other.TargetHeroLevel != 0) {
        TargetHeroLevel = other.TargetHeroLevel;
      }
      if (other.Xpm != 0) {
        Xpm = other.Xpm;
      }
      if (other.Gpm != 0) {
        Gpm = other.Gpm;
      }
      if (other.EventLocation != 0) {
        EventLocation = other.EventLocation;
      }
      if (other.TargetIsSelf != false) {
        TargetIsSelf = other.TargetIsSelf;
      }
      if (other.DamageType != 0) {
        DamageType = other.DamageType;
      }
      if (other.InvisibilityModifier != false) {
        InvisibilityModifier = other.InvisibilityModifier;
      }
      if (other.DamageCategory != 0) {
        DamageCategory = other.DamageCategory;
      }
      if (other.Networth != 0) {
        Networth = other.Networth;
      }
      if (other.BuildingType != 0) {
        BuildingType = other.BuildingType;
      }
      if (other.ModifierElapsedDuration != 0F) {
        ModifierElapsedDuration = other.ModifierElapsedDuration;
      }
      if (other.SilenceModifier != false) {
        SilenceModifier = other.SilenceModifier;
      }
      if (other.HealFromLifesteal != false) {
        HealFromLifesteal = other.HealFromLifesteal;
      }
      if (other.ModifierPurged != false) {
        ModifierPurged = other.ModifierPurged;
      }
      if (other.SpellEvaded != false) {
        SpellEvaded = other.SpellEvaded;
      }
      if (other.MotionControllerModifier != false) {
        MotionControllerModifier = other.MotionControllerModifier;
      }
      if (other.LongRangeKill != false) {
        LongRangeKill = other.LongRangeKill;
      }
      if (other.ModifierPurgeAbility != 0) {
        ModifierPurgeAbility = other.ModifierPurgeAbility;
      }
      if (other.ModifierPurgeNpc != 0) {
        ModifierPurgeNpc = other.ModifierPurgeNpc;
      }
      if (other.RootModifier != false) {
        RootModifier = other.RootModifier;
      }
      if (other.TotalUnitDeathCount != 0) {
        TotalUnitDeathCount = other.TotalUnitDeathCount;
      }
      if (other.AuraModifier != false) {
        AuraModifier = other.AuraModifier;
      }
      if (other.ArmorDebuffModifier != false) {
        ArmorDebuffModifier = other.ArmorDebuffModifier;
      }
      if (other.NoPhysicalDamageModifier != false) {
        NoPhysicalDamageModifier = other.NoPhysicalDamageModifier;
      }
      if (other.ModifierAbility != 0) {
        ModifierAbility = other.ModifierAbility;
      }
      if (other.ModifierHidden != false) {
        ModifierHidden = other.ModifierHidden;
      }
      if (other.InflictorIsStolenAbility != false) {
        InflictorIsStolenAbility = other.InflictorIsStolenAbility;
      }
      if (other.KillEaterEvent != 0) {
        KillEaterEvent = other.KillEaterEvent;
      }
      if (other.UnitStatusLabel != 0) {
        UnitStatusLabel = other.UnitStatusLabel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Proto.Dota.DOTA_COMBATLOG_TYPES) input.ReadEnum();
            break;
          }
          case 16: {
            TargetName = input.ReadUInt32();
            break;
          }
          case 24: {
            TargetSourceName = input.ReadUInt32();
            break;
          }
          case 32: {
            AttackerName = input.ReadUInt32();
            break;
          }
          case 40: {
            DamageSourceName = input.ReadUInt32();
            break;
          }
          case 48: {
            InflictorName = input.ReadUInt32();
            break;
          }
          case 56: {
            IsAttackerIllusion = input.ReadBool();
            break;
          }
          case 64: {
            IsAttackerHero = input.ReadBool();
            break;
          }
          case 72: {
            IsTargetIllusion = input.ReadBool();
            break;
          }
          case 80: {
            IsTargetHero = input.ReadBool();
            break;
          }
          case 88: {
            IsVisibleRadiant = input.ReadBool();
            break;
          }
          case 96: {
            IsVisibleDire = input.ReadBool();
            break;
          }
          case 104: {
            Value = input.ReadUInt32();
            break;
          }
          case 112: {
            Health = input.ReadInt32();
            break;
          }
          case 125: {
            Timestamp = input.ReadFloat();
            break;
          }
          case 133: {
            StunDuration = input.ReadFloat();
            break;
          }
          case 141: {
            SlowDuration = input.ReadFloat();
            break;
          }
          case 144: {
            IsAbilityToggleOn = input.ReadBool();
            break;
          }
          case 152: {
            IsAbilityToggleOff = input.ReadBool();
            break;
          }
          case 160: {
            AbilityLevel = input.ReadUInt32();
            break;
          }
          case 173: {
            LocationX = input.ReadFloat();
            break;
          }
          case 181: {
            LocationY = input.ReadFloat();
            break;
          }
          case 184: {
            GoldReason = input.ReadUInt32();
            break;
          }
          case 197: {
            TimestampRaw = input.ReadFloat();
            break;
          }
          case 205: {
            ModifierDuration = input.ReadFloat();
            break;
          }
          case 208: {
            XpReason = input.ReadUInt32();
            break;
          }
          case 216: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 224: {
            AttackerTeam = input.ReadUInt32();
            break;
          }
          case 232: {
            TargetTeam = input.ReadUInt32();
            break;
          }
          case 240: {
            ObsWardsPlaced = input.ReadUInt32();
            break;
          }
          case 248: {
            AssistPlayer0 = input.ReadUInt32();
            break;
          }
          case 256: {
            AssistPlayer1 = input.ReadUInt32();
            break;
          }
          case 264: {
            AssistPlayer2 = input.ReadUInt32();
            break;
          }
          case 272: {
            AssistPlayer3 = input.ReadUInt32();
            break;
          }
          case 280: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 288: {
            HiddenModifier = input.ReadBool();
            break;
          }
          case 296: {
            IsTargetBuilding = input.ReadBool();
            break;
          }
          case 304: {
            NeutralCampType = input.ReadUInt32();
            break;
          }
          case 312: {
            RuneType = input.ReadUInt32();
            break;
          }
          case 322:
          case 320: {
            assistPlayers_.AddEntriesFrom(input, _repeated_assistPlayers_codec);
            break;
          }
          case 328: {
            IsHealSave = input.ReadBool();
            break;
          }
          case 336: {
            IsUltimateAbility = input.ReadBool();
            break;
          }
          case 344: {
            AttackerHeroLevel = input.ReadUInt32();
            break;
          }
          case 352: {
            TargetHeroLevel = input.ReadUInt32();
            break;
          }
          case 360: {
            Xpm = input.ReadUInt32();
            break;
          }
          case 368: {
            Gpm = input.ReadUInt32();
            break;
          }
          case 376: {
            EventLocation = input.ReadUInt32();
            break;
          }
          case 384: {
            TargetIsSelf = input.ReadBool();
            break;
          }
          case 392: {
            DamageType = input.ReadUInt32();
            break;
          }
          case 400: {
            InvisibilityModifier = input.ReadBool();
            break;
          }
          case 408: {
            DamageCategory = input.ReadUInt32();
            break;
          }
          case 416: {
            Networth = input.ReadUInt32();
            break;
          }
          case 424: {
            BuildingType = input.ReadUInt32();
            break;
          }
          case 437: {
            ModifierElapsedDuration = input.ReadFloat();
            break;
          }
          case 440: {
            SilenceModifier = input.ReadBool();
            break;
          }
          case 448: {
            HealFromLifesteal = input.ReadBool();
            break;
          }
          case 456: {
            ModifierPurged = input.ReadBool();
            break;
          }
          case 464: {
            SpellEvaded = input.ReadBool();
            break;
          }
          case 472: {
            MotionControllerModifier = input.ReadBool();
            break;
          }
          case 480: {
            LongRangeKill = input.ReadBool();
            break;
          }
          case 488: {
            ModifierPurgeAbility = input.ReadUInt32();
            break;
          }
          case 496: {
            ModifierPurgeNpc = input.ReadUInt32();
            break;
          }
          case 504: {
            RootModifier = input.ReadBool();
            break;
          }
          case 512: {
            TotalUnitDeathCount = input.ReadUInt32();
            break;
          }
          case 520: {
            AuraModifier = input.ReadBool();
            break;
          }
          case 528: {
            ArmorDebuffModifier = input.ReadBool();
            break;
          }
          case 536: {
            NoPhysicalDamageModifier = input.ReadBool();
            break;
          }
          case 544: {
            ModifierAbility = input.ReadUInt32();
            break;
          }
          case 552: {
            ModifierHidden = input.ReadBool();
            break;
          }
          case 560: {
            InflictorIsStolenAbility = input.ReadBool();
            break;
          }
          case 568: {
            KillEaterEvent = input.ReadUInt32();
            break;
          }
          case 576: {
            UnitStatusLabel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
