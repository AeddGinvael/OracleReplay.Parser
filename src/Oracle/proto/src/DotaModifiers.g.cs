// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_modifiers.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from dota_modifiers.proto</summary>
  public static partial class DotaModifiersReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_modifiers.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaModifiersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRkb3RhX21vZGlmaWVycy5wcm90bxIPZ29vZ2xlLnByb3RvYnVmGhZuZXR3",
            "b3JrYmFzZXR5cGVzLnByb3RvIp4GChtDRE9UQU1vZGlmaWVyQnVmZlRhYmxl",
            "RW50cnkSPQoKZW50cnlfdHlwZRgBIAEoDjIpLmdvb2dsZS5wcm90b2J1Zi5E",
            "T1RBX01PRElGSUVSX0VOVFJZX1RZUEUSDgoGcGFyZW50GAIgASgFEg0KBWlu",
            "ZGV4GAMgASgFEhIKCnNlcmlhbF9udW0YBCABKAUSFgoObW9kaWZpZXJfY2xh",
            "c3MYBSABKAUSFQoNYWJpbGl0eV9sZXZlbBgGIAEoBRITCgtzdGFja19jb3Vu",
            "dBgHIAEoBRIVCg1jcmVhdGlvbl90aW1lGAggASgCEhAKCGR1cmF0aW9uGAkg",
            "ASgCEg4KBmNhc3RlchgKIAEoBRIPCgdhYmlsaXR5GAsgASgFEg0KBWFybW9y",
            "GAwgASgFEhEKCWZhZGVfdGltZRgNIAEoAhIOCgZzdWJ0bGUYDiABKAgSFAoM",
            "Y2hhbm5lbF90aW1lGA8gASgCEiwKB3Zfc3RhcnQYECABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuQ01zZ1ZlY3RvchIqCgV2X2VuZBgRIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5DTXNnVmVjdG9yEhoKEnBvcnRhbF9sb29wX2FwcGVhchgSIAEo",
            "CRIdChVwb3J0YWxfbG9vcF9kaXNhcHBlYXIYEyABKAkSGAoQaGVyb19sb29w",
            "X2FwcGVhchgUIAEoCRIbChNoZXJvX2xvb3BfZGlzYXBwZWFyGBUgASgJEhYK",
            "Dm1vdmVtZW50X3NwZWVkGBYgASgFEgwKBGF1cmEYFyABKAgSEAoIYWN0aXZp",
            "dHkYGCABKAUSDgoGZGFtYWdlGBkgASgFEg0KBXJhbmdlGBogASgFEhkKEWRk",
            "X21vZGlmaWVyX2luZGV4GBsgASgFEhUKDWRkX2FiaWxpdHlfaWQYHCABKAUS",
            "FgoOaWxsdXNpb25fbGFiZWwYHSABKAkSDgoGYWN0aXZlGB4gASgIEhIKCnBs",
            "YXllcl9pZHMYHyABKAkSEAoIbHVhX25hbWUYICABKAkSFAoMYXR0YWNrX3Nw",
            "ZWVkGCEgASgFIkkKFUNET1RBTHVhTW9kaWZpZXJFbnRyeRIVCg1tb2RpZmll",
            "cl90eXBlGAEgASgFEhkKEW1vZGlmaWVyX2ZpbGVuYW1lGAIgASgJKn8KGERP",
            "VEFfTU9ESUZJRVJfRU5UUllfVFlQRRIYChRET1RBX01PRElGSUVSX1VLTk9X",
            "ThAAEiMKH0RPVEFfTU9ESUZJRVJfRU5UUllfVFlQRV9BQ1RJVkUQARIkCiBE",
            "T1RBX01PRElGSUVSX0VOVFJZX1RZUEVfUkVNT1ZFRBACQhJIAYABAKoCClBy",
            "b3RvLkRvdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.Dota.NetworkbasetypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.DOTA_MODIFIER_ENTRY_TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAModifierBuffTableEntry), global::Proto.Dota.CDOTAModifierBuffTableEntry.Parser, new[]{ "EntryType", "Parent", "Index", "SerialNum", "ModifierClass", "AbilityLevel", "StackCount", "CreationTime", "Duration", "Caster", "Ability", "Armor", "FadeTime", "Subtle", "ChannelTime", "VStart", "VEnd", "PortalLoopAppear", "PortalLoopDisappear", "HeroLoopAppear", "HeroLoopDisappear", "MovementSpeed", "Aura", "Activity", "Damage", "Range", "DdModifierIndex", "DdAbilityId", "IllusionLabel", "Active", "PlayerIds", "LuaName", "AttackSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTALuaModifierEntry), global::Proto.Dota.CDOTALuaModifierEntry.Parser, new[]{ "ModifierType", "ModifierFilename" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DOTA_MODIFIER_ENTRY_TYPE {
    [pbr::OriginalName("DOTA_MODIFIER_UKNOWN")] DotaModifierUknown = 0,
    [pbr::OriginalName("DOTA_MODIFIER_ENTRY_TYPE_ACTIVE")] Active = 1,
    [pbr::OriginalName("DOTA_MODIFIER_ENTRY_TYPE_REMOVED")] Removed = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CDOTAModifierBuffTableEntry : pb::IMessage<CDOTAModifierBuffTableEntry> {
    private static readonly pb::MessageParser<CDOTAModifierBuffTableEntry> _parser = new pb::MessageParser<CDOTAModifierBuffTableEntry>(() => new CDOTAModifierBuffTableEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAModifierBuffTableEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaModifiersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAModifierBuffTableEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAModifierBuffTableEntry(CDOTAModifierBuffTableEntry other) : this() {
      entryType_ = other.entryType_;
      parent_ = other.parent_;
      index_ = other.index_;
      serialNum_ = other.serialNum_;
      modifierClass_ = other.modifierClass_;
      abilityLevel_ = other.abilityLevel_;
      stackCount_ = other.stackCount_;
      creationTime_ = other.creationTime_;
      duration_ = other.duration_;
      caster_ = other.caster_;
      ability_ = other.ability_;
      armor_ = other.armor_;
      fadeTime_ = other.fadeTime_;
      subtle_ = other.subtle_;
      channelTime_ = other.channelTime_;
      vStart_ = other.vStart_ != null ? other.vStart_.Clone() : null;
      vEnd_ = other.vEnd_ != null ? other.vEnd_.Clone() : null;
      portalLoopAppear_ = other.portalLoopAppear_;
      portalLoopDisappear_ = other.portalLoopDisappear_;
      heroLoopAppear_ = other.heroLoopAppear_;
      heroLoopDisappear_ = other.heroLoopDisappear_;
      movementSpeed_ = other.movementSpeed_;
      aura_ = other.aura_;
      activity_ = other.activity_;
      damage_ = other.damage_;
      range_ = other.range_;
      ddModifierIndex_ = other.ddModifierIndex_;
      ddAbilityId_ = other.ddAbilityId_;
      illusionLabel_ = other.illusionLabel_;
      active_ = other.active_;
      playerIds_ = other.playerIds_;
      luaName_ = other.luaName_;
      attackSpeed_ = other.attackSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAModifierBuffTableEntry Clone() {
      return new CDOTAModifierBuffTableEntry(this);
    }

    /// <summary>Field number for the "entry_type" field.</summary>
    public const int EntryTypeFieldNumber = 1;
    private global::Proto.Dota.DOTA_MODIFIER_ENTRY_TYPE entryType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.DOTA_MODIFIER_ENTRY_TYPE EntryType {
      get { return entryType_; }
      set {
        entryType_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 2;
    private int parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "serial_num" field.</summary>
    public const int SerialNumFieldNumber = 4;
    private int serialNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerialNum {
      get { return serialNum_; }
      set {
        serialNum_ = value;
      }
    }

    /// <summary>Field number for the "modifier_class" field.</summary>
    public const int ModifierClassFieldNumber = 5;
    private int modifierClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifierClass {
      get { return modifierClass_; }
      set {
        modifierClass_ = value;
      }
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 6;
    private int abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityLevel {
      get { return abilityLevel_; }
      set {
        abilityLevel_ = value;
      }
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 7;
    private int stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackCount {
      get { return stackCount_; }
      set {
        stackCount_ = value;
      }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 8;
    private float creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CreationTime {
      get { return creationTime_; }
      set {
        creationTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 9;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "caster" field.</summary>
    public const int CasterFieldNumber = 10;
    private int caster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Caster {
      get { return caster_; }
      set {
        caster_ = value;
      }
    }

    /// <summary>Field number for the "ability" field.</summary>
    public const int AbilityFieldNumber = 11;
    private int ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 12;
    private int armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }

    /// <summary>Field number for the "fade_time" field.</summary>
    public const int FadeTimeFieldNumber = 13;
    private float fadeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FadeTime {
      get { return fadeTime_; }
      set {
        fadeTime_ = value;
      }
    }

    /// <summary>Field number for the "subtle" field.</summary>
    public const int SubtleFieldNumber = 14;
    private bool subtle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Subtle {
      get { return subtle_; }
      set {
        subtle_ = value;
      }
    }

    /// <summary>Field number for the "channel_time" field.</summary>
    public const int ChannelTimeFieldNumber = 15;
    private float channelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChannelTime {
      get { return channelTime_; }
      set {
        channelTime_ = value;
      }
    }

    /// <summary>Field number for the "v_start" field.</summary>
    public const int VStartFieldNumber = 16;
    private global::Proto.Dota.CMsgVector vStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector VStart {
      get { return vStart_; }
      set {
        vStart_ = value;
      }
    }

    /// <summary>Field number for the "v_end" field.</summary>
    public const int VEndFieldNumber = 17;
    private global::Proto.Dota.CMsgVector vEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector VEnd {
      get { return vEnd_; }
      set {
        vEnd_ = value;
      }
    }

    /// <summary>Field number for the "portal_loop_appear" field.</summary>
    public const int PortalLoopAppearFieldNumber = 18;
    private string portalLoopAppear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortalLoopAppear {
      get { return portalLoopAppear_; }
      set {
        portalLoopAppear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "portal_loop_disappear" field.</summary>
    public const int PortalLoopDisappearFieldNumber = 19;
    private string portalLoopDisappear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortalLoopDisappear {
      get { return portalLoopDisappear_; }
      set {
        portalLoopDisappear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_loop_appear" field.</summary>
    public const int HeroLoopAppearFieldNumber = 20;
    private string heroLoopAppear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroLoopAppear {
      get { return heroLoopAppear_; }
      set {
        heroLoopAppear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_loop_disappear" field.</summary>
    public const int HeroLoopDisappearFieldNumber = 21;
    private string heroLoopDisappear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroLoopDisappear {
      get { return heroLoopDisappear_; }
      set {
        heroLoopDisappear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "movement_speed" field.</summary>
    public const int MovementSpeedFieldNumber = 22;
    private int movementSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovementSpeed {
      get { return movementSpeed_; }
      set {
        movementSpeed_ = value;
      }
    }

    /// <summary>Field number for the "aura" field.</summary>
    public const int AuraFieldNumber = 23;
    private bool aura_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Aura {
      get { return aura_; }
      set {
        aura_ = value;
      }
    }

    /// <summary>Field number for the "activity" field.</summary>
    public const int ActivityFieldNumber = 24;
    private int activity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Activity {
      get { return activity_; }
      set {
        activity_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 25;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 26;
    private int range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "dd_modifier_index" field.</summary>
    public const int DdModifierIndexFieldNumber = 27;
    private int ddModifierIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DdModifierIndex {
      get { return ddModifierIndex_; }
      set {
        ddModifierIndex_ = value;
      }
    }

    /// <summary>Field number for the "dd_ability_id" field.</summary>
    public const int DdAbilityIdFieldNumber = 28;
    private int ddAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DdAbilityId {
      get { return ddAbilityId_; }
      set {
        ddAbilityId_ = value;
      }
    }

    /// <summary>Field number for the "illusion_label" field.</summary>
    public const int IllusionLabelFieldNumber = 29;
    private string illusionLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IllusionLabel {
      get { return illusionLabel_; }
      set {
        illusionLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 30;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "player_ids" field.</summary>
    public const int PlayerIdsFieldNumber = 31;
    private string playerIds_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIds {
      get { return playerIds_; }
      set {
        playerIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lua_name" field.</summary>
    public const int LuaNameFieldNumber = 32;
    private string luaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuaName {
      get { return luaName_; }
      set {
        luaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attack_speed" field.</summary>
    public const int AttackSpeedFieldNumber = 33;
    private int attackSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAModifierBuffTableEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAModifierBuffTableEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntryType != other.EntryType) return false;
      if (Parent != other.Parent) return false;
      if (Index != other.Index) return false;
      if (SerialNum != other.SerialNum) return false;
      if (ModifierClass != other.ModifierClass) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      if (StackCount != other.StackCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CreationTime, other.CreationTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (Caster != other.Caster) return false;
      if (Ability != other.Ability) return false;
      if (Armor != other.Armor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FadeTime, other.FadeTime)) return false;
      if (Subtle != other.Subtle) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelTime, other.ChannelTime)) return false;
      if (!object.Equals(VStart, other.VStart)) return false;
      if (!object.Equals(VEnd, other.VEnd)) return false;
      if (PortalLoopAppear != other.PortalLoopAppear) return false;
      if (PortalLoopDisappear != other.PortalLoopDisappear) return false;
      if (HeroLoopAppear != other.HeroLoopAppear) return false;
      if (HeroLoopDisappear != other.HeroLoopDisappear) return false;
      if (MovementSpeed != other.MovementSpeed) return false;
      if (Aura != other.Aura) return false;
      if (Activity != other.Activity) return false;
      if (Damage != other.Damage) return false;
      if (Range != other.Range) return false;
      if (DdModifierIndex != other.DdModifierIndex) return false;
      if (DdAbilityId != other.DdAbilityId) return false;
      if (IllusionLabel != other.IllusionLabel) return false;
      if (Active != other.Active) return false;
      if (PlayerIds != other.PlayerIds) return false;
      if (LuaName != other.LuaName) return false;
      if (AttackSpeed != other.AttackSpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntryType != 0) hash ^= EntryType.GetHashCode();
      if (Parent != 0) hash ^= Parent.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (SerialNum != 0) hash ^= SerialNum.GetHashCode();
      if (ModifierClass != 0) hash ^= ModifierClass.GetHashCode();
      if (AbilityLevel != 0) hash ^= AbilityLevel.GetHashCode();
      if (StackCount != 0) hash ^= StackCount.GetHashCode();
      if (CreationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CreationTime);
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (Caster != 0) hash ^= Caster.GetHashCode();
      if (Ability != 0) hash ^= Ability.GetHashCode();
      if (Armor != 0) hash ^= Armor.GetHashCode();
      if (FadeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FadeTime);
      if (Subtle != false) hash ^= Subtle.GetHashCode();
      if (ChannelTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelTime);
      if (vStart_ != null) hash ^= VStart.GetHashCode();
      if (vEnd_ != null) hash ^= VEnd.GetHashCode();
      if (PortalLoopAppear.Length != 0) hash ^= PortalLoopAppear.GetHashCode();
      if (PortalLoopDisappear.Length != 0) hash ^= PortalLoopDisappear.GetHashCode();
      if (HeroLoopAppear.Length != 0) hash ^= HeroLoopAppear.GetHashCode();
      if (HeroLoopDisappear.Length != 0) hash ^= HeroLoopDisappear.GetHashCode();
      if (MovementSpeed != 0) hash ^= MovementSpeed.GetHashCode();
      if (Aura != false) hash ^= Aura.GetHashCode();
      if (Activity != 0) hash ^= Activity.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Range != 0) hash ^= Range.GetHashCode();
      if (DdModifierIndex != 0) hash ^= DdModifierIndex.GetHashCode();
      if (DdAbilityId != 0) hash ^= DdAbilityId.GetHashCode();
      if (IllusionLabel.Length != 0) hash ^= IllusionLabel.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (PlayerIds.Length != 0) hash ^= PlayerIds.GetHashCode();
      if (LuaName.Length != 0) hash ^= LuaName.GetHashCode();
      if (AttackSpeed != 0) hash ^= AttackSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntryType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EntryType);
      }
      if (Parent != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Parent);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (SerialNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SerialNum);
      }
      if (ModifierClass != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ModifierClass);
      }
      if (AbilityLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AbilityLevel);
      }
      if (StackCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StackCount);
      }
      if (CreationTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CreationTime);
      }
      if (Duration != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Duration);
      }
      if (Caster != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Caster);
      }
      if (Ability != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Ability);
      }
      if (Armor != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Armor);
      }
      if (FadeTime != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(FadeTime);
      }
      if (Subtle != false) {
        output.WriteRawTag(112);
        output.WriteBool(Subtle);
      }
      if (ChannelTime != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ChannelTime);
      }
      if (vStart_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(VStart);
      }
      if (vEnd_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(VEnd);
      }
      if (PortalLoopAppear.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PortalLoopAppear);
      }
      if (PortalLoopDisappear.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PortalLoopDisappear);
      }
      if (HeroLoopAppear.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(HeroLoopAppear);
      }
      if (HeroLoopDisappear.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(HeroLoopDisappear);
      }
      if (MovementSpeed != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(MovementSpeed);
      }
      if (Aura != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(Aura);
      }
      if (Activity != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Activity);
      }
      if (Damage != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Damage);
      }
      if (Range != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Range);
      }
      if (DdModifierIndex != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(DdModifierIndex);
      }
      if (DdAbilityId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DdAbilityId);
      }
      if (IllusionLabel.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(IllusionLabel);
      }
      if (Active != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Active);
      }
      if (PlayerIds.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(PlayerIds);
      }
      if (LuaName.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(LuaName);
      }
      if (AttackSpeed != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(AttackSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntryType);
      }
      if (Parent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parent);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (SerialNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerialNum);
      }
      if (ModifierClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModifierClass);
      }
      if (AbilityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityLevel);
      }
      if (StackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackCount);
      }
      if (CreationTime != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (Caster != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Caster);
      }
      if (Ability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ability);
      }
      if (Armor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Armor);
      }
      if (FadeTime != 0F) {
        size += 1 + 4;
      }
      if (Subtle != false) {
        size += 1 + 1;
      }
      if (ChannelTime != 0F) {
        size += 1 + 4;
      }
      if (vStart_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VStart);
      }
      if (vEnd_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VEnd);
      }
      if (PortalLoopAppear.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PortalLoopAppear);
      }
      if (PortalLoopDisappear.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PortalLoopDisappear);
      }
      if (HeroLoopAppear.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeroLoopAppear);
      }
      if (HeroLoopDisappear.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeroLoopDisappear);
      }
      if (MovementSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MovementSpeed);
      }
      if (Aura != false) {
        size += 2 + 1;
      }
      if (Activity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Activity);
      }
      if (Damage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Range != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Range);
      }
      if (DdModifierIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DdModifierIndex);
      }
      if (DdAbilityId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DdAbilityId);
      }
      if (IllusionLabel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IllusionLabel);
      }
      if (Active != false) {
        size += 2 + 1;
      }
      if (PlayerIds.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerIds);
      }
      if (LuaName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LuaName);
      }
      if (AttackSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAModifierBuffTableEntry other) {
      if (other == null) {
        return;
      }
      if (other.EntryType != 0) {
        EntryType = other.EntryType;
      }
      if (other.Parent != 0) {
        Parent = other.Parent;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.SerialNum != 0) {
        SerialNum = other.SerialNum;
      }
      if (other.ModifierClass != 0) {
        ModifierClass = other.ModifierClass;
      }
      if (other.AbilityLevel != 0) {
        AbilityLevel = other.AbilityLevel;
      }
      if (other.StackCount != 0) {
        StackCount = other.StackCount;
      }
      if (other.CreationTime != 0F) {
        CreationTime = other.CreationTime;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.Caster != 0) {
        Caster = other.Caster;
      }
      if (other.Ability != 0) {
        Ability = other.Ability;
      }
      if (other.Armor != 0) {
        Armor = other.Armor;
      }
      if (other.FadeTime != 0F) {
        FadeTime = other.FadeTime;
      }
      if (other.Subtle != false) {
        Subtle = other.Subtle;
      }
      if (other.ChannelTime != 0F) {
        ChannelTime = other.ChannelTime;
      }
      if (other.vStart_ != null) {
        if (vStart_ == null) {
          vStart_ = new global::Proto.Dota.CMsgVector();
        }
        VStart.MergeFrom(other.VStart);
      }
      if (other.vEnd_ != null) {
        if (vEnd_ == null) {
          vEnd_ = new global::Proto.Dota.CMsgVector();
        }
        VEnd.MergeFrom(other.VEnd);
      }
      if (other.PortalLoopAppear.Length != 0) {
        PortalLoopAppear = other.PortalLoopAppear;
      }
      if (other.PortalLoopDisappear.Length != 0) {
        PortalLoopDisappear = other.PortalLoopDisappear;
      }
      if (other.HeroLoopAppear.Length != 0) {
        HeroLoopAppear = other.HeroLoopAppear;
      }
      if (other.HeroLoopDisappear.Length != 0) {
        HeroLoopDisappear = other.HeroLoopDisappear;
      }
      if (other.MovementSpeed != 0) {
        MovementSpeed = other.MovementSpeed;
      }
      if (other.Aura != false) {
        Aura = other.Aura;
      }
      if (other.Activity != 0) {
        Activity = other.Activity;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Range != 0) {
        Range = other.Range;
      }
      if (other.DdModifierIndex != 0) {
        DdModifierIndex = other.DdModifierIndex;
      }
      if (other.DdAbilityId != 0) {
        DdAbilityId = other.DdAbilityId;
      }
      if (other.IllusionLabel.Length != 0) {
        IllusionLabel = other.IllusionLabel;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.PlayerIds.Length != 0) {
        PlayerIds = other.PlayerIds;
      }
      if (other.LuaName.Length != 0) {
        LuaName = other.LuaName;
      }
      if (other.AttackSpeed != 0) {
        AttackSpeed = other.AttackSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            entryType_ = (global::Proto.Dota.DOTA_MODIFIER_ENTRY_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Parent = input.ReadInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            SerialNum = input.ReadInt32();
            break;
          }
          case 40: {
            ModifierClass = input.ReadInt32();
            break;
          }
          case 48: {
            AbilityLevel = input.ReadInt32();
            break;
          }
          case 56: {
            StackCount = input.ReadInt32();
            break;
          }
          case 69: {
            CreationTime = input.ReadFloat();
            break;
          }
          case 77: {
            Duration = input.ReadFloat();
            break;
          }
          case 80: {
            Caster = input.ReadInt32();
            break;
          }
          case 88: {
            Ability = input.ReadInt32();
            break;
          }
          case 96: {
            Armor = input.ReadInt32();
            break;
          }
          case 109: {
            FadeTime = input.ReadFloat();
            break;
          }
          case 112: {
            Subtle = input.ReadBool();
            break;
          }
          case 125: {
            ChannelTime = input.ReadFloat();
            break;
          }
          case 130: {
            if (vStart_ == null) {
              vStart_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(vStart_);
            break;
          }
          case 138: {
            if (vEnd_ == null) {
              vEnd_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(vEnd_);
            break;
          }
          case 146: {
            PortalLoopAppear = input.ReadString();
            break;
          }
          case 154: {
            PortalLoopDisappear = input.ReadString();
            break;
          }
          case 162: {
            HeroLoopAppear = input.ReadString();
            break;
          }
          case 170: {
            HeroLoopDisappear = input.ReadString();
            break;
          }
          case 176: {
            MovementSpeed = input.ReadInt32();
            break;
          }
          case 184: {
            Aura = input.ReadBool();
            break;
          }
          case 192: {
            Activity = input.ReadInt32();
            break;
          }
          case 200: {
            Damage = input.ReadInt32();
            break;
          }
          case 208: {
            Range = input.ReadInt32();
            break;
          }
          case 216: {
            DdModifierIndex = input.ReadInt32();
            break;
          }
          case 224: {
            DdAbilityId = input.ReadInt32();
            break;
          }
          case 234: {
            IllusionLabel = input.ReadString();
            break;
          }
          case 240: {
            Active = input.ReadBool();
            break;
          }
          case 250: {
            PlayerIds = input.ReadString();
            break;
          }
          case 258: {
            LuaName = input.ReadString();
            break;
          }
          case 264: {
            AttackSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTALuaModifierEntry : pb::IMessage<CDOTALuaModifierEntry> {
    private static readonly pb::MessageParser<CDOTALuaModifierEntry> _parser = new pb::MessageParser<CDOTALuaModifierEntry>(() => new CDOTALuaModifierEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTALuaModifierEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaModifiersReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTALuaModifierEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTALuaModifierEntry(CDOTALuaModifierEntry other) : this() {
      modifierType_ = other.modifierType_;
      modifierFilename_ = other.modifierFilename_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTALuaModifierEntry Clone() {
      return new CDOTALuaModifierEntry(this);
    }

    /// <summary>Field number for the "modifier_type" field.</summary>
    public const int ModifierTypeFieldNumber = 1;
    private int modifierType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifierType {
      get { return modifierType_; }
      set {
        modifierType_ = value;
      }
    }

    /// <summary>Field number for the "modifier_filename" field.</summary>
    public const int ModifierFilenameFieldNumber = 2;
    private string modifierFilename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModifierFilename {
      get { return modifierFilename_; }
      set {
        modifierFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTALuaModifierEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTALuaModifierEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModifierType != other.ModifierType) return false;
      if (ModifierFilename != other.ModifierFilename) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModifierType != 0) hash ^= ModifierType.GetHashCode();
      if (ModifierFilename.Length != 0) hash ^= ModifierFilename.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModifierType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModifierType);
      }
      if (ModifierFilename.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModifierFilename);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModifierType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModifierType);
      }
      if (ModifierFilename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifierFilename);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTALuaModifierEntry other) {
      if (other == null) {
        return;
      }
      if (other.ModifierType != 0) {
        ModifierType = other.ModifierType;
      }
      if (other.ModifierFilename.Length != 0) {
        ModifierFilename = other.ModifierFilename;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ModifierType = input.ReadInt32();
            break;
          }
          case 18: {
            ModifierFilename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
