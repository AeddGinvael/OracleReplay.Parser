// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_commonmessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from dota_commonmessages.proto</summary>
  public static partial class DotaCommonmessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_commonmessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaCommonmessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlkb3RhX2NvbW1vbm1lc3NhZ2VzLnByb3RvEg9nb29nbGUucHJvdG9idWYi",
            "YAoVQ0RPVEFNc2dfTG9jYXRpb25QaW5nEgkKAXgYASABKAUSCQoBeRgCIAEo",
            "BRIOCgZ0YXJnZXQYAyABKAUSEwoLZGlyZWN0X3BpbmcYBCABKAgSDAoEdHlw",
            "ZRgFIAEoBSJDChJDRE9UQU1zZ19JdGVtQWxlcnQSCQoBeBgBIAEoBRIJCgF5",
            "GAIgASgFEhcKD2l0ZW1fYWJpbGl0eV9pZBgDIAEoBSI8ChdDRE9UQU1zZ19F",
            "bmVteUl0ZW1BbGVydBIRCglwbGF5ZXJfaWQYASABKA0SDgoGaXRlbWlkGAIg",
            "ASgFIjkKEENET1RBTXNnX01hcExpbmUSCQoBeBgBIAEoBRIJCgF5GAIgASgF",
            "Eg8KB2luaXRpYWwYAyABKAgiUwoSQ0RPVEFNc2dfV29ybGRMaW5lEgkKAXgY",
            "ASABKAUSCQoBeRgCIAEoBRIJCgF6GAMgASgFEg8KB2luaXRpYWwYBCABKAgS",
            "CwoDZW5kGAUgASgIIsoBChZDRE9UQU1zZ19TZW5kU3RhdFBvcHVwEjMKBXN0",
            "eWxlGAEgASgOMiQuZ29vZ2xlLnByb3RvYnVmLkVET1RBU3RhdFBvcHVwVHlw",
            "ZXMSFAoMc3RhdF9zdHJpbmdzGAIgAygJEhMKC3N0YXRfaW1hZ2VzGAMgAygF",
            "EhgKEHN0YXRfaW1hZ2VfdHlwZXMYBCADKAUSEAoIZHVyYXRpb24YBSABKAIS",
            "EAoIdXNlX2h0bWwYBiABKAgSEgoKbW92aWVfbmFtZRgHIAEoCSIzCh1DRE9U",
            "QU1zZ19EaXNtaXNzQWxsU3RhdFBvcHVwcxISCgp0aW1lX2RlbGF5GAEgASgC",
            "Ij4KFUNET1RBTXNnX0NvYWNoSFVEUGluZxIJCgF4GAEgASgNEgkKAXkYAiAB",
            "KA0SDwoHdGd0cGF0aBgDIAEoCSrFEQoVRURPVEFDaGF0V2hlZWxNZXNzYWdl",
            "EhEKDWtfRURPVEFfQ1dfT2sQABITCg9rX0VET1RBX0NXX0NhcmUQARIWChJr",
            "X0VET1RBX0NXX0dldEJhY2sQAhIYChRrX0VET1RBX0NXX05lZWRXYXJkcxAD",
            "EhMKD2tfRURPVEFfQ1dfU3R1bhAEEhMKD2tfRURPVEFfQ1dfSGVscBAFEhMK",
            "D2tfRURPVEFfQ1dfUHVzaBAGEhYKEmtfRURPVEFfQ1dfR29vZEpvYhAHEhYK",
            "EmtfRURPVEFfQ1dfTWlzc2luZxAIEhoKFmtfRURPVEFfQ1dfTWlzc2luZ19U",
            "b3AQCRIaChZrX0VET1RBX0NXX01pc3NpbmdfTWlkEAoSHQoZa19FRE9UQV9D",
            "V19NaXNzaW5nX0JvdHRvbRALEhEKDWtfRURPVEFfQ1dfR28QDBIXChNrX0VE",
            "T1RBX0NXX0luaXRpYXRlEA0SFQoRa19FRE9UQV9DV19Gb2xsb3cQDhIXChNr",
            "X0VET1RBX0NXX0dyb3VwX1VwEA8SGQoVa19FRE9UQV9DV19TcHJlYWRfT3V0",
            "EBASGQoVa19FRE9UQV9DV19TcGxpdF9GYXJtEBESFQoRa19FRE9UQV9DV19B",
            "dHRhY2sQEhISCg5rX0VET1RBX0NXX0JSQhATEhMKD2tfRURPVEFfQ1dfRGl2",
            "ZRAUEhIKDmtfRURPVEFfQ1dfT01XEBUSGAoUa19FRE9UQV9DV19HZXRfUmVh",
            "ZHkQFhITCg9rX0VET1RBX0NXX0JhaXQQFxITCg9rX0VET1RBX0NXX0hlYWwQ",
            "GBITCg9rX0VET1RBX0NXX01hbmEQGRISCg5rX0VET1RBX0NXX09PTRAaEh0K",
            "GWtfRURPVEFfQ1dfU2tpbGxfQ29vbGRvd24QGxIZChVrX0VET1RBX0NXX1Vs",
            "dGlfUmVhZHkQHBIdChlrX0VET1RBX0NXX0VuZW15X1JldHVybmVkEB0SGgoW",
            "a19FRE9UQV9DV19BbGxfTWlzc2luZxAeEh0KGWtfRURPVEFfQ1dfRW5lbXlf",
            "SW5jb21pbmcQHxIaChZrX0VET1RBX0NXX0ludmlzX0VuZW15ECASHQoZa19F",
            "RE9UQV9DV19FbmVteV9IYWRfUnVuZRAhEhkKFWtfRURPVEFfQ1dfU3BsaXRf",
            "UHVzaBAiEh0KGWtfRURPVEFfQ1dfQ29taW5nX1RvX0dhbmsQIxIbChdrX0VE",
            "T1RBX0NXX1JlcXVlc3RfR2FuaxAkEiAKHGtfRURPVEFfQ1dfRmlnaHRfVW5k",
            "ZXJfVG93ZXIQJRIZChVrX0VET1RBX0NXX0RlbnlfVG93ZXIQJhIaChZrX0VE",
            "T1RBX0NXX0J1eV9Db3VyaWVyECcSHgoaa19FRE9UQV9DV19VcGdyYWRlX0Nv",
            "dXJpZXIQKBIdChlrX0VET1RBX0NXX05lZWRfRGV0ZWN0aW9uECkSIgoea19F",
            "RE9UQV9DV19UaGV5X0hhdmVfRGV0ZWN0aW9uECoSFQoRa19FRE9UQV9DV19C",
            "dXlfVFAQKxIcChhrX0VET1RBX0NXX1JldXNlX0NvdXJpZXIQLBIVChFrX0VE",
            "T1RBX0NXX0Rld2FyZBAtEhsKF2tfRURPVEFfQ1dfQnVpbGRpbmdfTWVrEC4S",
            "HAoYa19FRE9UQV9DV19CdWlsZGluZ19QaXBlEC8SHQoZa19FRE9UQV9DV19T",
            "dGFja19BbmRfUHVsbBAwEhMKD2tfRURPVEFfQ1dfUHVsbBAxEhYKEmtfRURP",
            "VEFfQ1dfUHVsbGluZxAyEhQKEGtfRURPVEFfQ1dfU3RhY2sQMxIXChNrX0VE",
            "T1RBX0NXX0p1bmdsaW5nEDQSFQoRa19FRE9UQV9DV19Sb3NoYW4QNRIaChZr",
            "X0VET1RBX0NXX0FmZmlybWF0aXZlEDYSEwoPa19FRE9UQV9DV19XYWl0EDcS",
            "FAoQa19FRE9UQV9DV19QYXVzZRA4EhsKF2tfRURPVEFfQ1dfQ3VycmVudF9U",
            "aW1lEDkSGgoWa19FRE9UQV9DV19DaGVja19SdW5lcxA6EhkKFWtfRURPVEFf",
            "Q1dfU21va2VfR2FuaxA7EhMKD2tfRURPVEFfQ1dfR0xIRhA8EhMKD2tfRURP",
            "VEFfQ1dfTmljZRA9EhUKEWtfRURPVEFfQ1dfVGhhbmtzED4SFAoQa19FRE9U",
            "QV9DV19Tb3JyeRA/EhkKFWtfRURPVEFfQ1dfTm9fR2l2ZV9VcBBAEhwKGGtf",
            "RURPVEFfQ1dfSnVzdF9IYXBwZW5lZBBBEhsKF2tfRURPVEFfQ1dfR2FtZV9J",
            "c19IYXJkEEISFwoTa19FRE9UQV9DV19OZXdfTWV0YRBDEhUKEWtfRURPVEFf",
            "Q1dfTXlfQmFkEEQSFQoRa19FRE9UQV9DV19SZWdyZXQQRRIUChBrX0VET1RB",
            "X0NXX1JlbGF4EEYSGgoWa19FRE9UQV9DV19NaXNzaW5nSGVybxBHEhsKF2tf",
            "RURPVEFfQ1dfUmV0dXJuZWRIZXJvEEgSEQoNa19FRE9UQV9DV19HRxBJEhMK",
            "D2tfRURPVEFfQ1dfR0dXUBBKEhUKEWtfRURPVEFfQ1dfQWxsX0dHEEsSFwoT",
            "a19FRE9UQV9DV19BbGxfR0dXUBBMEhoKFmtfRURPVEFfQ1dfV2hhdF9Ub19C",
            "dXkQTRIcChhrX0VET1RBX0NXX0ltX1JldHJlYXRpbmcQThIcChhrX0VET1RB",
            "X0NXX1NwYWNlX0NyZWF0ZWQQTxIVChFrX0VET1RBX0NXX1dob29wcxBQEh4K",
            "GmtfRURPVEFfQ1dfVG93ZXJfdGhlbl9CYWNrEFESIQoda19FRE9UQV9DV19C",
            "YXJyYWNrc190aGVuX0JhY2sQUhIfChtrX0VET1RBX0NXX1dhcmRfQm90dG9t",
            "X1J1bmUQUxIcChhrX0VET1RBX0NXX1dhcmRfVG9wX1J1bmUQVBIXChNrX0VE",
            "T1RBX0NXX1pldXNfVWx0EFUqpAEKE0VET1RBU3RhdFBvcHVwVHlwZXMSGAoU",
            "a19FRE9UQV9TUFRfVGV4dGxpbmUQABIVChFrX0VET1RBX1NQVF9CYXNpYxAB",
            "EhQKEGtfRURPVEFfU1BUX1BvbGwQAhIUChBrX0VET1RBX1NQVF9HcmlkEAMS",
            "GQoVa19FRE9UQV9TUFRfRHVhbEltYWdlEAQSFQoRa19FRE9UQV9TUFRfTW92",
            "aWUQBSqNCgoPZG90YXVuaXRvcmRlcl90EhgKFERPVEFfVU5JVF9PUkRFUl9O",
            "T05FEAASJAogRE9UQV9VTklUX09SREVSX01PVkVfVE9fUE9TSVRJT04QARIi",
            "Ch5ET1RBX1VOSVRfT1JERVJfTU9WRV9UT19UQVJHRVQQAhIfChtET1RBX1VO",
            "SVRfT1JERVJfQVRUQUNLX01PVkUQAxIhCh1ET1RBX1VOSVRfT1JERVJfQVRU",
            "QUNLX1RBUkdFVBAEEiEKHURPVEFfVU5JVF9PUkRFUl9DQVNUX1BPU0lUSU9O",
            "EAUSHwobRE9UQV9VTklUX09SREVSX0NBU1RfVEFSR0VUEAYSJAogRE9UQV9V",
            "TklUX09SREVSX0NBU1RfVEFSR0VUX1RSRUUQBxIiCh5ET1RBX1VOSVRfT1JE",
            "RVJfQ0FTVF9OT19UQVJHRVQQCBIfChtET1RBX1VOSVRfT1JERVJfQ0FTVF9U",
            "T0dHTEUQCRIhCh1ET1RBX1VOSVRfT1JERVJfSE9MRF9QT1NJVElPThAKEiEK",
            "HURPVEFfVU5JVF9PUkRFUl9UUkFJTl9BQklMSVRZEAsSHQoZRE9UQV9VTklU",
            "X09SREVSX0RST1BfSVRFTRAMEh0KGURPVEFfVU5JVF9PUkRFUl9HSVZFX0lU",
            "RU0QDRIfChtET1RBX1VOSVRfT1JERVJfUElDS1VQX0lURU0QDhIfChtET1RB",
            "X1VOSVRfT1JERVJfUElDS1VQX1JVTkUQDxIhCh1ET1RBX1VOSVRfT1JERVJf",
            "UFVSQ0hBU0VfSVRFTRAQEh0KGURPVEFfVU5JVF9PUkRFUl9TRUxMX0lURU0Q",
            "ERIkCiBET1RBX1VOSVRfT1JERVJfRElTQVNTRU1CTEVfSVRFTRASEh0KGURP",
            "VEFfVU5JVF9PUkRFUl9NT1ZFX0lURU0QExIkCiBET1RBX1VOSVRfT1JERVJf",
            "Q0FTVF9UT0dHTEVfQVVUTxAUEhgKFERPVEFfVU5JVF9PUkRFUl9TVE9QEBUS",
            "GQoVRE9UQV9VTklUX09SREVSX1RBVU5UEBYSGwoXRE9UQV9VTklUX09SREVS",
            "X0JVWUJBQ0sQFxIZChVET1RBX1VOSVRfT1JERVJfR0xZUEgQGBIpCiVET1RB",
            "X1VOSVRfT1JERVJfRUpFQ1RfSVRFTV9GUk9NX1NUQVNIEBkSHQoZRE9UQV9V",
            "TklUX09SREVSX0NBU1RfUlVORRAaEiAKHERPVEFfVU5JVF9PUkRFUl9QSU5H",
            "X0FCSUxJVFkQGxIlCiFET1RBX1VOSVRfT1JERVJfTU9WRV9UT19ESVJFQ1RJ",
            "T04QHBIaChZET1RBX1VOSVRfT1JERVJfUEFUUk9MEB0SKgomRE9UQV9VTklU",
            "X09SREVSX1ZFQ1RPUl9UQVJHRVRfUE9TSVRJT04QHhIZChVET1RBX1VOSVRf",
            "T1JERVJfUkFEQVIQHxIpCiVET1RBX1VOSVRfT1JERVJfU0VUX0lURU1fQ09N",
            "QklORV9MT0NLECASHAoYRE9UQV9VTklUX09SREVSX0NPTlRJTlVFECESKgom",
            "RE9UQV9VTklUX09SREVSX1ZFQ1RPUl9UQVJHRVRfQ0FOQ0VMRUQQIhIkCiBE",
            "T1RBX1VOSVRfT1JERVJfQ0FTVF9SSVZFUl9QQUlOVBAjEjIKLkRPVEFfVU5J",
            "VF9PUkRFUl9QUkVHQU1FX0FESlVTVF9JVEVNX0FTU0lHTk1FTlQQJEISSAGA",
            "AQCqAgpQcm90by5Eb3RhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.EDOTAChatWheelMessage), typeof(global::Proto.Dota.EDOTAStatPopupTypes), typeof(global::Proto.Dota.dotaunitorder_t), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_LocationPing), global::Proto.Dota.CDOTAMsg_LocationPing.Parser, new[]{ "X", "Y", "Target", "DirectPing", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_ItemAlert), global::Proto.Dota.CDOTAMsg_ItemAlert.Parser, new[]{ "X", "Y", "ItemAbilityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_EnemyItemAlert), global::Proto.Dota.CDOTAMsg_EnemyItemAlert.Parser, new[]{ "PlayerId", "Itemid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_MapLine), global::Proto.Dota.CDOTAMsg_MapLine.Parser, new[]{ "X", "Y", "Initial" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_WorldLine), global::Proto.Dota.CDOTAMsg_WorldLine.Parser, new[]{ "X", "Y", "Z", "Initial", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_SendStatPopup), global::Proto.Dota.CDOTAMsg_SendStatPopup.Parser, new[]{ "Style", "StatStrings", "StatImages", "StatImageTypes", "Duration", "UseHtml", "MovieName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_DismissAllStatPopups), global::Proto.Dota.CDOTAMsg_DismissAllStatPopups.Parser, new[]{ "TimeDelay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMsg_CoachHUDPing), global::Proto.Dota.CDOTAMsg_CoachHUDPing.Parser, new[]{ "X", "Y", "Tgtpath" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EDOTAChatWheelMessage {
    [pbr::OriginalName("k_EDOTA_CW_Ok")] KEdotaCwOk = 0,
    [pbr::OriginalName("k_EDOTA_CW_Care")] KEdotaCwCare = 1,
    [pbr::OriginalName("k_EDOTA_CW_GetBack")] KEdotaCwGetBack = 2,
    [pbr::OriginalName("k_EDOTA_CW_NeedWards")] KEdotaCwNeedWards = 3,
    [pbr::OriginalName("k_EDOTA_CW_Stun")] KEdotaCwStun = 4,
    [pbr::OriginalName("k_EDOTA_CW_Help")] KEdotaCwHelp = 5,
    [pbr::OriginalName("k_EDOTA_CW_Push")] KEdotaCwPush = 6,
    [pbr::OriginalName("k_EDOTA_CW_GoodJob")] KEdotaCwGoodJob = 7,
    [pbr::OriginalName("k_EDOTA_CW_Missing")] KEdotaCwMissing = 8,
    [pbr::OriginalName("k_EDOTA_CW_Missing_Top")] KEdotaCwMissingTop = 9,
    [pbr::OriginalName("k_EDOTA_CW_Missing_Mid")] KEdotaCwMissingMid = 10,
    [pbr::OriginalName("k_EDOTA_CW_Missing_Bottom")] KEdotaCwMissingBottom = 11,
    [pbr::OriginalName("k_EDOTA_CW_Go")] KEdotaCwGo = 12,
    [pbr::OriginalName("k_EDOTA_CW_Initiate")] KEdotaCwInitiate = 13,
    [pbr::OriginalName("k_EDOTA_CW_Follow")] KEdotaCwFollow = 14,
    [pbr::OriginalName("k_EDOTA_CW_Group_Up")] KEdotaCwGroupUp = 15,
    [pbr::OriginalName("k_EDOTA_CW_Spread_Out")] KEdotaCwSpreadOut = 16,
    [pbr::OriginalName("k_EDOTA_CW_Split_Farm")] KEdotaCwSplitFarm = 17,
    [pbr::OriginalName("k_EDOTA_CW_Attack")] KEdotaCwAttack = 18,
    [pbr::OriginalName("k_EDOTA_CW_BRB")] KEdotaCwBrb = 19,
    [pbr::OriginalName("k_EDOTA_CW_Dive")] KEdotaCwDive = 20,
    [pbr::OriginalName("k_EDOTA_CW_OMW")] KEdotaCwOmw = 21,
    [pbr::OriginalName("k_EDOTA_CW_Get_Ready")] KEdotaCwGetReady = 22,
    [pbr::OriginalName("k_EDOTA_CW_Bait")] KEdotaCwBait = 23,
    [pbr::OriginalName("k_EDOTA_CW_Heal")] KEdotaCwHeal = 24,
    [pbr::OriginalName("k_EDOTA_CW_Mana")] KEdotaCwMana = 25,
    [pbr::OriginalName("k_EDOTA_CW_OOM")] KEdotaCwOom = 26,
    [pbr::OriginalName("k_EDOTA_CW_Skill_Cooldown")] KEdotaCwSkillCooldown = 27,
    [pbr::OriginalName("k_EDOTA_CW_Ulti_Ready")] KEdotaCwUltiReady = 28,
    [pbr::OriginalName("k_EDOTA_CW_Enemy_Returned")] KEdotaCwEnemyReturned = 29,
    [pbr::OriginalName("k_EDOTA_CW_All_Missing")] KEdotaCwAllMissing = 30,
    [pbr::OriginalName("k_EDOTA_CW_Enemy_Incoming")] KEdotaCwEnemyIncoming = 31,
    [pbr::OriginalName("k_EDOTA_CW_Invis_Enemy")] KEdotaCwInvisEnemy = 32,
    [pbr::OriginalName("k_EDOTA_CW_Enemy_Had_Rune")] KEdotaCwEnemyHadRune = 33,
    [pbr::OriginalName("k_EDOTA_CW_Split_Push")] KEdotaCwSplitPush = 34,
    [pbr::OriginalName("k_EDOTA_CW_Coming_To_Gank")] KEdotaCwComingToGank = 35,
    [pbr::OriginalName("k_EDOTA_CW_Request_Gank")] KEdotaCwRequestGank = 36,
    [pbr::OriginalName("k_EDOTA_CW_Fight_Under_Tower")] KEdotaCwFightUnderTower = 37,
    [pbr::OriginalName("k_EDOTA_CW_Deny_Tower")] KEdotaCwDenyTower = 38,
    [pbr::OriginalName("k_EDOTA_CW_Buy_Courier")] KEdotaCwBuyCourier = 39,
    [pbr::OriginalName("k_EDOTA_CW_Upgrade_Courier")] KEdotaCwUpgradeCourier = 40,
    [pbr::OriginalName("k_EDOTA_CW_Need_Detection")] KEdotaCwNeedDetection = 41,
    [pbr::OriginalName("k_EDOTA_CW_They_Have_Detection")] KEdotaCwTheyHaveDetection = 42,
    [pbr::OriginalName("k_EDOTA_CW_Buy_TP")] KEdotaCwBuyTp = 43,
    [pbr::OriginalName("k_EDOTA_CW_Reuse_Courier")] KEdotaCwReuseCourier = 44,
    [pbr::OriginalName("k_EDOTA_CW_Deward")] KEdotaCwDeward = 45,
    [pbr::OriginalName("k_EDOTA_CW_Building_Mek")] KEdotaCwBuildingMek = 46,
    [pbr::OriginalName("k_EDOTA_CW_Building_Pipe")] KEdotaCwBuildingPipe = 47,
    [pbr::OriginalName("k_EDOTA_CW_Stack_And_Pull")] KEdotaCwStackAndPull = 48,
    [pbr::OriginalName("k_EDOTA_CW_Pull")] KEdotaCwPull = 49,
    [pbr::OriginalName("k_EDOTA_CW_Pulling")] KEdotaCwPulling = 50,
    [pbr::OriginalName("k_EDOTA_CW_Stack")] KEdotaCwStack = 51,
    [pbr::OriginalName("k_EDOTA_CW_Jungling")] KEdotaCwJungling = 52,
    [pbr::OriginalName("k_EDOTA_CW_Roshan")] KEdotaCwRoshan = 53,
    [pbr::OriginalName("k_EDOTA_CW_Affirmative")] KEdotaCwAffirmative = 54,
    [pbr::OriginalName("k_EDOTA_CW_Wait")] KEdotaCwWait = 55,
    [pbr::OriginalName("k_EDOTA_CW_Pause")] KEdotaCwPause = 56,
    [pbr::OriginalName("k_EDOTA_CW_Current_Time")] KEdotaCwCurrentTime = 57,
    [pbr::OriginalName("k_EDOTA_CW_Check_Runes")] KEdotaCwCheckRunes = 58,
    [pbr::OriginalName("k_EDOTA_CW_Smoke_Gank")] KEdotaCwSmokeGank = 59,
    [pbr::OriginalName("k_EDOTA_CW_GLHF")] KEdotaCwGlhf = 60,
    [pbr::OriginalName("k_EDOTA_CW_Nice")] KEdotaCwNice = 61,
    [pbr::OriginalName("k_EDOTA_CW_Thanks")] KEdotaCwThanks = 62,
    [pbr::OriginalName("k_EDOTA_CW_Sorry")] KEdotaCwSorry = 63,
    [pbr::OriginalName("k_EDOTA_CW_No_Give_Up")] KEdotaCwNoGiveUp = 64,
    [pbr::OriginalName("k_EDOTA_CW_Just_Happened")] KEdotaCwJustHappened = 65,
    [pbr::OriginalName("k_EDOTA_CW_Game_Is_Hard")] KEdotaCwGameIsHard = 66,
    [pbr::OriginalName("k_EDOTA_CW_New_Meta")] KEdotaCwNewMeta = 67,
    [pbr::OriginalName("k_EDOTA_CW_My_Bad")] KEdotaCwMyBad = 68,
    [pbr::OriginalName("k_EDOTA_CW_Regret")] KEdotaCwRegret = 69,
    [pbr::OriginalName("k_EDOTA_CW_Relax")] KEdotaCwRelax = 70,
    [pbr::OriginalName("k_EDOTA_CW_MissingHero")] KEdotaCwMissingHero = 71,
    [pbr::OriginalName("k_EDOTA_CW_ReturnedHero")] KEdotaCwReturnedHero = 72,
    [pbr::OriginalName("k_EDOTA_CW_GG")] KEdotaCwGg = 73,
    [pbr::OriginalName("k_EDOTA_CW_GGWP")] KEdotaCwGgwp = 74,
    [pbr::OriginalName("k_EDOTA_CW_All_GG")] KEdotaCwAllGg = 75,
    [pbr::OriginalName("k_EDOTA_CW_All_GGWP")] KEdotaCwAllGgwp = 76,
    [pbr::OriginalName("k_EDOTA_CW_What_To_Buy")] KEdotaCwWhatToBuy = 77,
    [pbr::OriginalName("k_EDOTA_CW_Im_Retreating")] KEdotaCwImRetreating = 78,
    [pbr::OriginalName("k_EDOTA_CW_Space_Created")] KEdotaCwSpaceCreated = 79,
    [pbr::OriginalName("k_EDOTA_CW_Whoops")] KEdotaCwWhoops = 80,
    [pbr::OriginalName("k_EDOTA_CW_Tower_then_Back")] KEdotaCwTowerThenBack = 81,
    [pbr::OriginalName("k_EDOTA_CW_Barracks_then_Back")] KEdotaCwBarracksThenBack = 82,
    [pbr::OriginalName("k_EDOTA_CW_Ward_Bottom_Rune")] KEdotaCwWardBottomRune = 83,
    [pbr::OriginalName("k_EDOTA_CW_Ward_Top_Rune")] KEdotaCwWardTopRune = 84,
    [pbr::OriginalName("k_EDOTA_CW_Zeus_Ult")] KEdotaCwZeusUlt = 85,
  }

  public enum EDOTAStatPopupTypes {
    [pbr::OriginalName("k_EDOTA_SPT_Textline")] KEdotaSptTextline = 0,
    [pbr::OriginalName("k_EDOTA_SPT_Basic")] KEdotaSptBasic = 1,
    [pbr::OriginalName("k_EDOTA_SPT_Poll")] KEdotaSptPoll = 2,
    [pbr::OriginalName("k_EDOTA_SPT_Grid")] KEdotaSptGrid = 3,
    [pbr::OriginalName("k_EDOTA_SPT_DualImage")] KEdotaSptDualImage = 4,
    [pbr::OriginalName("k_EDOTA_SPT_Movie")] KEdotaSptMovie = 5,
  }

  public enum dotaunitorder_t {
    [pbr::OriginalName("DOTA_UNIT_ORDER_NONE")] DotaUnitOrderNone = 0,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_TO_POSITION")] DotaUnitOrderMoveToPosition = 1,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_TO_TARGET")] DotaUnitOrderMoveToTarget = 2,
    [pbr::OriginalName("DOTA_UNIT_ORDER_ATTACK_MOVE")] DotaUnitOrderAttackMove = 3,
    [pbr::OriginalName("DOTA_UNIT_ORDER_ATTACK_TARGET")] DotaUnitOrderAttackTarget = 4,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_POSITION")] DotaUnitOrderCastPosition = 5,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TARGET")] DotaUnitOrderCastTarget = 6,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TARGET_TREE")] DotaUnitOrderCastTargetTree = 7,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_NO_TARGET")] DotaUnitOrderCastNoTarget = 8,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TOGGLE")] DotaUnitOrderCastToggle = 9,
    [pbr::OriginalName("DOTA_UNIT_ORDER_HOLD_POSITION")] DotaUnitOrderHoldPosition = 10,
    [pbr::OriginalName("DOTA_UNIT_ORDER_TRAIN_ABILITY")] RainAbility = 11,
    [pbr::OriginalName("DOTA_UNIT_ORDER_DROP_ITEM")] DotaUnitOrderDropItem = 12,
    [pbr::OriginalName("DOTA_UNIT_ORDER_GIVE_ITEM")] DotaUnitOrderGiveItem = 13,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PICKUP_ITEM")] DotaUnitOrderPickupItem = 14,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PICKUP_RUNE")] DotaUnitOrderPickupRune = 15,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PURCHASE_ITEM")] DotaUnitOrderPurchaseItem = 16,
    [pbr::OriginalName("DOTA_UNIT_ORDER_SELL_ITEM")] DotaUnitOrderSellItem = 17,
    [pbr::OriginalName("DOTA_UNIT_ORDER_DISASSEMBLE_ITEM")] DotaUnitOrderDisassembleItem = 18,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_ITEM")] DotaUnitOrderMoveItem = 19,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO")] DotaUnitOrderCastToggleAuto = 20,
    [pbr::OriginalName("DOTA_UNIT_ORDER_STOP")] DotaUnitOrderStop = 21,
    [pbr::OriginalName("DOTA_UNIT_ORDER_TAUNT")] Aunt = 22,
    [pbr::OriginalName("DOTA_UNIT_ORDER_BUYBACK")] DotaUnitOrderBuyback = 23,
    [pbr::OriginalName("DOTA_UNIT_ORDER_GLYPH")] DotaUnitOrderGlyph = 24,
    [pbr::OriginalName("DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH")] DotaUnitOrderEjectItemFromStash = 25,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_RUNE")] DotaUnitOrderCastRune = 26,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PING_ABILITY")] DotaUnitOrderPingAbility = 27,
    [pbr::OriginalName("DOTA_UNIT_ORDER_MOVE_TO_DIRECTION")] DotaUnitOrderMoveToDirection = 28,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PATROL")] DotaUnitOrderPatrol = 29,
    [pbr::OriginalName("DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION")] DotaUnitOrderVectorTargetPosition = 30,
    [pbr::OriginalName("DOTA_UNIT_ORDER_RADAR")] DotaUnitOrderRadar = 31,
    [pbr::OriginalName("DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK")] DotaUnitOrderSetItemCombineLock = 32,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CONTINUE")] DotaUnitOrderContinue = 33,
    [pbr::OriginalName("DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED")] DotaUnitOrderVectorTargetCanceled = 34,
    [pbr::OriginalName("DOTA_UNIT_ORDER_CAST_RIVER_PAINT")] DotaUnitOrderCastRiverPaint = 35,
    [pbr::OriginalName("DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT")] DotaUnitOrderPregameAdjustItemAssignment = 36,
  }

  #endregion

  #region Messages
  public sealed partial class CDOTAMsg_LocationPing : pb::IMessage<CDOTAMsg_LocationPing> {
    private static readonly pb::MessageParser<CDOTAMsg_LocationPing> _parser = new pb::MessageParser<CDOTAMsg_LocationPing>(() => new CDOTAMsg_LocationPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_LocationPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_LocationPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_LocationPing(CDOTAMsg_LocationPing other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      target_ = other.target_;
      directPing_ = other.directPing_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_LocationPing Clone() {
      return new CDOTAMsg_LocationPing(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "direct_ping" field.</summary>
    public const int DirectPingFieldNumber = 4;
    private bool directPing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DirectPing {
      get { return directPing_; }
      set {
        directPing_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_LocationPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_LocationPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Target != other.Target) return false;
      if (DirectPing != other.DirectPing) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (DirectPing != false) hash ^= DirectPing.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Target != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Target);
      }
      if (DirectPing != false) {
        output.WriteRawTag(32);
        output.WriteBool(DirectPing);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (DirectPing != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_LocationPing other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      if (other.DirectPing != false) {
        DirectPing = other.DirectPing;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Target = input.ReadInt32();
            break;
          }
          case 32: {
            DirectPing = input.ReadBool();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMsg_ItemAlert : pb::IMessage<CDOTAMsg_ItemAlert> {
    private static readonly pb::MessageParser<CDOTAMsg_ItemAlert> _parser = new pb::MessageParser<CDOTAMsg_ItemAlert>(() => new CDOTAMsg_ItemAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_ItemAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_ItemAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_ItemAlert(CDOTAMsg_ItemAlert other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      itemAbilityId_ = other.itemAbilityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_ItemAlert Clone() {
      return new CDOTAMsg_ItemAlert(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 3;
    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { return itemAbilityId_; }
      set {
        itemAbilityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_ItemAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_ItemAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (ItemAbilityId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (ItemAbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_ItemAlert other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.ItemAbilityId != 0) {
        ItemAbilityId = other.ItemAbilityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMsg_EnemyItemAlert : pb::IMessage<CDOTAMsg_EnemyItemAlert> {
    private static readonly pb::MessageParser<CDOTAMsg_EnemyItemAlert> _parser = new pb::MessageParser<CDOTAMsg_EnemyItemAlert>(() => new CDOTAMsg_EnemyItemAlert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_EnemyItemAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_EnemyItemAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_EnemyItemAlert(CDOTAMsg_EnemyItemAlert other) : this() {
      playerId_ = other.playerId_;
      itemid_ = other.itemid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_EnemyItemAlert Clone() {
      return new CDOTAMsg_EnemyItemAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 2;
    private int itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_EnemyItemAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_EnemyItemAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Itemid != other.Itemid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (Itemid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Itemid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itemid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_EnemyItemAlert other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 16: {
            Itemid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMsg_MapLine : pb::IMessage<CDOTAMsg_MapLine> {
    private static readonly pb::MessageParser<CDOTAMsg_MapLine> _parser = new pb::MessageParser<CDOTAMsg_MapLine>(() => new CDOTAMsg_MapLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_MapLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_MapLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_MapLine(CDOTAMsg_MapLine other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      initial_ = other.initial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_MapLine Clone() {
      return new CDOTAMsg_MapLine(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "initial" field.</summary>
    public const int InitialFieldNumber = 3;
    private bool initial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initial {
      get { return initial_; }
      set {
        initial_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_MapLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_MapLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Initial != other.Initial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Initial != false) hash ^= Initial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Initial != false) {
        output.WriteRawTag(24);
        output.WriteBool(Initial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Initial != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_MapLine other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Initial != false) {
        Initial = other.Initial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Initial = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMsg_WorldLine : pb::IMessage<CDOTAMsg_WorldLine> {
    private static readonly pb::MessageParser<CDOTAMsg_WorldLine> _parser = new pb::MessageParser<CDOTAMsg_WorldLine>(() => new CDOTAMsg_WorldLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_WorldLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_WorldLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_WorldLine(CDOTAMsg_WorldLine other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      initial_ = other.initial_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_WorldLine Clone() {
      return new CDOTAMsg_WorldLine(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "initial" field.</summary>
    public const int InitialFieldNumber = 4;
    private bool initial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initial {
      get { return initial_; }
      set {
        initial_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private bool end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_WorldLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_WorldLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Initial != other.Initial) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (Initial != false) hash ^= Initial.GetHashCode();
      if (End != false) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (Initial != false) {
        output.WriteRawTag(32);
        output.WriteBool(Initial);
      }
      if (End != false) {
        output.WriteRawTag(40);
        output.WriteBool(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (Initial != false) {
        size += 1 + 1;
      }
      if (End != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_WorldLine other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      if (other.Initial != false) {
        Initial = other.Initial;
      }
      if (other.End != false) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            Initial = input.ReadBool();
            break;
          }
          case 40: {
            End = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMsg_SendStatPopup : pb::IMessage<CDOTAMsg_SendStatPopup> {
    private static readonly pb::MessageParser<CDOTAMsg_SendStatPopup> _parser = new pb::MessageParser<CDOTAMsg_SendStatPopup>(() => new CDOTAMsg_SendStatPopup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_SendStatPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_SendStatPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_SendStatPopup(CDOTAMsg_SendStatPopup other) : this() {
      style_ = other.style_;
      statStrings_ = other.statStrings_.Clone();
      statImages_ = other.statImages_.Clone();
      statImageTypes_ = other.statImageTypes_.Clone();
      duration_ = other.duration_;
      useHtml_ = other.useHtml_;
      movieName_ = other.movieName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_SendStatPopup Clone() {
      return new CDOTAMsg_SendStatPopup(this);
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 1;
    private global::Proto.Dota.EDOTAStatPopupTypes style_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.EDOTAStatPopupTypes Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "stat_strings" field.</summary>
    public const int StatStringsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_statStrings_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> statStrings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StatStrings {
      get { return statStrings_; }
    }

    /// <summary>Field number for the "stat_images" field.</summary>
    public const int StatImagesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_statImages_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> statImages_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StatImages {
      get { return statImages_; }
    }

    /// <summary>Field number for the "stat_image_types" field.</summary>
    public const int StatImageTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_statImageTypes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> statImageTypes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StatImageTypes {
      get { return statImageTypes_; }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "use_html" field.</summary>
    public const int UseHtmlFieldNumber = 6;
    private bool useHtml_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseHtml {
      get { return useHtml_; }
      set {
        useHtml_ = value;
      }
    }

    /// <summary>Field number for the "movie_name" field.</summary>
    public const int MovieNameFieldNumber = 7;
    private string movieName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MovieName {
      get { return movieName_; }
      set {
        movieName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_SendStatPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_SendStatPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Style != other.Style) return false;
      if(!statStrings_.Equals(other.statStrings_)) return false;
      if(!statImages_.Equals(other.statImages_)) return false;
      if(!statImageTypes_.Equals(other.statImageTypes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (UseHtml != other.UseHtml) return false;
      if (MovieName != other.MovieName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Style != 0) hash ^= Style.GetHashCode();
      hash ^= statStrings_.GetHashCode();
      hash ^= statImages_.GetHashCode();
      hash ^= statImageTypes_.GetHashCode();
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (UseHtml != false) hash ^= UseHtml.GetHashCode();
      if (MovieName.Length != 0) hash ^= MovieName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Style != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Style);
      }
      statStrings_.WriteTo(output, _repeated_statStrings_codec);
      statImages_.WriteTo(output, _repeated_statImages_codec);
      statImageTypes_.WriteTo(output, _repeated_statImageTypes_codec);
      if (Duration != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Duration);
      }
      if (UseHtml != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseHtml);
      }
      if (MovieName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MovieName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Style != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Style);
      }
      size += statStrings_.CalculateSize(_repeated_statStrings_codec);
      size += statImages_.CalculateSize(_repeated_statImages_codec);
      size += statImageTypes_.CalculateSize(_repeated_statImageTypes_codec);
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (UseHtml != false) {
        size += 1 + 1;
      }
      if (MovieName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MovieName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_SendStatPopup other) {
      if (other == null) {
        return;
      }
      if (other.Style != 0) {
        Style = other.Style;
      }
      statStrings_.Add(other.statStrings_);
      statImages_.Add(other.statImages_);
      statImageTypes_.Add(other.statImageTypes_);
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.UseHtml != false) {
        UseHtml = other.UseHtml;
      }
      if (other.MovieName.Length != 0) {
        MovieName = other.MovieName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            style_ = (global::Proto.Dota.EDOTAStatPopupTypes) input.ReadEnum();
            break;
          }
          case 18: {
            statStrings_.AddEntriesFrom(input, _repeated_statStrings_codec);
            break;
          }
          case 26:
          case 24: {
            statImages_.AddEntriesFrom(input, _repeated_statImages_codec);
            break;
          }
          case 34:
          case 32: {
            statImageTypes_.AddEntriesFrom(input, _repeated_statImageTypes_codec);
            break;
          }
          case 45: {
            Duration = input.ReadFloat();
            break;
          }
          case 48: {
            UseHtml = input.ReadBool();
            break;
          }
          case 58: {
            MovieName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMsg_DismissAllStatPopups : pb::IMessage<CDOTAMsg_DismissAllStatPopups> {
    private static readonly pb::MessageParser<CDOTAMsg_DismissAllStatPopups> _parser = new pb::MessageParser<CDOTAMsg_DismissAllStatPopups>(() => new CDOTAMsg_DismissAllStatPopups());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_DismissAllStatPopups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_DismissAllStatPopups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_DismissAllStatPopups(CDOTAMsg_DismissAllStatPopups other) : this() {
      timeDelay_ = other.timeDelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_DismissAllStatPopups Clone() {
      return new CDOTAMsg_DismissAllStatPopups(this);
    }

    /// <summary>Field number for the "time_delay" field.</summary>
    public const int TimeDelayFieldNumber = 1;
    private float timeDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeDelay {
      get { return timeDelay_; }
      set {
        timeDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_DismissAllStatPopups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_DismissAllStatPopups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeDelay, other.TimeDelay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeDelay);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeDelay != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(TimeDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeDelay != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_DismissAllStatPopups other) {
      if (other == null) {
        return;
      }
      if (other.TimeDelay != 0F) {
        TimeDelay = other.TimeDelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            TimeDelay = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMsg_CoachHUDPing : pb::IMessage<CDOTAMsg_CoachHUDPing> {
    private static readonly pb::MessageParser<CDOTAMsg_CoachHUDPing> _parser = new pb::MessageParser<CDOTAMsg_CoachHUDPing>(() => new CDOTAMsg_CoachHUDPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMsg_CoachHUDPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.DotaCommonmessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_CoachHUDPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_CoachHUDPing(CDOTAMsg_CoachHUDPing other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      tgtpath_ = other.tgtpath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMsg_CoachHUDPing Clone() {
      return new CDOTAMsg_CoachHUDPing(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private uint x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private uint y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "tgtpath" field.</summary>
    public const int TgtpathFieldNumber = 3;
    private string tgtpath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tgtpath {
      get { return tgtpath_; }
      set {
        tgtpath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMsg_CoachHUDPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMsg_CoachHUDPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Tgtpath != other.Tgtpath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Tgtpath.Length != 0) hash ^= Tgtpath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (Tgtpath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Tgtpath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (Tgtpath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tgtpath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMsg_CoachHUDPing other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Tgtpath.Length != 0) {
        Tgtpath = other.Tgtpath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
          case 26: {
            Tgtpath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
