// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2_dota_gcmessages_common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from s2_dota_gcmessages_common.proto</summary>
  public static partial class S2DotaGcmessagesCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for s2_dota_gcmessages_common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S2DotaGcmessagesCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9zMl9kb3RhX2djbWVzc2FnZXNfY29tbW9uLnByb3RvEg9nb29nbGUucHJv",
            "dG9idWYiOwoaQ01hdGNoUGxheWVyQWJpbGl0eVVwZ3JhZGUSDwoHYWJpbGl0",
            "eRgBIAEoDRIMCgR0aW1lGAIgASgNIkEKHUNNYXRjaEFkZGl0aW9uYWxVbml0",
            "SW52ZW50b3J5EhEKCXVuaXRfbmFtZRgBIAEoCRINCgVpdGVtcxgCIAMoDSJI",
            "ChlDTWF0Y2hQbGF5ZXJQZXJtYW5lbnRCdWZmEhYKDnBlcm1hbmVudF9idWZm",
            "GAEgASgNEhMKC3N0YWNrX2NvdW50GAIgASgNIkcKFUNNYXRjaEhlcm9TZWxl",
            "Y3RFdmVudBIPCgdpc19waWNrGAEgASgIEgwKBHRlYW0YAiABKA0SDwoHaGVy",
            "b19pZBgDIAEoDSLeGgoNQ01zZ0RPVEFNYXRjaBIVCg1nb29kX2d1eXNfd2lu",
            "GAIgASgIEhAKCGR1cmF0aW9uGAMgASgNEhEKCXN0YXJ0VGltZRgEIAEoBxI2",
            "CgdwbGF5ZXJzGAUgAygLMiUuZ29vZ2xlLnByb3RvYnVmLkNNc2dET1RBTWF0",
            "Y2guUGxheWVyEhAKCG1hdGNoX2lkGAYgASgEEhQKDHRvd2VyX3N0YXR1cxgI",
            "IAMoDRIXCg9iYXJyYWNrc19zdGF0dXMYCSADKA0SDwoHY2x1c3RlchgKIAEo",
            "DRIYChBmaXJzdF9ibG9vZF90aW1lGAwgASgNEhMKC3JlcGxheV9zYWx0GA0g",
            "ASgHEhEKCXNlcnZlcl9pcBgOIAEoBxITCgtzZXJ2ZXJfcG9ydBgPIAEoDRIS",
            "Cgpsb2JieV90eXBlGBAgASgNEhUKDWh1bWFuX3BsYXllcnMYESABKA0SFQoN",
            "YXZlcmFnZV9za2lsbBgSIAEoDRIUCgxnYW1lX2JhbGFuY2UYEyABKAISFwoP",
            "cmFkaWFudF90ZWFtX2lkGBQgASgNEhQKDGRpcmVfdGVhbV9pZBgVIAEoDRIQ",
            "CghsZWFndWVpZBgWIAEoDRIZChFyYWRpYW50X3RlYW1fbmFtZRgXIAEoCRIW",
            "Cg5kaXJlX3RlYW1fbmFtZRgYIAEoCRIZChFyYWRpYW50X3RlYW1fbG9nbxgZ",
            "IAEoBBIWCg5kaXJlX3RlYW1fbG9nbxgaIAEoBBIdChVyYWRpYW50X3RlYW1f",
            "Y29tcGxldGUYGyABKA0SGgoSZGlyZV90ZWFtX2NvbXBsZXRlGBwgASgNEhYK",
            "DnBvc2l0aXZlX3ZvdGVzGB0gASgNEhYKDm5lZ2F0aXZlX3ZvdGVzGB4gASgN",
            "EjEKCWdhbWVfbW9kZRgfIAEoDjIeLmdvb2dsZS5wcm90b2J1Zi5ET1RBX0dh",
            "bWVNb2RlEjoKCnBpY2tzX2JhbnMYICADKAsyJi5nb29nbGUucHJvdG9idWYu",
            "Q01hdGNoSGVyb1NlbGVjdEV2ZW50EhUKDW1hdGNoX3NlcV9udW0YISABKAQS",
            "QAoMcmVwbGF5X3N0YXRlGCIgASgOMiouZ29vZ2xlLnByb3RvYnVmLkNNc2dE",
            "T1RBTWF0Y2guUmVwbGF5U3RhdGUSGAoQcmFkaWFudF9ndWlsZF9pZBgjIAEo",
            "DRIVCg1kaXJlX2d1aWxkX2lkGCQgASgNEhgKEHJhZGlhbnRfdGVhbV90YWcY",
            "JSABKAkSFQoNZGlyZV90ZWFtX3RhZxgmIAEoCRIRCglzZXJpZXNfaWQYJyAB",
            "KA0SEwoLc2VyaWVzX3R5cGUYKCABKA0STwoUYnJvYWRjYXN0ZXJfY2hhbm5l",
            "bHMYKyADKAsyMS5nb29nbGUucHJvdG9idWYuQ01zZ0RPVEFNYXRjaC5Ccm9h",
            "ZGNhc3RlckNoYW5uZWwSDgoGZW5naW5lGCwgASgNEkcKEGN1c3RvbV9nYW1l",
            "X2RhdGEYLSABKAsyLS5nb29nbGUucHJvdG9idWYuQ01zZ0RPVEFNYXRjaC5D",
            "dXN0b21HYW1lRGF0YRITCgttYXRjaF9mbGFncxguIAEoDRIcChRwcml2YXRl",
            "X21ldGFkYXRhX2tleRgvIAEoBxIaChJyYWRpYW50X3RlYW1fc2NvcmUYMCAB",
            "KA0SFwoPZGlyZV90ZWFtX3Njb3JlGDEgASgNEjUKDW1hdGNoX291dGNvbWUY",
            "MiABKA4yHi5nb29nbGUucHJvdG9idWYuRU1hdGNoT3V0Y29tZRIVCg10b3Vy",
            "bmFtZW50X2lkGDMgASgNEhgKEHRvdXJuYW1lbnRfcm91bmQYNCABKA0SGQoR",
            "cHJlX2dhbWVfZHVyYXRpb24YNSABKA0a9wwKBlBsYXllchISCgphY2NvdW50",
            "X2lkGAEgASgNEhMKC3BsYXllcl9zbG90GAIgASgNEg8KB2hlcm9faWQYAyAB",
            "KA0SDgoGaXRlbV8wGAQgASgNEg4KBml0ZW1fMRgFIAEoDRIOCgZpdGVtXzIY",
            "BiABKA0SDgoGaXRlbV8zGAcgASgNEg4KBml0ZW1fNBgIIAEoDRIOCgZpdGVt",
            "XzUYCSABKA0SDgoGaXRlbV82GDsgASgNEg4KBml0ZW1fNxg8IAEoDRIOCgZp",
            "dGVtXzgYPSABKA0SIgoaZXhwZWN0ZWRfdGVhbV9jb250cmlidXRpb24YCiAB",
            "KAISFQoNc2NhbGVkX21ldHJpYxgLIAEoAhIVCg1wcmV2aW91c19yYW5rGAwg",
            "ASgNEhMKC3JhbmtfY2hhbmdlGA0gASgREhEKCXNvbG9fcmFuaxgxIAEoCBIV",
            "Cg1zZWFzb25hbF9yYW5rGDUgASgIEhkKEXJhbmtfdGllcl91cGRhdGVkGEIg",
            "ASgIEg0KBWtpbGxzGA4gASgNEg4KBmRlYXRocxgPIAEoDRIPCgdhc3Npc3Rz",
            "GBAgASgNEhUKDWxlYXZlcl9zdGF0dXMYESABKA0SDAoEZ29sZBgSIAEoDRIR",
            "CglsYXN0X2hpdHMYEyABKA0SDgoGZGVuaWVzGBQgASgNEhQKDGdvbGRfcGVy",
            "X21pbhgVIAEoDRISCgpYUF9wZXJfbWluGBYgASgNEhIKCmdvbGRfc3BlbnQY",
            "FyABKA0SEwoLaGVyb19kYW1hZ2UYGCABKA0SFAoMdG93ZXJfZGFtYWdlGBkg",
            "ASgNEhQKDGhlcm9faGVhbGluZxgaIAEoDRINCgVsZXZlbBgbIAEoDRIWCg50",
            "aW1lX2xhc3Rfc2VlbhgcIAEoDRITCgtwbGF5ZXJfbmFtZRgdIAEoCRIdChVz",
            "dXBwb3J0X2FiaWxpdHlfdmFsdWUYHiABKA0SGAoQZmVlZGluZ19kZXRlY3Rl",
            "ZBggIAEoCBITCgtzZWFyY2hfcmFuaxgiIAEoDRIfChdzZWFyY2hfcmFua191",
            "bmNlcnRhaW50eRgjIAEoDRIfChdyYW5rX3VuY2VydGFpbnR5X2NoYW5nZRgk",
            "IAEoBRIXCg9oZXJvX3BsYXlfY291bnQYJSABKA0SEAoIcGFydHlfaWQYJiAB",
            "KAYSGgoSc2NhbGVkX2hlcm9fZGFtYWdlGDYgASgNEhsKE3NjYWxlZF90b3dl",
            "cl9kYW1hZ2UYNyABKA0SGwoTc2NhbGVkX2hlcm9faGVhbGluZxg4IAEoDRIU",
            "CgxzY2FsZWRfa2lsbHMYJyABKAISFQoNc2NhbGVkX2RlYXRocxgoIAEoAhIW",
            "Cg5zY2FsZWRfYXNzaXN0cxgpIAEoAhIZChFjbGFpbWVkX2Zhcm1fZ29sZBgq",
            "IAEoDRIUCgxzdXBwb3J0X2dvbGQYKyABKA0SFgoOY2xhaW1lZF9kZW5pZXMY",
            "LCABKA0SFgoOY2xhaW1lZF9taXNzZXMYLSABKA0SDgoGbWlzc2VzGC4gASgN",
            "EkUKEGFiaWxpdHlfdXBncmFkZXMYLyADKAsyKy5nb29nbGUucHJvdG9idWYu",
            "Q01hdGNoUGxheWVyQWJpbGl0eVVwZ3JhZGUSUgoaYWRkaXRpb25hbF91bml0",
            "c19pbnZlbnRvcnkYMCADKAsyLi5nb29nbGUucHJvdG9idWYuQ01hdGNoQWRk",
            "aXRpb25hbFVuaXRJbnZlbnRvcnkSQwoPcGVybWFuZW50X2J1ZmZzGDkgAygL",
            "MiouZ29vZ2xlLnByb3RvYnVmLkNNYXRjaFBsYXllclBlcm1hbmVudEJ1ZmYS",
            "TgoQY3VzdG9tX2dhbWVfZGF0YRgyIAEoCzI0Lmdvb2dsZS5wcm90b2J1Zi5D",
            "TXNnRE9UQU1hdGNoLlBsYXllci5DdXN0b21HYW1lRGF0YRIhChlhY3RpdmVf",
            "cHJpbWVfc3Vic2NyaXB0aW9uGDMgASgIEhEKCW5ldF93b3J0aBg0IAEoDRIW",
            "Cg5ib3RfZGlmZmljdWx0eRg6IAEoDRIXCg9oZXJvX3BpY2tfb3JkZXIYPyAB",
            "KA0SGQoRaGVyb193YXNfcmFuZG9tZWQYQCABKAgSFgoOaGVyb193YXNfYm9u",
            "dXMYQSABKAgaMwoOQ3VzdG9tR2FtZURhdGESEQoJZG90YV90ZWFtGAEgASgN",
            "Eg4KBndpbm5lchgCIAEoCBozCg9Ccm9hZGNhc3RlckluZm8SEgoKYWNjb3Vu",
            "dF9pZBgBIAEoDRIMCgRuYW1lGAIgASgJGqEBChJCcm9hZGNhc3RlckNoYW5u",
            "ZWwSFAoMY291bnRyeV9jb2RlGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJ",
            "EkkKEWJyb2FkY2FzdGVyX2luZm9zGAMgAygLMi4uZ29vZ2xlLnByb3RvYnVm",
            "LkNNc2dET1RBTWF0Y2guQnJvYWRjYXN0ZXJJbmZvEhUKDWxhbmd1YWdlX2Nv",
            "ZGUYBCABKAkaOgoOQ3VzdG9tR2FtZURhdGESFgoOY3VzdG9tX2dhbWVfaWQY",
            "ASABKAQSEAoIbWFwX25hbWUYAiABKAkiUAoLUmVwbGF5U3RhdGUSFAoQUkVQ",
            "TEFZX0FWQUlMQUJMRRAAEhcKE1JFUExBWV9OT1RfUkVDT1JERUQQARISCg5S",
            "RVBMQVlfRVhQSVJFRBACIskBCg1DTXNnTWF0Y2hUaXBzEikKCGV2ZW50X2lk",
            "GAEgASgOMhcuZ29vZ2xlLnByb3RvYnVmLkVFdmVudBI2CgR0aXBzGAIgAygL",
            "MiguZ29vZ2xlLnByb3RvYnVmLkNNc2dNYXRjaFRpcHMuU2luZ2xlVGlwGlUK",
            "CVNpbmdsZVRpcBIZChFzb3VyY2VfYWNjb3VudF9pZBgBIAEoDRIZChF0YXJn",
            "ZXRfYWNjb3VudF9pZBgCIAEoDRISCgp0aXBfYW1vdW50GAMgASgNKvUECg1E",
            "T1RBX0dhbWVNb2RlEhYKEkRPVEFfR0FNRU1PREVfTk9ORRAAEhQKEERPVEFf",
            "R0FNRU1PREVfQVAQARIUChBET1RBX0dBTUVNT0RFX0NNEAISFAoQRE9UQV9H",
            "QU1FTU9ERV9SRBADEhQKEERPVEFfR0FNRU1PREVfU0QQBBIUChBET1RBX0dB",
            "TUVNT0RFX0FSEAUSFwoTRE9UQV9HQU1FTU9ERV9JTlRSTxAGEhQKEERPVEFf",
            "R0FNRU1PREVfSFcQBxIcChhET1RBX0dBTUVNT0RFX1JFVkVSU0VfQ00QCBIW",
            "ChJET1RBX0dBTUVNT0RFX1hNQVMQCRIaChZET1RBX0dBTUVNT0RFX1RVVE9S",
            "SUFMEAoSFAoQRE9UQV9HQU1FTU9ERV9NTxALEhQKEERPVEFfR0FNRU1PREVf",
            "TFAQDBIXChNET1RBX0dBTUVNT0RFX1BPT0wxEA0SFAoQRE9UQV9HQU1FTU9E",
            "RV9GSBAOEhgKFERPVEFfR0FNRU1PREVfQ1VTVE9NEA8SFAoQRE9UQV9HQU1F",
            "TU9ERV9DRBAQEhQKEERPVEFfR0FNRU1PREVfQkQQERIfChtET1RBX0dBTUVN",
            "T0RFX0FCSUxJVFlfRFJBRlQQEhIXChNET1RBX0dBTUVNT0RFX0VWRU5UEBMS",
            "FgoSRE9UQV9HQU1FTU9ERV9BUkRNEBQSGAoURE9UQV9HQU1FTU9ERV8xVjFN",
            "SUQQFRIbChdET1RBX0dBTUVNT0RFX0FMTF9EUkFGVBAWEhcKE0RPVEFfR0FN",
            "RU1PREVfVFVSQk8QFxIaChZET1RBX0dBTUVNT0RFX01VVEFUSU9OEBgq/QUK",
            "BkVFdmVudBIRCg1FVkVOVF9JRF9OT05FEAASFQoRRVZFTlRfSURfRElSRVRJ",
            "REUQARIcChhFVkVOVF9JRF9TUFJJTkdfRkVTVElWQUwQAhIbChdFVkVOVF9J",
            "RF9GUk9TVElWVVNfMjAxMxADEhwKGEVWRU5UX0lEX0NPTVBFTkRJVU1fMjAx",
            "NBAEEhoKFkVWRU5UX0lEX05FWE9OX1BDX0JBTkcQBRIaChZFVkVOVF9JRF9Q",
            "V1JEX0RBQ18yMDE1EAYSGwoXRVZFTlRfSURfTkVXX0JMT09NXzIwMTUQBxIf",
            "ChtFVkVOVF9JRF9JTlRFUk5BVElPTkFMXzIwMTUQCBIcChhFVkVOVF9JRF9G",
            "QUxMX01BSk9SXzIwMTUQCRIWChJFVkVOVF9JRF9PUkFDTEVfUEEQChIkCiBF",
            "VkVOVF9JRF9ORVdfQkxPT01fMjAxNV9QUkVCRUFTVBALEhYKEkVWRU5UX0lE",
            "X0ZST1NUSVZVUxAMEh4KGkVWRU5UX0lEX1dJTlRFUl9NQUpPUl8yMDE2EA0S",
            "HwobRVZFTlRfSURfSU5URVJOQVRJT05BTF8yMDE2EA4SHAoYRVZFTlRfSURf",
            "RkFMTF9NQUpPUl8yMDE2EA8SHgoaRVZFTlRfSURfV0lOVEVSX01BSk9SXzIw",
            "MTcQEBIbChdFVkVOVF9JRF9ORVdfQkxPT01fMjAxNxAREh8KG0VWRU5UX0lE",
            "X0lOVEVSTkFUSU9OQUxfMjAxNxASEh4KGkVWRU5UX0lEX1BMVVNfU1VCU0NS",
            "SVBUSU9OEBMSHQoZRVZFTlRfSURfU0lOR0xFU19EQVlfMjAxNxAUEhsKF0VW",
            "RU5UX0lEX0ZST1NUSVZVU18yMDE3EBUSHwobRVZFTlRfSURfSU5URVJOQVRJ",
            "T05BTF8yMDE4EBYSGwoXRVZFTlRfSURfRlJPU1RJVlVTXzIwMTgQFxIbChdF",
            "VkVOVF9JRF9ORVdfQkxPT01fMjAxORAYEhIKDkVWRU5UX0lEX0NPVU5UEBkq",
            "xwIKDUVNYXRjaE91dGNvbWUSGwoXa19FTWF0Y2hPdXRjb21lX1Vua25vd24Q",
            "ABIeChprX0VNYXRjaE91dGNvbWVfUmFkVmljdG9yeRACEh8KG2tfRU1hdGNo",
            "T3V0Y29tZV9EaXJlVmljdG9yeRADEjMKL2tfRU1hdGNoT3V0Y29tZV9Ob3RT",
            "Y29yZWRfUG9vck5ldHdvcmtDb25kaXRpb25zEEASJAoga19FTWF0Y2hPdXRj",
            "b21lX05vdFNjb3JlZF9MZWF2ZXIQQRIpCiVrX0VNYXRjaE91dGNvbWVfTm90",
            "U2NvcmVkX1NlcnZlckNyYXNoEEISKgoma19FTWF0Y2hPdXRjb21lX05vdFNj",
            "b3JlZF9OZXZlclN0YXJ0ZWQQQxImCiJrX0VNYXRjaE91dGNvbWVfTm90U2Nv",
            "cmVkX0NhbmNlbGVkEERCEkgBgAEAqgIKUHJvdG8uRG90YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.DOTA_GameMode), typeof(global::Proto.Dota.EEvent), typeof(global::Proto.Dota.EMatchOutcome), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMatchPlayerAbilityUpgrade), global::Proto.Dota.CMatchPlayerAbilityUpgrade.Parser, new[]{ "Ability", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMatchAdditionalUnitInventory), global::Proto.Dota.CMatchAdditionalUnitInventory.Parser, new[]{ "UnitName", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMatchPlayerPermanentBuff), global::Proto.Dota.CMatchPlayerPermanentBuff.Parser, new[]{ "PermanentBuff", "StackCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMatchHeroSelectEvent), global::Proto.Dota.CMatchHeroSelectEvent.Parser, new[]{ "IsPick", "Team", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgDOTAMatch), global::Proto.Dota.CMsgDOTAMatch.Parser, new[]{ "GoodGuysWin", "Duration", "StartTime", "Players", "MatchId", "TowerStatus", "BarracksStatus", "Cluster", "FirstBloodTime", "ReplaySalt", "ServerIp", "ServerPort", "LobbyType", "HumanPlayers", "AverageSkill", "GameBalance", "RadiantTeamId", "DireTeamId", "Leagueid", "RadiantTeamName", "DireTeamName", "RadiantTeamLogo", "DireTeamLogo", "RadiantTeamComplete", "DireTeamComplete", "PositiveVotes", "NegativeVotes", "GameMode", "PicksBans", "MatchSeqNum", "ReplayState", "RadiantGuildId", "DireGuildId", "RadiantTeamTag", "DireTeamTag", "SeriesId", "SeriesType", "BroadcasterChannels", "Engine", "CustomGameData", "MatchFlags", "PrivateMetadataKey", "RadiantTeamScore", "DireTeamScore", "MatchOutcome", "TournamentId", "TournamentRound", "PreGameDuration" }, null, new[]{ typeof(global::Proto.Dota.CMsgDOTAMatch.Types.ReplayState) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgDOTAMatch.Types.Player), global::Proto.Dota.CMsgDOTAMatch.Types.Player.Parser, new[]{ "AccountId", "PlayerSlot", "HeroId", "Item0", "Item1", "Item2", "Item3", "Item4", "Item5", "Item6", "Item7", "Item8", "ExpectedTeamContribution", "ScaledMetric", "PreviousRank", "RankChange", "SoloRank", "SeasonalRank", "RankTierUpdated", "Kills", "Deaths", "Assists", "LeaverStatus", "Gold", "LastHits", "Denies", "GoldPerMin", "XPPerMin", "GoldSpent", "HeroDamage", "TowerDamage", "HeroHealing", "Level", "TimeLastSeen", "PlayerName", "SupportAbilityValue", "FeedingDetected", "SearchRank", "SearchRankUncertainty", "RankUncertaintyChange", "HeroPlayCount", "PartyId", "ScaledHeroDamage", "ScaledTowerDamage", "ScaledHeroHealing", "ScaledKills", "ScaledDeaths", "ScaledAssists", "ClaimedFarmGold", "SupportGold", "ClaimedDenies", "ClaimedMisses", "Misses", "AbilityUpgrades", "AdditionalUnitsInventory", "PermanentBuffs", "CustomGameData", "ActivePrimeSubscription", "NetWorth", "BotDifficulty", "HeroPickOrder", "HeroWasRandomed", "HeroWasBonus" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgDOTAMatch.Types.Player.Types.CustomGameData), global::Proto.Dota.CMsgDOTAMatch.Types.Player.Types.CustomGameData.Parser, new[]{ "DotaTeam", "Winner" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterInfo), global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterInfo.Parser, new[]{ "AccountId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterChannel), global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterChannel.Parser, new[]{ "CountryCode", "Description", "BroadcasterInfos", "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgDOTAMatch.Types.CustomGameData), global::Proto.Dota.CMsgDOTAMatch.Types.CustomGameData.Parser, new[]{ "CustomGameId", "MapName" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgMatchTips), global::Proto.Dota.CMsgMatchTips.Parser, new[]{ "EventId", "Tips" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgMatchTips.Types.SingleTip), global::Proto.Dota.CMsgMatchTips.Types.SingleTip.Parser, new[]{ "SourceAccountId", "TargetAccountId", "TipAmount" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum DOTA_GameMode {
    [pbr::OriginalName("DOTA_GAMEMODE_NONE")] None = 0,
    [pbr::OriginalName("DOTA_GAMEMODE_AP")] Ap = 1,
    [pbr::OriginalName("DOTA_GAMEMODE_CM")] Cm = 2,
    [pbr::OriginalName("DOTA_GAMEMODE_RD")] Rd = 3,
    [pbr::OriginalName("DOTA_GAMEMODE_SD")] Sd = 4,
    [pbr::OriginalName("DOTA_GAMEMODE_AR")] Ar = 5,
    [pbr::OriginalName("DOTA_GAMEMODE_INTRO")] Intro = 6,
    [pbr::OriginalName("DOTA_GAMEMODE_HW")] Hw = 7,
    [pbr::OriginalName("DOTA_GAMEMODE_REVERSE_CM")] ReverseCm = 8,
    [pbr::OriginalName("DOTA_GAMEMODE_XMAS")] Xmas = 9,
    [pbr::OriginalName("DOTA_GAMEMODE_TUTORIAL")] Tutorial = 10,
    [pbr::OriginalName("DOTA_GAMEMODE_MO")] Mo = 11,
    [pbr::OriginalName("DOTA_GAMEMODE_LP")] Lp = 12,
    [pbr::OriginalName("DOTA_GAMEMODE_POOL1")] Pool1 = 13,
    [pbr::OriginalName("DOTA_GAMEMODE_FH")] Fh = 14,
    [pbr::OriginalName("DOTA_GAMEMODE_CUSTOM")] Custom = 15,
    [pbr::OriginalName("DOTA_GAMEMODE_CD")] Cd = 16,
    [pbr::OriginalName("DOTA_GAMEMODE_BD")] Bd = 17,
    [pbr::OriginalName("DOTA_GAMEMODE_ABILITY_DRAFT")] AbilityDraft = 18,
    [pbr::OriginalName("DOTA_GAMEMODE_EVENT")] Event = 19,
    [pbr::OriginalName("DOTA_GAMEMODE_ARDM")] Ardm = 20,
    [pbr::OriginalName("DOTA_GAMEMODE_1V1MID")] _1V1Mid = 21,
    [pbr::OriginalName("DOTA_GAMEMODE_ALL_DRAFT")] AllDraft = 22,
    [pbr::OriginalName("DOTA_GAMEMODE_TURBO")] Turbo = 23,
    [pbr::OriginalName("DOTA_GAMEMODE_MUTATION")] Mutation = 24,
  }

  public enum EEvent {
    [pbr::OriginalName("EVENT_ID_NONE")] EventIdNone = 0,
    [pbr::OriginalName("EVENT_ID_DIRETIDE")] EventIdDiretide = 1,
    [pbr::OriginalName("EVENT_ID_SPRING_FESTIVAL")] EventIdSpringFestival = 2,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2013")] EventIdFrostivus2013 = 3,
    [pbr::OriginalName("EVENT_ID_COMPENDIUM_2014")] EventIdCompendium2014 = 4,
    [pbr::OriginalName("EVENT_ID_NEXON_PC_BANG")] EventIdNexonPcBang = 5,
    [pbr::OriginalName("EVENT_ID_PWRD_DAC_2015")] EventIdPwrdDac2015 = 6,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2015")] EventIdNewBloom2015 = 7,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2015")] EventIdInternational2015 = 8,
    [pbr::OriginalName("EVENT_ID_FALL_MAJOR_2015")] EventIdFallMajor2015 = 9,
    [pbr::OriginalName("EVENT_ID_ORACLE_PA")] EventIdOraclePa = 10,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2015_PREBEAST")] EventIdNewBloom2015Prebeast = 11,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS")] EventIdFrostivus = 12,
    [pbr::OriginalName("EVENT_ID_WINTER_MAJOR_2016")] EventIdWinterMajor2016 = 13,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2016")] EventIdInternational2016 = 14,
    [pbr::OriginalName("EVENT_ID_FALL_MAJOR_2016")] EventIdFallMajor2016 = 15,
    [pbr::OriginalName("EVENT_ID_WINTER_MAJOR_2017")] EventIdWinterMajor2017 = 16,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2017")] EventIdNewBloom2017 = 17,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2017")] EventIdInternational2017 = 18,
    [pbr::OriginalName("EVENT_ID_PLUS_SUBSCRIPTION")] EventIdPlusSubscription = 19,
    [pbr::OriginalName("EVENT_ID_SINGLES_DAY_2017")] EventIdSinglesDay2017 = 20,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2017")] EventIdFrostivus2017 = 21,
    [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2018")] EventIdInternational2018 = 22,
    [pbr::OriginalName("EVENT_ID_FROSTIVUS_2018")] EventIdFrostivus2018 = 23,
    [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2019")] EventIdNewBloom2019 = 24,
    [pbr::OriginalName("EVENT_ID_COUNT")] EventIdCount = 25,
  }

  public enum EMatchOutcome {
    [pbr::OriginalName("k_EMatchOutcome_Unknown")] KEmatchOutcomeUnknown = 0,
    [pbr::OriginalName("k_EMatchOutcome_RadVictory")] KEmatchOutcomeRadVictory = 2,
    [pbr::OriginalName("k_EMatchOutcome_DireVictory")] KEmatchOutcomeDireVictory = 3,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_PoorNetworkConditions")] KEmatchOutcomeNotScoredPoorNetworkConditions = 64,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_Leaver")] KEmatchOutcomeNotScoredLeaver = 65,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_ServerCrash")] KEmatchOutcomeNotScoredServerCrash = 66,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_NeverStarted")] KEmatchOutcomeNotScoredNeverStarted = 67,
    [pbr::OriginalName("k_EMatchOutcome_NotScored_Canceled")] KEmatchOutcomeNotScoredCanceled = 68,
  }

  #endregion

  #region Messages
  public sealed partial class CMatchPlayerAbilityUpgrade : pb::IMessage<CMatchPlayerAbilityUpgrade> {
    private static readonly pb::MessageParser<CMatchPlayerAbilityUpgrade> _parser = new pb::MessageParser<CMatchPlayerAbilityUpgrade>(() => new CMatchPlayerAbilityUpgrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchPlayerAbilityUpgrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaGcmessagesCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerAbilityUpgrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerAbilityUpgrade(CMatchPlayerAbilityUpgrade other) : this() {
      ability_ = other.ability_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerAbilityUpgrade Clone() {
      return new CMatchPlayerAbilityUpgrade(this);
    }

    /// <summary>Field number for the "ability" field.</summary>
    public const int AbilityFieldNumber = 1;
    private uint ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchPlayerAbilityUpgrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchPlayerAbilityUpgrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ability != other.Ability) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ability != 0) hash ^= Ability.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ability != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ability);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ability);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchPlayerAbilityUpgrade other) {
      if (other == null) {
        return;
      }
      if (other.Ability != 0) {
        Ability = other.Ability;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ability = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMatchAdditionalUnitInventory : pb::IMessage<CMatchAdditionalUnitInventory> {
    private static readonly pb::MessageParser<CMatchAdditionalUnitInventory> _parser = new pb::MessageParser<CMatchAdditionalUnitInventory>(() => new CMatchAdditionalUnitInventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchAdditionalUnitInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaGcmessagesCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchAdditionalUnitInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchAdditionalUnitInventory(CMatchAdditionalUnitInventory other) : this() {
      unitName_ = other.unitName_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchAdditionalUnitInventory Clone() {
      return new CMatchAdditionalUnitInventory(this);
    }

    /// <summary>Field number for the "unit_name" field.</summary>
    public const int UnitNameFieldNumber = 1;
    private string unitName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitName {
      get { return unitName_; }
      set {
        unitName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_items_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> items_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchAdditionalUnitInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchAdditionalUnitInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitName != other.UnitName) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitName.Length != 0) hash ^= UnitName.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UnitName);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitName);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchAdditionalUnitInventory other) {
      if (other == null) {
        return;
      }
      if (other.UnitName.Length != 0) {
        UnitName = other.UnitName;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UnitName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMatchPlayerPermanentBuff : pb::IMessage<CMatchPlayerPermanentBuff> {
    private static readonly pb::MessageParser<CMatchPlayerPermanentBuff> _parser = new pb::MessageParser<CMatchPlayerPermanentBuff>(() => new CMatchPlayerPermanentBuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchPlayerPermanentBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaGcmessagesCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerPermanentBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerPermanentBuff(CMatchPlayerPermanentBuff other) : this() {
      permanentBuff_ = other.permanentBuff_;
      stackCount_ = other.stackCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchPlayerPermanentBuff Clone() {
      return new CMatchPlayerPermanentBuff(this);
    }

    /// <summary>Field number for the "permanent_buff" field.</summary>
    public const int PermanentBuffFieldNumber = 1;
    private uint permanentBuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PermanentBuff {
      get { return permanentBuff_; }
      set {
        permanentBuff_ = value;
      }
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 2;
    private uint stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackCount {
      get { return stackCount_; }
      set {
        stackCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchPlayerPermanentBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchPlayerPermanentBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PermanentBuff != other.PermanentBuff) return false;
      if (StackCount != other.StackCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PermanentBuff != 0) hash ^= PermanentBuff.GetHashCode();
      if (StackCount != 0) hash ^= StackCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PermanentBuff != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PermanentBuff);
      }
      if (StackCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StackCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PermanentBuff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PermanentBuff);
      }
      if (StackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StackCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchPlayerPermanentBuff other) {
      if (other == null) {
        return;
      }
      if (other.PermanentBuff != 0) {
        PermanentBuff = other.PermanentBuff;
      }
      if (other.StackCount != 0) {
        StackCount = other.StackCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PermanentBuff = input.ReadUInt32();
            break;
          }
          case 16: {
            StackCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMatchHeroSelectEvent : pb::IMessage<CMatchHeroSelectEvent> {
    private static readonly pb::MessageParser<CMatchHeroSelectEvent> _parser = new pb::MessageParser<CMatchHeroSelectEvent>(() => new CMatchHeroSelectEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMatchHeroSelectEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaGcmessagesCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchHeroSelectEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchHeroSelectEvent(CMatchHeroSelectEvent other) : this() {
      isPick_ = other.isPick_;
      team_ = other.team_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMatchHeroSelectEvent Clone() {
      return new CMatchHeroSelectEvent(this);
    }

    /// <summary>Field number for the "is_pick" field.</summary>
    public const int IsPickFieldNumber = 1;
    private bool isPick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPick {
      get { return isPick_; }
      set {
        isPick_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMatchHeroSelectEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMatchHeroSelectEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPick != other.IsPick) return false;
      if (Team != other.Team) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsPick != false) hash ^= IsPick.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPick != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPick);
      }
      if (Team != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Team);
      }
      if (HeroId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsPick != false) {
        size += 1 + 1;
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMatchHeroSelectEvent other) {
      if (other == null) {
        return;
      }
      if (other.IsPick != false) {
        IsPick = other.IsPick;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsPick = input.ReadBool();
            break;
          }
          case 16: {
            Team = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgDOTAMatch : pb::IMessage<CMsgDOTAMatch> {
    private static readonly pb::MessageParser<CMsgDOTAMatch> _parser = new pb::MessageParser<CMsgDOTAMatch>(() => new CMsgDOTAMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgDOTAMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaGcmessagesCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatch(CMsgDOTAMatch other) : this() {
      goodGuysWin_ = other.goodGuysWin_;
      duration_ = other.duration_;
      startTime_ = other.startTime_;
      players_ = other.players_.Clone();
      matchId_ = other.matchId_;
      towerStatus_ = other.towerStatus_.Clone();
      barracksStatus_ = other.barracksStatus_.Clone();
      cluster_ = other.cluster_;
      firstBloodTime_ = other.firstBloodTime_;
      replaySalt_ = other.replaySalt_;
      serverIp_ = other.serverIp_;
      serverPort_ = other.serverPort_;
      lobbyType_ = other.lobbyType_;
      humanPlayers_ = other.humanPlayers_;
      averageSkill_ = other.averageSkill_;
      gameBalance_ = other.gameBalance_;
      radiantTeamId_ = other.radiantTeamId_;
      direTeamId_ = other.direTeamId_;
      leagueid_ = other.leagueid_;
      radiantTeamName_ = other.radiantTeamName_;
      direTeamName_ = other.direTeamName_;
      radiantTeamLogo_ = other.radiantTeamLogo_;
      direTeamLogo_ = other.direTeamLogo_;
      radiantTeamComplete_ = other.radiantTeamComplete_;
      direTeamComplete_ = other.direTeamComplete_;
      positiveVotes_ = other.positiveVotes_;
      negativeVotes_ = other.negativeVotes_;
      gameMode_ = other.gameMode_;
      picksBans_ = other.picksBans_.Clone();
      matchSeqNum_ = other.matchSeqNum_;
      replayState_ = other.replayState_;
      radiantGuildId_ = other.radiantGuildId_;
      direGuildId_ = other.direGuildId_;
      radiantTeamTag_ = other.radiantTeamTag_;
      direTeamTag_ = other.direTeamTag_;
      seriesId_ = other.seriesId_;
      seriesType_ = other.seriesType_;
      broadcasterChannels_ = other.broadcasterChannels_.Clone();
      engine_ = other.engine_;
      customGameData_ = other.customGameData_ != null ? other.customGameData_.Clone() : null;
      matchFlags_ = other.matchFlags_;
      privateMetadataKey_ = other.privateMetadataKey_;
      radiantTeamScore_ = other.radiantTeamScore_;
      direTeamScore_ = other.direTeamScore_;
      matchOutcome_ = other.matchOutcome_;
      tournamentId_ = other.tournamentId_;
      tournamentRound_ = other.tournamentRound_;
      preGameDuration_ = other.preGameDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgDOTAMatch Clone() {
      return new CMsgDOTAMatch(this);
    }

    /// <summary>Field number for the "good_guys_win" field.</summary>
    public const int GoodGuysWinFieldNumber = 2;
    private bool goodGuysWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GoodGuysWin {
      get { return goodGuysWin_; }
      set {
        goodGuysWin_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgDOTAMatch.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.Dota.CMsgDOTAMatch.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.Player> players_ = new pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 6;
    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "tower_status" field.</summary>
    public const int TowerStatusFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_towerStatus_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> towerStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TowerStatus {
      get { return towerStatus_; }
    }

    /// <summary>Field number for the "barracks_status" field.</summary>
    public const int BarracksStatusFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_barracksStatus_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> barracksStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BarracksStatus {
      get { return barracksStatus_; }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 10;
    private uint cluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cluster {
      get { return cluster_; }
      set {
        cluster_ = value;
      }
    }

    /// <summary>Field number for the "first_blood_time" field.</summary>
    public const int FirstBloodTimeFieldNumber = 12;
    private uint firstBloodTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstBloodTime {
      get { return firstBloodTime_; }
      set {
        firstBloodTime_ = value;
      }
    }

    /// <summary>Field number for the "replay_salt" field.</summary>
    public const int ReplaySaltFieldNumber = 13;
    private uint replaySalt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReplaySalt {
      get { return replaySalt_; }
      set {
        replaySalt_ = value;
      }
    }

    /// <summary>Field number for the "server_ip" field.</summary>
    public const int ServerIpFieldNumber = 14;
    private uint serverIp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerIp {
      get { return serverIp_; }
      set {
        serverIp_ = value;
      }
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 15;
    private uint serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "lobby_type" field.</summary>
    public const int LobbyTypeFieldNumber = 16;
    private uint lobbyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyType {
      get { return lobbyType_; }
      set {
        lobbyType_ = value;
      }
    }

    /// <summary>Field number for the "human_players" field.</summary>
    public const int HumanPlayersFieldNumber = 17;
    private uint humanPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HumanPlayers {
      get { return humanPlayers_; }
      set {
        humanPlayers_ = value;
      }
    }

    /// <summary>Field number for the "average_skill" field.</summary>
    public const int AverageSkillFieldNumber = 18;
    private uint averageSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AverageSkill {
      get { return averageSkill_; }
      set {
        averageSkill_ = value;
      }
    }

    /// <summary>Field number for the "game_balance" field.</summary>
    public const int GameBalanceFieldNumber = 19;
    private float gameBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameBalance {
      get { return gameBalance_; }
      set {
        gameBalance_ = value;
      }
    }

    /// <summary>Field number for the "radiant_team_id" field.</summary>
    public const int RadiantTeamIdFieldNumber = 20;
    private uint radiantTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantTeamId {
      get { return radiantTeamId_; }
      set {
        radiantTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dire_team_id" field.</summary>
    public const int DireTeamIdFieldNumber = 21;
    private uint direTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireTeamId {
      get { return direTeamId_; }
      set {
        direTeamId_ = value;
      }
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 22;
    private uint leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leagueid {
      get { return leagueid_; }
      set {
        leagueid_ = value;
      }
    }

    /// <summary>Field number for the "radiant_team_name" field.</summary>
    public const int RadiantTeamNameFieldNumber = 23;
    private string radiantTeamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadiantTeamName {
      get { return radiantTeamName_; }
      set {
        radiantTeamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dire_team_name" field.</summary>
    public const int DireTeamNameFieldNumber = 24;
    private string direTeamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DireTeamName {
      get { return direTeamName_; }
      set {
        direTeamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "radiant_team_logo" field.</summary>
    public const int RadiantTeamLogoFieldNumber = 25;
    private ulong radiantTeamLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RadiantTeamLogo {
      get { return radiantTeamLogo_; }
      set {
        radiantTeamLogo_ = value;
      }
    }

    /// <summary>Field number for the "dire_team_logo" field.</summary>
    public const int DireTeamLogoFieldNumber = 26;
    private ulong direTeamLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DireTeamLogo {
      get { return direTeamLogo_; }
      set {
        direTeamLogo_ = value;
      }
    }

    /// <summary>Field number for the "radiant_team_complete" field.</summary>
    public const int RadiantTeamCompleteFieldNumber = 27;
    private uint radiantTeamComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantTeamComplete {
      get { return radiantTeamComplete_; }
      set {
        radiantTeamComplete_ = value;
      }
    }

    /// <summary>Field number for the "dire_team_complete" field.</summary>
    public const int DireTeamCompleteFieldNumber = 28;
    private uint direTeamComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireTeamComplete {
      get { return direTeamComplete_; }
      set {
        direTeamComplete_ = value;
      }
    }

    /// <summary>Field number for the "positive_votes" field.</summary>
    public const int PositiveVotesFieldNumber = 29;
    private uint positiveVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PositiveVotes {
      get { return positiveVotes_; }
      set {
        positiveVotes_ = value;
      }
    }

    /// <summary>Field number for the "negative_votes" field.</summary>
    public const int NegativeVotesFieldNumber = 30;
    private uint negativeVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NegativeVotes {
      get { return negativeVotes_; }
      set {
        negativeVotes_ = value;
      }
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 31;
    private global::Proto.Dota.DOTA_GameMode gameMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.DOTA_GameMode GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    /// <summary>Field number for the "picks_bans" field.</summary>
    public const int PicksBansFieldNumber = 32;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMatchHeroSelectEvent> _repeated_picksBans_codec
        = pb::FieldCodec.ForMessage(258, global::Proto.Dota.CMatchHeroSelectEvent.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMatchHeroSelectEvent> picksBans_ = new pbc::RepeatedField<global::Proto.Dota.CMatchHeroSelectEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMatchHeroSelectEvent> PicksBans {
      get { return picksBans_; }
    }

    /// <summary>Field number for the "match_seq_num" field.</summary>
    public const int MatchSeqNumFieldNumber = 33;
    private ulong matchSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchSeqNum {
      get { return matchSeqNum_; }
      set {
        matchSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "replay_state" field.</summary>
    public const int ReplayStateFieldNumber = 34;
    private global::Proto.Dota.CMsgDOTAMatch.Types.ReplayState replayState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgDOTAMatch.Types.ReplayState ReplayState {
      get { return replayState_; }
      set {
        replayState_ = value;
      }
    }

    /// <summary>Field number for the "radiant_guild_id" field.</summary>
    public const int RadiantGuildIdFieldNumber = 35;
    private uint radiantGuildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantGuildId {
      get { return radiantGuildId_; }
      set {
        radiantGuildId_ = value;
      }
    }

    /// <summary>Field number for the "dire_guild_id" field.</summary>
    public const int DireGuildIdFieldNumber = 36;
    private uint direGuildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireGuildId {
      get { return direGuildId_; }
      set {
        direGuildId_ = value;
      }
    }

    /// <summary>Field number for the "radiant_team_tag" field.</summary>
    public const int RadiantTeamTagFieldNumber = 37;
    private string radiantTeamTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadiantTeamTag {
      get { return radiantTeamTag_; }
      set {
        radiantTeamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dire_team_tag" field.</summary>
    public const int DireTeamTagFieldNumber = 38;
    private string direTeamTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DireTeamTag {
      get { return direTeamTag_; }
      set {
        direTeamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "series_id" field.</summary>
    public const int SeriesIdFieldNumber = 39;
    private uint seriesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesId {
      get { return seriesId_; }
      set {
        seriesId_ = value;
      }
    }

    /// <summary>Field number for the "series_type" field.</summary>
    public const int SeriesTypeFieldNumber = 40;
    private uint seriesType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeriesType {
      get { return seriesType_; }
      set {
        seriesType_ = value;
      }
    }

    /// <summary>Field number for the "broadcaster_channels" field.</summary>
    public const int BroadcasterChannelsFieldNumber = 43;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterChannel> _repeated_broadcasterChannels_codec
        = pb::FieldCodec.ForMessage(346, global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterChannel.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterChannel> broadcasterChannels_ = new pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterChannel> BroadcasterChannels {
      get { return broadcasterChannels_; }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 44;
    private uint engine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    /// <summary>Field number for the "custom_game_data" field.</summary>
    public const int CustomGameDataFieldNumber = 45;
    private global::Proto.Dota.CMsgDOTAMatch.Types.CustomGameData customGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgDOTAMatch.Types.CustomGameData CustomGameData {
      get { return customGameData_; }
      set {
        customGameData_ = value;
      }
    }

    /// <summary>Field number for the "match_flags" field.</summary>
    public const int MatchFlagsFieldNumber = 46;
    private uint matchFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchFlags {
      get { return matchFlags_; }
      set {
        matchFlags_ = value;
      }
    }

    /// <summary>Field number for the "private_metadata_key" field.</summary>
    public const int PrivateMetadataKeyFieldNumber = 47;
    private uint privateMetadataKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrivateMetadataKey {
      get { return privateMetadataKey_; }
      set {
        privateMetadataKey_ = value;
      }
    }

    /// <summary>Field number for the "radiant_team_score" field.</summary>
    public const int RadiantTeamScoreFieldNumber = 48;
    private uint radiantTeamScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiantTeamScore {
      get { return radiantTeamScore_; }
      set {
        radiantTeamScore_ = value;
      }
    }

    /// <summary>Field number for the "dire_team_score" field.</summary>
    public const int DireTeamScoreFieldNumber = 49;
    private uint direTeamScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DireTeamScore {
      get { return direTeamScore_; }
      set {
        direTeamScore_ = value;
      }
    }

    /// <summary>Field number for the "match_outcome" field.</summary>
    public const int MatchOutcomeFieldNumber = 50;
    private global::Proto.Dota.EMatchOutcome matchOutcome_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.EMatchOutcome MatchOutcome {
      get { return matchOutcome_; }
      set {
        matchOutcome_ = value;
      }
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 51;
    private uint tournamentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentId {
      get { return tournamentId_; }
      set {
        tournamentId_ = value;
      }
    }

    /// <summary>Field number for the "tournament_round" field.</summary>
    public const int TournamentRoundFieldNumber = 52;
    private uint tournamentRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TournamentRound {
      get { return tournamentRound_; }
      set {
        tournamentRound_ = value;
      }
    }

    /// <summary>Field number for the "pre_game_duration" field.</summary>
    public const int PreGameDurationFieldNumber = 53;
    private uint preGameDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreGameDuration {
      get { return preGameDuration_; }
      set {
        preGameDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgDOTAMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgDOTAMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoodGuysWin != other.GoodGuysWin) return false;
      if (Duration != other.Duration) return false;
      if (StartTime != other.StartTime) return false;
      if(!players_.Equals(other.players_)) return false;
      if (MatchId != other.MatchId) return false;
      if(!towerStatus_.Equals(other.towerStatus_)) return false;
      if(!barracksStatus_.Equals(other.barracksStatus_)) return false;
      if (Cluster != other.Cluster) return false;
      if (FirstBloodTime != other.FirstBloodTime) return false;
      if (ReplaySalt != other.ReplaySalt) return false;
      if (ServerIp != other.ServerIp) return false;
      if (ServerPort != other.ServerPort) return false;
      if (LobbyType != other.LobbyType) return false;
      if (HumanPlayers != other.HumanPlayers) return false;
      if (AverageSkill != other.AverageSkill) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameBalance, other.GameBalance)) return false;
      if (RadiantTeamId != other.RadiantTeamId) return false;
      if (DireTeamId != other.DireTeamId) return false;
      if (Leagueid != other.Leagueid) return false;
      if (RadiantTeamName != other.RadiantTeamName) return false;
      if (DireTeamName != other.DireTeamName) return false;
      if (RadiantTeamLogo != other.RadiantTeamLogo) return false;
      if (DireTeamLogo != other.DireTeamLogo) return false;
      if (RadiantTeamComplete != other.RadiantTeamComplete) return false;
      if (DireTeamComplete != other.DireTeamComplete) return false;
      if (PositiveVotes != other.PositiveVotes) return false;
      if (NegativeVotes != other.NegativeVotes) return false;
      if (GameMode != other.GameMode) return false;
      if(!picksBans_.Equals(other.picksBans_)) return false;
      if (MatchSeqNum != other.MatchSeqNum) return false;
      if (ReplayState != other.ReplayState) return false;
      if (RadiantGuildId != other.RadiantGuildId) return false;
      if (DireGuildId != other.DireGuildId) return false;
      if (RadiantTeamTag != other.RadiantTeamTag) return false;
      if (DireTeamTag != other.DireTeamTag) return false;
      if (SeriesId != other.SeriesId) return false;
      if (SeriesType != other.SeriesType) return false;
      if(!broadcasterChannels_.Equals(other.broadcasterChannels_)) return false;
      if (Engine != other.Engine) return false;
      if (!object.Equals(CustomGameData, other.CustomGameData)) return false;
      if (MatchFlags != other.MatchFlags) return false;
      if (PrivateMetadataKey != other.PrivateMetadataKey) return false;
      if (RadiantTeamScore != other.RadiantTeamScore) return false;
      if (DireTeamScore != other.DireTeamScore) return false;
      if (MatchOutcome != other.MatchOutcome) return false;
      if (TournamentId != other.TournamentId) return false;
      if (TournamentRound != other.TournamentRound) return false;
      if (PreGameDuration != other.PreGameDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoodGuysWin != false) hash ^= GoodGuysWin.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (StartTime != 0) hash ^= StartTime.GetHashCode();
      hash ^= players_.GetHashCode();
      if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
      hash ^= towerStatus_.GetHashCode();
      hash ^= barracksStatus_.GetHashCode();
      if (Cluster != 0) hash ^= Cluster.GetHashCode();
      if (FirstBloodTime != 0) hash ^= FirstBloodTime.GetHashCode();
      if (ReplaySalt != 0) hash ^= ReplaySalt.GetHashCode();
      if (ServerIp != 0) hash ^= ServerIp.GetHashCode();
      if (ServerPort != 0) hash ^= ServerPort.GetHashCode();
      if (LobbyType != 0) hash ^= LobbyType.GetHashCode();
      if (HumanPlayers != 0) hash ^= HumanPlayers.GetHashCode();
      if (AverageSkill != 0) hash ^= AverageSkill.GetHashCode();
      if (GameBalance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameBalance);
      if (RadiantTeamId != 0) hash ^= RadiantTeamId.GetHashCode();
      if (DireTeamId != 0) hash ^= DireTeamId.GetHashCode();
      if (Leagueid != 0) hash ^= Leagueid.GetHashCode();
      if (RadiantTeamName.Length != 0) hash ^= RadiantTeamName.GetHashCode();
      if (DireTeamName.Length != 0) hash ^= DireTeamName.GetHashCode();
      if (RadiantTeamLogo != 0UL) hash ^= RadiantTeamLogo.GetHashCode();
      if (DireTeamLogo != 0UL) hash ^= DireTeamLogo.GetHashCode();
      if (RadiantTeamComplete != 0) hash ^= RadiantTeamComplete.GetHashCode();
      if (DireTeamComplete != 0) hash ^= DireTeamComplete.GetHashCode();
      if (PositiveVotes != 0) hash ^= PositiveVotes.GetHashCode();
      if (NegativeVotes != 0) hash ^= NegativeVotes.GetHashCode();
      if (GameMode != 0) hash ^= GameMode.GetHashCode();
      hash ^= picksBans_.GetHashCode();
      if (MatchSeqNum != 0UL) hash ^= MatchSeqNum.GetHashCode();
      if (ReplayState != 0) hash ^= ReplayState.GetHashCode();
      if (RadiantGuildId != 0) hash ^= RadiantGuildId.GetHashCode();
      if (DireGuildId != 0) hash ^= DireGuildId.GetHashCode();
      if (RadiantTeamTag.Length != 0) hash ^= RadiantTeamTag.GetHashCode();
      if (DireTeamTag.Length != 0) hash ^= DireTeamTag.GetHashCode();
      if (SeriesId != 0) hash ^= SeriesId.GetHashCode();
      if (SeriesType != 0) hash ^= SeriesType.GetHashCode();
      hash ^= broadcasterChannels_.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (customGameData_ != null) hash ^= CustomGameData.GetHashCode();
      if (MatchFlags != 0) hash ^= MatchFlags.GetHashCode();
      if (PrivateMetadataKey != 0) hash ^= PrivateMetadataKey.GetHashCode();
      if (RadiantTeamScore != 0) hash ^= RadiantTeamScore.GetHashCode();
      if (DireTeamScore != 0) hash ^= DireTeamScore.GetHashCode();
      if (MatchOutcome != 0) hash ^= MatchOutcome.GetHashCode();
      if (TournamentId != 0) hash ^= TournamentId.GetHashCode();
      if (TournamentRound != 0) hash ^= TournamentRound.GetHashCode();
      if (PreGameDuration != 0) hash ^= PreGameDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodGuysWin != false) {
        output.WriteRawTag(16);
        output.WriteBool(GoodGuysWin);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Duration);
      }
      if (StartTime != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(StartTime);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (MatchId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MatchId);
      }
      towerStatus_.WriteTo(output, _repeated_towerStatus_codec);
      barracksStatus_.WriteTo(output, _repeated_barracksStatus_codec);
      if (Cluster != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Cluster);
      }
      if (FirstBloodTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FirstBloodTime);
      }
      if (ReplaySalt != 0) {
        output.WriteRawTag(109);
        output.WriteFixed32(ReplaySalt);
      }
      if (ServerIp != 0) {
        output.WriteRawTag(117);
        output.WriteFixed32(ServerIp);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ServerPort);
      }
      if (LobbyType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(LobbyType);
      }
      if (HumanPlayers != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(HumanPlayers);
      }
      if (AverageSkill != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(AverageSkill);
      }
      if (GameBalance != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(GameBalance);
      }
      if (RadiantTeamId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(RadiantTeamId);
      }
      if (DireTeamId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(DireTeamId);
      }
      if (Leagueid != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Leagueid);
      }
      if (RadiantTeamName.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(RadiantTeamName);
      }
      if (DireTeamName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(DireTeamName);
      }
      if (RadiantTeamLogo != 0UL) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(RadiantTeamLogo);
      }
      if (DireTeamLogo != 0UL) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(DireTeamLogo);
      }
      if (RadiantTeamComplete != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RadiantTeamComplete);
      }
      if (DireTeamComplete != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(DireTeamComplete);
      }
      if (PositiveVotes != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(PositiveVotes);
      }
      if (NegativeVotes != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(NegativeVotes);
      }
      if (GameMode != 0) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) GameMode);
      }
      picksBans_.WriteTo(output, _repeated_picksBans_codec);
      if (MatchSeqNum != 0UL) {
        output.WriteRawTag(136, 2);
        output.WriteUInt64(MatchSeqNum);
      }
      if (ReplayState != 0) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) ReplayState);
      }
      if (RadiantGuildId != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(RadiantGuildId);
      }
      if (DireGuildId != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(DireGuildId);
      }
      if (RadiantTeamTag.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(RadiantTeamTag);
      }
      if (DireTeamTag.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(DireTeamTag);
      }
      if (SeriesId != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(SeriesId);
      }
      if (SeriesType != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(SeriesType);
      }
      broadcasterChannels_.WriteTo(output, _repeated_broadcasterChannels_codec);
      if (Engine != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(Engine);
      }
      if (customGameData_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(CustomGameData);
      }
      if (MatchFlags != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(MatchFlags);
      }
      if (PrivateMetadataKey != 0) {
        output.WriteRawTag(253, 2);
        output.WriteFixed32(PrivateMetadataKey);
      }
      if (RadiantTeamScore != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(RadiantTeamScore);
      }
      if (DireTeamScore != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(DireTeamScore);
      }
      if (MatchOutcome != 0) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) MatchOutcome);
      }
      if (TournamentId != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(TournamentId);
      }
      if (TournamentRound != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(TournamentRound);
      }
      if (PreGameDuration != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(PreGameDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodGuysWin != false) {
        size += 1 + 1;
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (StartTime != 0) {
        size += 1 + 4;
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (MatchId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      size += towerStatus_.CalculateSize(_repeated_towerStatus_codec);
      size += barracksStatus_.CalculateSize(_repeated_barracksStatus_codec);
      if (Cluster != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cluster);
      }
      if (FirstBloodTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstBloodTime);
      }
      if (ReplaySalt != 0) {
        size += 1 + 4;
      }
      if (ServerIp != 0) {
        size += 1 + 4;
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerPort);
      }
      if (LobbyType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LobbyType);
      }
      if (HumanPlayers != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HumanPlayers);
      }
      if (AverageSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AverageSkill);
      }
      if (GameBalance != 0F) {
        size += 2 + 4;
      }
      if (RadiantTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamId);
      }
      if (DireTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamId);
      }
      if (Leagueid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leagueid);
      }
      if (RadiantTeamName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamName);
      }
      if (DireTeamName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DireTeamName);
      }
      if (RadiantTeamLogo != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RadiantTeamLogo);
      }
      if (DireTeamLogo != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DireTeamLogo);
      }
      if (RadiantTeamComplete != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamComplete);
      }
      if (DireTeamComplete != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamComplete);
      }
      if (PositiveVotes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PositiveVotes);
      }
      if (NegativeVotes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NegativeVotes);
      }
      if (GameMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      size += picksBans_.CalculateSize(_repeated_picksBans_codec);
      if (MatchSeqNum != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MatchSeqNum);
      }
      if (ReplayState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ReplayState);
      }
      if (RadiantGuildId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantGuildId);
      }
      if (DireGuildId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireGuildId);
      }
      if (RadiantTeamTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamTag);
      }
      if (DireTeamTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DireTeamTag);
      }
      if (SeriesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesId);
      }
      if (SeriesType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeriesType);
      }
      size += broadcasterChannels_.CalculateSize(_repeated_broadcasterChannels_codec);
      if (Engine != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Engine);
      }
      if (customGameData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CustomGameData);
      }
      if (MatchFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchFlags);
      }
      if (PrivateMetadataKey != 0) {
        size += 2 + 4;
      }
      if (RadiantTeamScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamScore);
      }
      if (DireTeamScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamScore);
      }
      if (MatchOutcome != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MatchOutcome);
      }
      if (TournamentId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TournamentId);
      }
      if (TournamentRound != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TournamentRound);
      }
      if (PreGameDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreGameDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgDOTAMatch other) {
      if (other == null) {
        return;
      }
      if (other.GoodGuysWin != false) {
        GoodGuysWin = other.GoodGuysWin;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.StartTime != 0) {
        StartTime = other.StartTime;
      }
      players_.Add(other.players_);
      if (other.MatchId != 0UL) {
        MatchId = other.MatchId;
      }
      towerStatus_.Add(other.towerStatus_);
      barracksStatus_.Add(other.barracksStatus_);
      if (other.Cluster != 0) {
        Cluster = other.Cluster;
      }
      if (other.FirstBloodTime != 0) {
        FirstBloodTime = other.FirstBloodTime;
      }
      if (other.ReplaySalt != 0) {
        ReplaySalt = other.ReplaySalt;
      }
      if (other.ServerIp != 0) {
        ServerIp = other.ServerIp;
      }
      if (other.ServerPort != 0) {
        ServerPort = other.ServerPort;
      }
      if (other.LobbyType != 0) {
        LobbyType = other.LobbyType;
      }
      if (other.HumanPlayers != 0) {
        HumanPlayers = other.HumanPlayers;
      }
      if (other.AverageSkill != 0) {
        AverageSkill = other.AverageSkill;
      }
      if (other.GameBalance != 0F) {
        GameBalance = other.GameBalance;
      }
      if (other.RadiantTeamId != 0) {
        RadiantTeamId = other.RadiantTeamId;
      }
      if (other.DireTeamId != 0) {
        DireTeamId = other.DireTeamId;
      }
      if (other.Leagueid != 0) {
        Leagueid = other.Leagueid;
      }
      if (other.RadiantTeamName.Length != 0) {
        RadiantTeamName = other.RadiantTeamName;
      }
      if (other.DireTeamName.Length != 0) {
        DireTeamName = other.DireTeamName;
      }
      if (other.RadiantTeamLogo != 0UL) {
        RadiantTeamLogo = other.RadiantTeamLogo;
      }
      if (other.DireTeamLogo != 0UL) {
        DireTeamLogo = other.DireTeamLogo;
      }
      if (other.RadiantTeamComplete != 0) {
        RadiantTeamComplete = other.RadiantTeamComplete;
      }
      if (other.DireTeamComplete != 0) {
        DireTeamComplete = other.DireTeamComplete;
      }
      if (other.PositiveVotes != 0) {
        PositiveVotes = other.PositiveVotes;
      }
      if (other.NegativeVotes != 0) {
        NegativeVotes = other.NegativeVotes;
      }
      if (other.GameMode != 0) {
        GameMode = other.GameMode;
      }
      picksBans_.Add(other.picksBans_);
      if (other.MatchSeqNum != 0UL) {
        MatchSeqNum = other.MatchSeqNum;
      }
      if (other.ReplayState != 0) {
        ReplayState = other.ReplayState;
      }
      if (other.RadiantGuildId != 0) {
        RadiantGuildId = other.RadiantGuildId;
      }
      if (other.DireGuildId != 0) {
        DireGuildId = other.DireGuildId;
      }
      if (other.RadiantTeamTag.Length != 0) {
        RadiantTeamTag = other.RadiantTeamTag;
      }
      if (other.DireTeamTag.Length != 0) {
        DireTeamTag = other.DireTeamTag;
      }
      if (other.SeriesId != 0) {
        SeriesId = other.SeriesId;
      }
      if (other.SeriesType != 0) {
        SeriesType = other.SeriesType;
      }
      broadcasterChannels_.Add(other.broadcasterChannels_);
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      if (other.customGameData_ != null) {
        if (customGameData_ == null) {
          customGameData_ = new global::Proto.Dota.CMsgDOTAMatch.Types.CustomGameData();
        }
        CustomGameData.MergeFrom(other.CustomGameData);
      }
      if (other.MatchFlags != 0) {
        MatchFlags = other.MatchFlags;
      }
      if (other.PrivateMetadataKey != 0) {
        PrivateMetadataKey = other.PrivateMetadataKey;
      }
      if (other.RadiantTeamScore != 0) {
        RadiantTeamScore = other.RadiantTeamScore;
      }
      if (other.DireTeamScore != 0) {
        DireTeamScore = other.DireTeamScore;
      }
      if (other.MatchOutcome != 0) {
        MatchOutcome = other.MatchOutcome;
      }
      if (other.TournamentId != 0) {
        TournamentId = other.TournamentId;
      }
      if (other.TournamentRound != 0) {
        TournamentRound = other.TournamentRound;
      }
      if (other.PreGameDuration != 0) {
        PreGameDuration = other.PreGameDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            GoodGuysWin = input.ReadBool();
            break;
          }
          case 24: {
            Duration = input.ReadUInt32();
            break;
          }
          case 37: {
            StartTime = input.ReadFixed32();
            break;
          }
          case 42: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 48: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 66:
          case 64: {
            towerStatus_.AddEntriesFrom(input, _repeated_towerStatus_codec);
            break;
          }
          case 74:
          case 72: {
            barracksStatus_.AddEntriesFrom(input, _repeated_barracksStatus_codec);
            break;
          }
          case 80: {
            Cluster = input.ReadUInt32();
            break;
          }
          case 96: {
            FirstBloodTime = input.ReadUInt32();
            break;
          }
          case 109: {
            ReplaySalt = input.ReadFixed32();
            break;
          }
          case 117: {
            ServerIp = input.ReadFixed32();
            break;
          }
          case 120: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 128: {
            LobbyType = input.ReadUInt32();
            break;
          }
          case 136: {
            HumanPlayers = input.ReadUInt32();
            break;
          }
          case 144: {
            AverageSkill = input.ReadUInt32();
            break;
          }
          case 157: {
            GameBalance = input.ReadFloat();
            break;
          }
          case 160: {
            RadiantTeamId = input.ReadUInt32();
            break;
          }
          case 168: {
            DireTeamId = input.ReadUInt32();
            break;
          }
          case 176: {
            Leagueid = input.ReadUInt32();
            break;
          }
          case 186: {
            RadiantTeamName = input.ReadString();
            break;
          }
          case 194: {
            DireTeamName = input.ReadString();
            break;
          }
          case 200: {
            RadiantTeamLogo = input.ReadUInt64();
            break;
          }
          case 208: {
            DireTeamLogo = input.ReadUInt64();
            break;
          }
          case 216: {
            RadiantTeamComplete = input.ReadUInt32();
            break;
          }
          case 224: {
            DireTeamComplete = input.ReadUInt32();
            break;
          }
          case 232: {
            PositiveVotes = input.ReadUInt32();
            break;
          }
          case 240: {
            NegativeVotes = input.ReadUInt32();
            break;
          }
          case 248: {
            gameMode_ = (global::Proto.Dota.DOTA_GameMode) input.ReadEnum();
            break;
          }
          case 258: {
            picksBans_.AddEntriesFrom(input, _repeated_picksBans_codec);
            break;
          }
          case 264: {
            MatchSeqNum = input.ReadUInt64();
            break;
          }
          case 272: {
            replayState_ = (global::Proto.Dota.CMsgDOTAMatch.Types.ReplayState) input.ReadEnum();
            break;
          }
          case 280: {
            RadiantGuildId = input.ReadUInt32();
            break;
          }
          case 288: {
            DireGuildId = input.ReadUInt32();
            break;
          }
          case 298: {
            RadiantTeamTag = input.ReadString();
            break;
          }
          case 306: {
            DireTeamTag = input.ReadString();
            break;
          }
          case 312: {
            SeriesId = input.ReadUInt32();
            break;
          }
          case 320: {
            SeriesType = input.ReadUInt32();
            break;
          }
          case 346: {
            broadcasterChannels_.AddEntriesFrom(input, _repeated_broadcasterChannels_codec);
            break;
          }
          case 352: {
            Engine = input.ReadUInt32();
            break;
          }
          case 362: {
            if (customGameData_ == null) {
              customGameData_ = new global::Proto.Dota.CMsgDOTAMatch.Types.CustomGameData();
            }
            input.ReadMessage(customGameData_);
            break;
          }
          case 368: {
            MatchFlags = input.ReadUInt32();
            break;
          }
          case 381: {
            PrivateMetadataKey = input.ReadFixed32();
            break;
          }
          case 384: {
            RadiantTeamScore = input.ReadUInt32();
            break;
          }
          case 392: {
            DireTeamScore = input.ReadUInt32();
            break;
          }
          case 400: {
            matchOutcome_ = (global::Proto.Dota.EMatchOutcome) input.ReadEnum();
            break;
          }
          case 408: {
            TournamentId = input.ReadUInt32();
            break;
          }
          case 416: {
            TournamentRound = input.ReadUInt32();
            break;
          }
          case 424: {
            PreGameDuration = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgDOTAMatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReplayState {
        [pbr::OriginalName("REPLAY_AVAILABLE")] ReplayAvailable = 0,
        [pbr::OriginalName("REPLAY_NOT_RECORDED")] ReplayNotRecorded = 1,
        [pbr::OriginalName("REPLAY_EXPIRED")] ReplayExpired = 2,
      }

      public sealed partial class Player : pb::IMessage<Player> {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CMsgDOTAMatch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          accountId_ = other.accountId_;
          playerSlot_ = other.playerSlot_;
          heroId_ = other.heroId_;
          item0_ = other.item0_;
          item1_ = other.item1_;
          item2_ = other.item2_;
          item3_ = other.item3_;
          item4_ = other.item4_;
          item5_ = other.item5_;
          item6_ = other.item6_;
          item7_ = other.item7_;
          item8_ = other.item8_;
          expectedTeamContribution_ = other.expectedTeamContribution_;
          scaledMetric_ = other.scaledMetric_;
          previousRank_ = other.previousRank_;
          rankChange_ = other.rankChange_;
          soloRank_ = other.soloRank_;
          seasonalRank_ = other.seasonalRank_;
          rankTierUpdated_ = other.rankTierUpdated_;
          kills_ = other.kills_;
          deaths_ = other.deaths_;
          assists_ = other.assists_;
          leaverStatus_ = other.leaverStatus_;
          gold_ = other.gold_;
          lastHits_ = other.lastHits_;
          denies_ = other.denies_;
          goldPerMin_ = other.goldPerMin_;
          xPPerMin_ = other.xPPerMin_;
          goldSpent_ = other.goldSpent_;
          heroDamage_ = other.heroDamage_;
          towerDamage_ = other.towerDamage_;
          heroHealing_ = other.heroHealing_;
          level_ = other.level_;
          timeLastSeen_ = other.timeLastSeen_;
          playerName_ = other.playerName_;
          supportAbilityValue_ = other.supportAbilityValue_;
          feedingDetected_ = other.feedingDetected_;
          searchRank_ = other.searchRank_;
          searchRankUncertainty_ = other.searchRankUncertainty_;
          rankUncertaintyChange_ = other.rankUncertaintyChange_;
          heroPlayCount_ = other.heroPlayCount_;
          partyId_ = other.partyId_;
          scaledHeroDamage_ = other.scaledHeroDamage_;
          scaledTowerDamage_ = other.scaledTowerDamage_;
          scaledHeroHealing_ = other.scaledHeroHealing_;
          scaledKills_ = other.scaledKills_;
          scaledDeaths_ = other.scaledDeaths_;
          scaledAssists_ = other.scaledAssists_;
          claimedFarmGold_ = other.claimedFarmGold_;
          supportGold_ = other.supportGold_;
          claimedDenies_ = other.claimedDenies_;
          claimedMisses_ = other.claimedMisses_;
          misses_ = other.misses_;
          abilityUpgrades_ = other.abilityUpgrades_.Clone();
          additionalUnitsInventory_ = other.additionalUnitsInventory_.Clone();
          permanentBuffs_ = other.permanentBuffs_.Clone();
          customGameData_ = other.customGameData_ != null ? other.customGameData_.Clone() : null;
          activePrimeSubscription_ = other.activePrimeSubscription_;
          netWorth_ = other.netWorth_;
          botDifficulty_ = other.botDifficulty_;
          heroPickOrder_ = other.heroPickOrder_;
          heroWasRandomed_ = other.heroWasRandomed_;
          heroWasBonus_ = other.heroWasBonus_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { return accountId_; }
          set {
            accountId_ = value;
          }
        }

        /// <summary>Field number for the "player_slot" field.</summary>
        public const int PlayerSlotFieldNumber = 2;
        private uint playerSlot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerSlot {
          get { return playerSlot_; }
          set {
            playerSlot_ = value;
          }
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 3;
        private uint heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroId {
          get { return heroId_; }
          set {
            heroId_ = value;
          }
        }

        /// <summary>Field number for the "item_0" field.</summary>
        public const int Item0FieldNumber = 4;
        private uint item0_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item0 {
          get { return item0_; }
          set {
            item0_ = value;
          }
        }

        /// <summary>Field number for the "item_1" field.</summary>
        public const int Item1FieldNumber = 5;
        private uint item1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item1 {
          get { return item1_; }
          set {
            item1_ = value;
          }
        }

        /// <summary>Field number for the "item_2" field.</summary>
        public const int Item2FieldNumber = 6;
        private uint item2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item2 {
          get { return item2_; }
          set {
            item2_ = value;
          }
        }

        /// <summary>Field number for the "item_3" field.</summary>
        public const int Item3FieldNumber = 7;
        private uint item3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item3 {
          get { return item3_; }
          set {
            item3_ = value;
          }
        }

        /// <summary>Field number for the "item_4" field.</summary>
        public const int Item4FieldNumber = 8;
        private uint item4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item4 {
          get { return item4_; }
          set {
            item4_ = value;
          }
        }

        /// <summary>Field number for the "item_5" field.</summary>
        public const int Item5FieldNumber = 9;
        private uint item5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item5 {
          get { return item5_; }
          set {
            item5_ = value;
          }
        }

        /// <summary>Field number for the "item_6" field.</summary>
        public const int Item6FieldNumber = 59;
        private uint item6_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item6 {
          get { return item6_; }
          set {
            item6_ = value;
          }
        }

        /// <summary>Field number for the "item_7" field.</summary>
        public const int Item7FieldNumber = 60;
        private uint item7_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item7 {
          get { return item7_; }
          set {
            item7_ = value;
          }
        }

        /// <summary>Field number for the "item_8" field.</summary>
        public const int Item8FieldNumber = 61;
        private uint item8_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Item8 {
          get { return item8_; }
          set {
            item8_ = value;
          }
        }

        /// <summary>Field number for the "expected_team_contribution" field.</summary>
        public const int ExpectedTeamContributionFieldNumber = 10;
        private float expectedTeamContribution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ExpectedTeamContribution {
          get { return expectedTeamContribution_; }
          set {
            expectedTeamContribution_ = value;
          }
        }

        /// <summary>Field number for the "scaled_metric" field.</summary>
        public const int ScaledMetricFieldNumber = 11;
        private float scaledMetric_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledMetric {
          get { return scaledMetric_; }
          set {
            scaledMetric_ = value;
          }
        }

        /// <summary>Field number for the "previous_rank" field.</summary>
        public const int PreviousRankFieldNumber = 12;
        private uint previousRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PreviousRank {
          get { return previousRank_; }
          set {
            previousRank_ = value;
          }
        }

        /// <summary>Field number for the "rank_change" field.</summary>
        public const int RankChangeFieldNumber = 13;
        private int rankChange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RankChange {
          get { return rankChange_; }
          set {
            rankChange_ = value;
          }
        }

        /// <summary>Field number for the "solo_rank" field.</summary>
        public const int SoloRankFieldNumber = 49;
        private bool soloRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SoloRank {
          get { return soloRank_; }
          set {
            soloRank_ = value;
          }
        }

        /// <summary>Field number for the "seasonal_rank" field.</summary>
        public const int SeasonalRankFieldNumber = 53;
        private bool seasonalRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SeasonalRank {
          get { return seasonalRank_; }
          set {
            seasonalRank_ = value;
          }
        }

        /// <summary>Field number for the "rank_tier_updated" field.</summary>
        public const int RankTierUpdatedFieldNumber = 66;
        private bool rankTierUpdated_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RankTierUpdated {
          get { return rankTierUpdated_; }
          set {
            rankTierUpdated_ = value;
          }
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 14;
        private uint kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Kills {
          get { return kills_; }
          set {
            kills_ = value;
          }
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 15;
        private uint deaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Deaths {
          get { return deaths_; }
          set {
            deaths_ = value;
          }
        }

        /// <summary>Field number for the "assists" field.</summary>
        public const int AssistsFieldNumber = 16;
        private uint assists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Assists {
          get { return assists_; }
          set {
            assists_ = value;
          }
        }

        /// <summary>Field number for the "leaver_status" field.</summary>
        public const int LeaverStatusFieldNumber = 17;
        private uint leaverStatus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeaverStatus {
          get { return leaverStatus_; }
          set {
            leaverStatus_ = value;
          }
        }

        /// <summary>Field number for the "gold" field.</summary>
        public const int GoldFieldNumber = 18;
        private uint gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Gold {
          get { return gold_; }
          set {
            gold_ = value;
          }
        }

        /// <summary>Field number for the "last_hits" field.</summary>
        public const int LastHitsFieldNumber = 19;
        private uint lastHits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LastHits {
          get { return lastHits_; }
          set {
            lastHits_ = value;
          }
        }

        /// <summary>Field number for the "denies" field.</summary>
        public const int DeniesFieldNumber = 20;
        private uint denies_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Denies {
          get { return denies_; }
          set {
            denies_ = value;
          }
        }

        /// <summary>Field number for the "gold_per_min" field.</summary>
        public const int GoldPerMinFieldNumber = 21;
        private uint goldPerMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldPerMin {
          get { return goldPerMin_; }
          set {
            goldPerMin_ = value;
          }
        }

        /// <summary>Field number for the "XP_per_min" field.</summary>
        public const int XPPerMinFieldNumber = 22;
        private uint xPPerMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint XPPerMin {
          get { return xPPerMin_; }
          set {
            xPPerMin_ = value;
          }
        }

        /// <summary>Field number for the "gold_spent" field.</summary>
        public const int GoldSpentFieldNumber = 23;
        private uint goldSpent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldSpent {
          get { return goldSpent_; }
          set {
            goldSpent_ = value;
          }
        }

        /// <summary>Field number for the "hero_damage" field.</summary>
        public const int HeroDamageFieldNumber = 24;
        private uint heroDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroDamage {
          get { return heroDamage_; }
          set {
            heroDamage_ = value;
          }
        }

        /// <summary>Field number for the "tower_damage" field.</summary>
        public const int TowerDamageFieldNumber = 25;
        private uint towerDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TowerDamage {
          get { return towerDamage_; }
          set {
            towerDamage_ = value;
          }
        }

        /// <summary>Field number for the "hero_healing" field.</summary>
        public const int HeroHealingFieldNumber = 26;
        private uint heroHealing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroHealing {
          get { return heroHealing_; }
          set {
            heroHealing_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 27;
        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "time_last_seen" field.</summary>
        public const int TimeLastSeenFieldNumber = 28;
        private uint timeLastSeen_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeLastSeen {
          get { return timeLastSeen_; }
          set {
            timeLastSeen_ = value;
          }
        }

        /// <summary>Field number for the "player_name" field.</summary>
        public const int PlayerNameFieldNumber = 29;
        private string playerName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName {
          get { return playerName_; }
          set {
            playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "support_ability_value" field.</summary>
        public const int SupportAbilityValueFieldNumber = 30;
        private uint supportAbilityValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SupportAbilityValue {
          get { return supportAbilityValue_; }
          set {
            supportAbilityValue_ = value;
          }
        }

        /// <summary>Field number for the "feeding_detected" field.</summary>
        public const int FeedingDetectedFieldNumber = 32;
        private bool feedingDetected_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FeedingDetected {
          get { return feedingDetected_; }
          set {
            feedingDetected_ = value;
          }
        }

        /// <summary>Field number for the "search_rank" field.</summary>
        public const int SearchRankFieldNumber = 34;
        private uint searchRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SearchRank {
          get { return searchRank_; }
          set {
            searchRank_ = value;
          }
        }

        /// <summary>Field number for the "search_rank_uncertainty" field.</summary>
        public const int SearchRankUncertaintyFieldNumber = 35;
        private uint searchRankUncertainty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SearchRankUncertainty {
          get { return searchRankUncertainty_; }
          set {
            searchRankUncertainty_ = value;
          }
        }

        /// <summary>Field number for the "rank_uncertainty_change" field.</summary>
        public const int RankUncertaintyChangeFieldNumber = 36;
        private int rankUncertaintyChange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RankUncertaintyChange {
          get { return rankUncertaintyChange_; }
          set {
            rankUncertaintyChange_ = value;
          }
        }

        /// <summary>Field number for the "hero_play_count" field.</summary>
        public const int HeroPlayCountFieldNumber = 37;
        private uint heroPlayCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroPlayCount {
          get { return heroPlayCount_; }
          set {
            heroPlayCount_ = value;
          }
        }

        /// <summary>Field number for the "party_id" field.</summary>
        public const int PartyIdFieldNumber = 38;
        private ulong partyId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong PartyId {
          get { return partyId_; }
          set {
            partyId_ = value;
          }
        }

        /// <summary>Field number for the "scaled_hero_damage" field.</summary>
        public const int ScaledHeroDamageFieldNumber = 54;
        private uint scaledHeroDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaledHeroDamage {
          get { return scaledHeroDamage_; }
          set {
            scaledHeroDamage_ = value;
          }
        }

        /// <summary>Field number for the "scaled_tower_damage" field.</summary>
        public const int ScaledTowerDamageFieldNumber = 55;
        private uint scaledTowerDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaledTowerDamage {
          get { return scaledTowerDamage_; }
          set {
            scaledTowerDamage_ = value;
          }
        }

        /// <summary>Field number for the "scaled_hero_healing" field.</summary>
        public const int ScaledHeroHealingFieldNumber = 56;
        private uint scaledHeroHealing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaledHeroHealing {
          get { return scaledHeroHealing_; }
          set {
            scaledHeroHealing_ = value;
          }
        }

        /// <summary>Field number for the "scaled_kills" field.</summary>
        public const int ScaledKillsFieldNumber = 39;
        private float scaledKills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledKills {
          get { return scaledKills_; }
          set {
            scaledKills_ = value;
          }
        }

        /// <summary>Field number for the "scaled_deaths" field.</summary>
        public const int ScaledDeathsFieldNumber = 40;
        private float scaledDeaths_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledDeaths {
          get { return scaledDeaths_; }
          set {
            scaledDeaths_ = value;
          }
        }

        /// <summary>Field number for the "scaled_assists" field.</summary>
        public const int ScaledAssistsFieldNumber = 41;
        private float scaledAssists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ScaledAssists {
          get { return scaledAssists_; }
          set {
            scaledAssists_ = value;
          }
        }

        /// <summary>Field number for the "claimed_farm_gold" field.</summary>
        public const int ClaimedFarmGoldFieldNumber = 42;
        private uint claimedFarmGold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ClaimedFarmGold {
          get { return claimedFarmGold_; }
          set {
            claimedFarmGold_ = value;
          }
        }

        /// <summary>Field number for the "support_gold" field.</summary>
        public const int SupportGoldFieldNumber = 43;
        private uint supportGold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SupportGold {
          get { return supportGold_; }
          set {
            supportGold_ = value;
          }
        }

        /// <summary>Field number for the "claimed_denies" field.</summary>
        public const int ClaimedDeniesFieldNumber = 44;
        private uint claimedDenies_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ClaimedDenies {
          get { return claimedDenies_; }
          set {
            claimedDenies_ = value;
          }
        }

        /// <summary>Field number for the "claimed_misses" field.</summary>
        public const int ClaimedMissesFieldNumber = 45;
        private uint claimedMisses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ClaimedMisses {
          get { return claimedMisses_; }
          set {
            claimedMisses_ = value;
          }
        }

        /// <summary>Field number for the "misses" field.</summary>
        public const int MissesFieldNumber = 46;
        private uint misses_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Misses {
          get { return misses_; }
          set {
            misses_ = value;
          }
        }

        /// <summary>Field number for the "ability_upgrades" field.</summary>
        public const int AbilityUpgradesFieldNumber = 47;
        private static readonly pb::FieldCodec<global::Proto.Dota.CMatchPlayerAbilityUpgrade> _repeated_abilityUpgrades_codec
            = pb::FieldCodec.ForMessage(378, global::Proto.Dota.CMatchPlayerAbilityUpgrade.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CMatchPlayerAbilityUpgrade> abilityUpgrades_ = new pbc::RepeatedField<global::Proto.Dota.CMatchPlayerAbilityUpgrade>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CMatchPlayerAbilityUpgrade> AbilityUpgrades {
          get { return abilityUpgrades_; }
        }

        /// <summary>Field number for the "additional_units_inventory" field.</summary>
        public const int AdditionalUnitsInventoryFieldNumber = 48;
        private static readonly pb::FieldCodec<global::Proto.Dota.CMatchAdditionalUnitInventory> _repeated_additionalUnitsInventory_codec
            = pb::FieldCodec.ForMessage(386, global::Proto.Dota.CMatchAdditionalUnitInventory.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CMatchAdditionalUnitInventory> additionalUnitsInventory_ = new pbc::RepeatedField<global::Proto.Dota.CMatchAdditionalUnitInventory>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CMatchAdditionalUnitInventory> AdditionalUnitsInventory {
          get { return additionalUnitsInventory_; }
        }

        /// <summary>Field number for the "permanent_buffs" field.</summary>
        public const int PermanentBuffsFieldNumber = 57;
        private static readonly pb::FieldCodec<global::Proto.Dota.CMatchPlayerPermanentBuff> _repeated_permanentBuffs_codec
            = pb::FieldCodec.ForMessage(458, global::Proto.Dota.CMatchPlayerPermanentBuff.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CMatchPlayerPermanentBuff> permanentBuffs_ = new pbc::RepeatedField<global::Proto.Dota.CMatchPlayerPermanentBuff>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CMatchPlayerPermanentBuff> PermanentBuffs {
          get { return permanentBuffs_; }
        }

        /// <summary>Field number for the "custom_game_data" field.</summary>
        public const int CustomGameDataFieldNumber = 50;
        private global::Proto.Dota.CMsgDOTAMatch.Types.Player.Types.CustomGameData customGameData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CMsgDOTAMatch.Types.Player.Types.CustomGameData CustomGameData {
          get { return customGameData_; }
          set {
            customGameData_ = value;
          }
        }

        /// <summary>Field number for the "active_prime_subscription" field.</summary>
        public const int ActivePrimeSubscriptionFieldNumber = 51;
        private bool activePrimeSubscription_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ActivePrimeSubscription {
          get { return activePrimeSubscription_; }
          set {
            activePrimeSubscription_ = value;
          }
        }

        /// <summary>Field number for the "net_worth" field.</summary>
        public const int NetWorthFieldNumber = 52;
        private uint netWorth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NetWorth {
          get { return netWorth_; }
          set {
            netWorth_ = value;
          }
        }

        /// <summary>Field number for the "bot_difficulty" field.</summary>
        public const int BotDifficultyFieldNumber = 58;
        private uint botDifficulty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BotDifficulty {
          get { return botDifficulty_; }
          set {
            botDifficulty_ = value;
          }
        }

        /// <summary>Field number for the "hero_pick_order" field.</summary>
        public const int HeroPickOrderFieldNumber = 63;
        private uint heroPickOrder_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroPickOrder {
          get { return heroPickOrder_; }
          set {
            heroPickOrder_ = value;
          }
        }

        /// <summary>Field number for the "hero_was_randomed" field.</summary>
        public const int HeroWasRandomedFieldNumber = 64;
        private bool heroWasRandomed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HeroWasRandomed {
          get { return heroWasRandomed_; }
          set {
            heroWasRandomed_ = value;
          }
        }

        /// <summary>Field number for the "hero_was_bonus" field.</summary>
        public const int HeroWasBonusFieldNumber = 65;
        private bool heroWasBonus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HeroWasBonus {
          get { return heroWasBonus_; }
          set {
            heroWasBonus_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (PlayerSlot != other.PlayerSlot) return false;
          if (HeroId != other.HeroId) return false;
          if (Item0 != other.Item0) return false;
          if (Item1 != other.Item1) return false;
          if (Item2 != other.Item2) return false;
          if (Item3 != other.Item3) return false;
          if (Item4 != other.Item4) return false;
          if (Item5 != other.Item5) return false;
          if (Item6 != other.Item6) return false;
          if (Item7 != other.Item7) return false;
          if (Item8 != other.Item8) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpectedTeamContribution, other.ExpectedTeamContribution)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledMetric, other.ScaledMetric)) return false;
          if (PreviousRank != other.PreviousRank) return false;
          if (RankChange != other.RankChange) return false;
          if (SoloRank != other.SoloRank) return false;
          if (SeasonalRank != other.SeasonalRank) return false;
          if (RankTierUpdated != other.RankTierUpdated) return false;
          if (Kills != other.Kills) return false;
          if (Deaths != other.Deaths) return false;
          if (Assists != other.Assists) return false;
          if (LeaverStatus != other.LeaverStatus) return false;
          if (Gold != other.Gold) return false;
          if (LastHits != other.LastHits) return false;
          if (Denies != other.Denies) return false;
          if (GoldPerMin != other.GoldPerMin) return false;
          if (XPPerMin != other.XPPerMin) return false;
          if (GoldSpent != other.GoldSpent) return false;
          if (HeroDamage != other.HeroDamage) return false;
          if (TowerDamage != other.TowerDamage) return false;
          if (HeroHealing != other.HeroHealing) return false;
          if (Level != other.Level) return false;
          if (TimeLastSeen != other.TimeLastSeen) return false;
          if (PlayerName != other.PlayerName) return false;
          if (SupportAbilityValue != other.SupportAbilityValue) return false;
          if (FeedingDetected != other.FeedingDetected) return false;
          if (SearchRank != other.SearchRank) return false;
          if (SearchRankUncertainty != other.SearchRankUncertainty) return false;
          if (RankUncertaintyChange != other.RankUncertaintyChange) return false;
          if (HeroPlayCount != other.HeroPlayCount) return false;
          if (PartyId != other.PartyId) return false;
          if (ScaledHeroDamage != other.ScaledHeroDamage) return false;
          if (ScaledTowerDamage != other.ScaledTowerDamage) return false;
          if (ScaledHeroHealing != other.ScaledHeroHealing) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledKills, other.ScaledKills)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledDeaths, other.ScaledDeaths)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledAssists, other.ScaledAssists)) return false;
          if (ClaimedFarmGold != other.ClaimedFarmGold) return false;
          if (SupportGold != other.SupportGold) return false;
          if (ClaimedDenies != other.ClaimedDenies) return false;
          if (ClaimedMisses != other.ClaimedMisses) return false;
          if (Misses != other.Misses) return false;
          if(!abilityUpgrades_.Equals(other.abilityUpgrades_)) return false;
          if(!additionalUnitsInventory_.Equals(other.additionalUnitsInventory_)) return false;
          if(!permanentBuffs_.Equals(other.permanentBuffs_)) return false;
          if (!object.Equals(CustomGameData, other.CustomGameData)) return false;
          if (ActivePrimeSubscription != other.ActivePrimeSubscription) return false;
          if (NetWorth != other.NetWorth) return false;
          if (BotDifficulty != other.BotDifficulty) return false;
          if (HeroPickOrder != other.HeroPickOrder) return false;
          if (HeroWasRandomed != other.HeroWasRandomed) return false;
          if (HeroWasBonus != other.HeroWasBonus) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AccountId != 0) hash ^= AccountId.GetHashCode();
          if (PlayerSlot != 0) hash ^= PlayerSlot.GetHashCode();
          if (HeroId != 0) hash ^= HeroId.GetHashCode();
          if (Item0 != 0) hash ^= Item0.GetHashCode();
          if (Item1 != 0) hash ^= Item1.GetHashCode();
          if (Item2 != 0) hash ^= Item2.GetHashCode();
          if (Item3 != 0) hash ^= Item3.GetHashCode();
          if (Item4 != 0) hash ^= Item4.GetHashCode();
          if (Item5 != 0) hash ^= Item5.GetHashCode();
          if (Item6 != 0) hash ^= Item6.GetHashCode();
          if (Item7 != 0) hash ^= Item7.GetHashCode();
          if (Item8 != 0) hash ^= Item8.GetHashCode();
          if (ExpectedTeamContribution != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpectedTeamContribution);
          if (ScaledMetric != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledMetric);
          if (PreviousRank != 0) hash ^= PreviousRank.GetHashCode();
          if (RankChange != 0) hash ^= RankChange.GetHashCode();
          if (SoloRank != false) hash ^= SoloRank.GetHashCode();
          if (SeasonalRank != false) hash ^= SeasonalRank.GetHashCode();
          if (RankTierUpdated != false) hash ^= RankTierUpdated.GetHashCode();
          if (Kills != 0) hash ^= Kills.GetHashCode();
          if (Deaths != 0) hash ^= Deaths.GetHashCode();
          if (Assists != 0) hash ^= Assists.GetHashCode();
          if (LeaverStatus != 0) hash ^= LeaverStatus.GetHashCode();
          if (Gold != 0) hash ^= Gold.GetHashCode();
          if (LastHits != 0) hash ^= LastHits.GetHashCode();
          if (Denies != 0) hash ^= Denies.GetHashCode();
          if (GoldPerMin != 0) hash ^= GoldPerMin.GetHashCode();
          if (XPPerMin != 0) hash ^= XPPerMin.GetHashCode();
          if (GoldSpent != 0) hash ^= GoldSpent.GetHashCode();
          if (HeroDamage != 0) hash ^= HeroDamage.GetHashCode();
          if (TowerDamage != 0) hash ^= TowerDamage.GetHashCode();
          if (HeroHealing != 0) hash ^= HeroHealing.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (TimeLastSeen != 0) hash ^= TimeLastSeen.GetHashCode();
          if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
          if (SupportAbilityValue != 0) hash ^= SupportAbilityValue.GetHashCode();
          if (FeedingDetected != false) hash ^= FeedingDetected.GetHashCode();
          if (SearchRank != 0) hash ^= SearchRank.GetHashCode();
          if (SearchRankUncertainty != 0) hash ^= SearchRankUncertainty.GetHashCode();
          if (RankUncertaintyChange != 0) hash ^= RankUncertaintyChange.GetHashCode();
          if (HeroPlayCount != 0) hash ^= HeroPlayCount.GetHashCode();
          if (PartyId != 0UL) hash ^= PartyId.GetHashCode();
          if (ScaledHeroDamage != 0) hash ^= ScaledHeroDamage.GetHashCode();
          if (ScaledTowerDamage != 0) hash ^= ScaledTowerDamage.GetHashCode();
          if (ScaledHeroHealing != 0) hash ^= ScaledHeroHealing.GetHashCode();
          if (ScaledKills != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledKills);
          if (ScaledDeaths != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledDeaths);
          if (ScaledAssists != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledAssists);
          if (ClaimedFarmGold != 0) hash ^= ClaimedFarmGold.GetHashCode();
          if (SupportGold != 0) hash ^= SupportGold.GetHashCode();
          if (ClaimedDenies != 0) hash ^= ClaimedDenies.GetHashCode();
          if (ClaimedMisses != 0) hash ^= ClaimedMisses.GetHashCode();
          if (Misses != 0) hash ^= Misses.GetHashCode();
          hash ^= abilityUpgrades_.GetHashCode();
          hash ^= additionalUnitsInventory_.GetHashCode();
          hash ^= permanentBuffs_.GetHashCode();
          if (customGameData_ != null) hash ^= CustomGameData.GetHashCode();
          if (ActivePrimeSubscription != false) hash ^= ActivePrimeSubscription.GetHashCode();
          if (NetWorth != 0) hash ^= NetWorth.GetHashCode();
          if (BotDifficulty != 0) hash ^= BotDifficulty.GetHashCode();
          if (HeroPickOrder != 0) hash ^= HeroPickOrder.GetHashCode();
          if (HeroWasRandomed != false) hash ^= HeroWasRandomed.GetHashCode();
          if (HeroWasBonus != false) hash ^= HeroWasBonus.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AccountId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (PlayerSlot != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PlayerSlot);
          }
          if (HeroId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(HeroId);
          }
          if (Item0 != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Item0);
          }
          if (Item1 != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Item1);
          }
          if (Item2 != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Item2);
          }
          if (Item3 != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Item3);
          }
          if (Item4 != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(Item4);
          }
          if (Item5 != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Item5);
          }
          if (ExpectedTeamContribution != 0F) {
            output.WriteRawTag(85);
            output.WriteFloat(ExpectedTeamContribution);
          }
          if (ScaledMetric != 0F) {
            output.WriteRawTag(93);
            output.WriteFloat(ScaledMetric);
          }
          if (PreviousRank != 0) {
            output.WriteRawTag(96);
            output.WriteUInt32(PreviousRank);
          }
          if (RankChange != 0) {
            output.WriteRawTag(104);
            output.WriteSInt32(RankChange);
          }
          if (Kills != 0) {
            output.WriteRawTag(112);
            output.WriteUInt32(Kills);
          }
          if (Deaths != 0) {
            output.WriteRawTag(120);
            output.WriteUInt32(Deaths);
          }
          if (Assists != 0) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(Assists);
          }
          if (LeaverStatus != 0) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(LeaverStatus);
          }
          if (Gold != 0) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(Gold);
          }
          if (LastHits != 0) {
            output.WriteRawTag(152, 1);
            output.WriteUInt32(LastHits);
          }
          if (Denies != 0) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(Denies);
          }
          if (GoldPerMin != 0) {
            output.WriteRawTag(168, 1);
            output.WriteUInt32(GoldPerMin);
          }
          if (XPPerMin != 0) {
            output.WriteRawTag(176, 1);
            output.WriteUInt32(XPPerMin);
          }
          if (GoldSpent != 0) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(GoldSpent);
          }
          if (HeroDamage != 0) {
            output.WriteRawTag(192, 1);
            output.WriteUInt32(HeroDamage);
          }
          if (TowerDamage != 0) {
            output.WriteRawTag(200, 1);
            output.WriteUInt32(TowerDamage);
          }
          if (HeroHealing != 0) {
            output.WriteRawTag(208, 1);
            output.WriteUInt32(HeroHealing);
          }
          if (Level != 0) {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(Level);
          }
          if (TimeLastSeen != 0) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(TimeLastSeen);
          }
          if (PlayerName.Length != 0) {
            output.WriteRawTag(234, 1);
            output.WriteString(PlayerName);
          }
          if (SupportAbilityValue != 0) {
            output.WriteRawTag(240, 1);
            output.WriteUInt32(SupportAbilityValue);
          }
          if (FeedingDetected != false) {
            output.WriteRawTag(128, 2);
            output.WriteBool(FeedingDetected);
          }
          if (SearchRank != 0) {
            output.WriteRawTag(144, 2);
            output.WriteUInt32(SearchRank);
          }
          if (SearchRankUncertainty != 0) {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(SearchRankUncertainty);
          }
          if (RankUncertaintyChange != 0) {
            output.WriteRawTag(160, 2);
            output.WriteInt32(RankUncertaintyChange);
          }
          if (HeroPlayCount != 0) {
            output.WriteRawTag(168, 2);
            output.WriteUInt32(HeroPlayCount);
          }
          if (PartyId != 0UL) {
            output.WriteRawTag(177, 2);
            output.WriteFixed64(PartyId);
          }
          if (ScaledKills != 0F) {
            output.WriteRawTag(189, 2);
            output.WriteFloat(ScaledKills);
          }
          if (ScaledDeaths != 0F) {
            output.WriteRawTag(197, 2);
            output.WriteFloat(ScaledDeaths);
          }
          if (ScaledAssists != 0F) {
            output.WriteRawTag(205, 2);
            output.WriteFloat(ScaledAssists);
          }
          if (ClaimedFarmGold != 0) {
            output.WriteRawTag(208, 2);
            output.WriteUInt32(ClaimedFarmGold);
          }
          if (SupportGold != 0) {
            output.WriteRawTag(216, 2);
            output.WriteUInt32(SupportGold);
          }
          if (ClaimedDenies != 0) {
            output.WriteRawTag(224, 2);
            output.WriteUInt32(ClaimedDenies);
          }
          if (ClaimedMisses != 0) {
            output.WriteRawTag(232, 2);
            output.WriteUInt32(ClaimedMisses);
          }
          if (Misses != 0) {
            output.WriteRawTag(240, 2);
            output.WriteUInt32(Misses);
          }
          abilityUpgrades_.WriteTo(output, _repeated_abilityUpgrades_codec);
          additionalUnitsInventory_.WriteTo(output, _repeated_additionalUnitsInventory_codec);
          if (SoloRank != false) {
            output.WriteRawTag(136, 3);
            output.WriteBool(SoloRank);
          }
          if (customGameData_ != null) {
            output.WriteRawTag(146, 3);
            output.WriteMessage(CustomGameData);
          }
          if (ActivePrimeSubscription != false) {
            output.WriteRawTag(152, 3);
            output.WriteBool(ActivePrimeSubscription);
          }
          if (NetWorth != 0) {
            output.WriteRawTag(160, 3);
            output.WriteUInt32(NetWorth);
          }
          if (SeasonalRank != false) {
            output.WriteRawTag(168, 3);
            output.WriteBool(SeasonalRank);
          }
          if (ScaledHeroDamage != 0) {
            output.WriteRawTag(176, 3);
            output.WriteUInt32(ScaledHeroDamage);
          }
          if (ScaledTowerDamage != 0) {
            output.WriteRawTag(184, 3);
            output.WriteUInt32(ScaledTowerDamage);
          }
          if (ScaledHeroHealing != 0) {
            output.WriteRawTag(192, 3);
            output.WriteUInt32(ScaledHeroHealing);
          }
          permanentBuffs_.WriteTo(output, _repeated_permanentBuffs_codec);
          if (BotDifficulty != 0) {
            output.WriteRawTag(208, 3);
            output.WriteUInt32(BotDifficulty);
          }
          if (Item6 != 0) {
            output.WriteRawTag(216, 3);
            output.WriteUInt32(Item6);
          }
          if (Item7 != 0) {
            output.WriteRawTag(224, 3);
            output.WriteUInt32(Item7);
          }
          if (Item8 != 0) {
            output.WriteRawTag(232, 3);
            output.WriteUInt32(Item8);
          }
          if (HeroPickOrder != 0) {
            output.WriteRawTag(248, 3);
            output.WriteUInt32(HeroPickOrder);
          }
          if (HeroWasRandomed != false) {
            output.WriteRawTag(128, 4);
            output.WriteBool(HeroWasRandomed);
          }
          if (HeroWasBonus != false) {
            output.WriteRawTag(136, 4);
            output.WriteBool(HeroWasBonus);
          }
          if (RankTierUpdated != false) {
            output.WriteRawTag(144, 4);
            output.WriteBool(RankTierUpdated);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AccountId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (PlayerSlot != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
          }
          if (HeroId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
          }
          if (Item0 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Item0);
          }
          if (Item1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Item1);
          }
          if (Item2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Item2);
          }
          if (Item3 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Item3);
          }
          if (Item4 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Item4);
          }
          if (Item5 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Item5);
          }
          if (Item6 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Item6);
          }
          if (Item7 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Item7);
          }
          if (Item8 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Item8);
          }
          if (ExpectedTeamContribution != 0F) {
            size += 1 + 4;
          }
          if (ScaledMetric != 0F) {
            size += 1 + 4;
          }
          if (PreviousRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreviousRank);
          }
          if (RankChange != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RankChange);
          }
          if (SoloRank != false) {
            size += 2 + 1;
          }
          if (SeasonalRank != false) {
            size += 2 + 1;
          }
          if (RankTierUpdated != false) {
            size += 2 + 1;
          }
          if (Kills != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
          }
          if (Deaths != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
          }
          if (Assists != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
          }
          if (LeaverStatus != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeaverStatus);
          }
          if (Gold != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gold);
          }
          if (LastHits != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
          }
          if (Denies != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Denies);
          }
          if (GoldPerMin != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldPerMin);
          }
          if (XPPerMin != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(XPPerMin);
          }
          if (GoldSpent != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldSpent);
          }
          if (HeroDamage != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroDamage);
          }
          if (TowerDamage != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TowerDamage);
          }
          if (HeroHealing != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroHealing);
          }
          if (Level != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (TimeLastSeen != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimeLastSeen);
          }
          if (PlayerName.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
          }
          if (SupportAbilityValue != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SupportAbilityValue);
          }
          if (FeedingDetected != false) {
            size += 2 + 1;
          }
          if (SearchRank != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SearchRank);
          }
          if (SearchRankUncertainty != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SearchRankUncertainty);
          }
          if (RankUncertaintyChange != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankUncertaintyChange);
          }
          if (HeroPlayCount != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroPlayCount);
          }
          if (PartyId != 0UL) {
            size += 2 + 8;
          }
          if (ScaledHeroDamage != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledHeroDamage);
          }
          if (ScaledTowerDamage != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledTowerDamage);
          }
          if (ScaledHeroHealing != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaledHeroHealing);
          }
          if (ScaledKills != 0F) {
            size += 2 + 4;
          }
          if (ScaledDeaths != 0F) {
            size += 2 + 4;
          }
          if (ScaledAssists != 0F) {
            size += 2 + 4;
          }
          if (ClaimedFarmGold != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedFarmGold);
          }
          if (SupportGold != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SupportGold);
          }
          if (ClaimedDenies != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedDenies);
          }
          if (ClaimedMisses != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedMisses);
          }
          if (Misses != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Misses);
          }
          size += abilityUpgrades_.CalculateSize(_repeated_abilityUpgrades_codec);
          size += additionalUnitsInventory_.CalculateSize(_repeated_additionalUnitsInventory_codec);
          size += permanentBuffs_.CalculateSize(_repeated_permanentBuffs_codec);
          if (customGameData_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CustomGameData);
          }
          if (ActivePrimeSubscription != false) {
            size += 2 + 1;
          }
          if (NetWorth != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
          }
          if (BotDifficulty != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BotDifficulty);
          }
          if (HeroPickOrder != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroPickOrder);
          }
          if (HeroWasRandomed != false) {
            size += 2 + 1;
          }
          if (HeroWasBonus != false) {
            size += 2 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.AccountId != 0) {
            AccountId = other.AccountId;
          }
          if (other.PlayerSlot != 0) {
            PlayerSlot = other.PlayerSlot;
          }
          if (other.HeroId != 0) {
            HeroId = other.HeroId;
          }
          if (other.Item0 != 0) {
            Item0 = other.Item0;
          }
          if (other.Item1 != 0) {
            Item1 = other.Item1;
          }
          if (other.Item2 != 0) {
            Item2 = other.Item2;
          }
          if (other.Item3 != 0) {
            Item3 = other.Item3;
          }
          if (other.Item4 != 0) {
            Item4 = other.Item4;
          }
          if (other.Item5 != 0) {
            Item5 = other.Item5;
          }
          if (other.Item6 != 0) {
            Item6 = other.Item6;
          }
          if (other.Item7 != 0) {
            Item7 = other.Item7;
          }
          if (other.Item8 != 0) {
            Item8 = other.Item8;
          }
          if (other.ExpectedTeamContribution != 0F) {
            ExpectedTeamContribution = other.ExpectedTeamContribution;
          }
          if (other.ScaledMetric != 0F) {
            ScaledMetric = other.ScaledMetric;
          }
          if (other.PreviousRank != 0) {
            PreviousRank = other.PreviousRank;
          }
          if (other.RankChange != 0) {
            RankChange = other.RankChange;
          }
          if (other.SoloRank != false) {
            SoloRank = other.SoloRank;
          }
          if (other.SeasonalRank != false) {
            SeasonalRank = other.SeasonalRank;
          }
          if (other.RankTierUpdated != false) {
            RankTierUpdated = other.RankTierUpdated;
          }
          if (other.Kills != 0) {
            Kills = other.Kills;
          }
          if (other.Deaths != 0) {
            Deaths = other.Deaths;
          }
          if (other.Assists != 0) {
            Assists = other.Assists;
          }
          if (other.LeaverStatus != 0) {
            LeaverStatus = other.LeaverStatus;
          }
          if (other.Gold != 0) {
            Gold = other.Gold;
          }
          if (other.LastHits != 0) {
            LastHits = other.LastHits;
          }
          if (other.Denies != 0) {
            Denies = other.Denies;
          }
          if (other.GoldPerMin != 0) {
            GoldPerMin = other.GoldPerMin;
          }
          if (other.XPPerMin != 0) {
            XPPerMin = other.XPPerMin;
          }
          if (other.GoldSpent != 0) {
            GoldSpent = other.GoldSpent;
          }
          if (other.HeroDamage != 0) {
            HeroDamage = other.HeroDamage;
          }
          if (other.TowerDamage != 0) {
            TowerDamage = other.TowerDamage;
          }
          if (other.HeroHealing != 0) {
            HeroHealing = other.HeroHealing;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.TimeLastSeen != 0) {
            TimeLastSeen = other.TimeLastSeen;
          }
          if (other.PlayerName.Length != 0) {
            PlayerName = other.PlayerName;
          }
          if (other.SupportAbilityValue != 0) {
            SupportAbilityValue = other.SupportAbilityValue;
          }
          if (other.FeedingDetected != false) {
            FeedingDetected = other.FeedingDetected;
          }
          if (other.SearchRank != 0) {
            SearchRank = other.SearchRank;
          }
          if (other.SearchRankUncertainty != 0) {
            SearchRankUncertainty = other.SearchRankUncertainty;
          }
          if (other.RankUncertaintyChange != 0) {
            RankUncertaintyChange = other.RankUncertaintyChange;
          }
          if (other.HeroPlayCount != 0) {
            HeroPlayCount = other.HeroPlayCount;
          }
          if (other.PartyId != 0UL) {
            PartyId = other.PartyId;
          }
          if (other.ScaledHeroDamage != 0) {
            ScaledHeroDamage = other.ScaledHeroDamage;
          }
          if (other.ScaledTowerDamage != 0) {
            ScaledTowerDamage = other.ScaledTowerDamage;
          }
          if (other.ScaledHeroHealing != 0) {
            ScaledHeroHealing = other.ScaledHeroHealing;
          }
          if (other.ScaledKills != 0F) {
            ScaledKills = other.ScaledKills;
          }
          if (other.ScaledDeaths != 0F) {
            ScaledDeaths = other.ScaledDeaths;
          }
          if (other.ScaledAssists != 0F) {
            ScaledAssists = other.ScaledAssists;
          }
          if (other.ClaimedFarmGold != 0) {
            ClaimedFarmGold = other.ClaimedFarmGold;
          }
          if (other.SupportGold != 0) {
            SupportGold = other.SupportGold;
          }
          if (other.ClaimedDenies != 0) {
            ClaimedDenies = other.ClaimedDenies;
          }
          if (other.ClaimedMisses != 0) {
            ClaimedMisses = other.ClaimedMisses;
          }
          if (other.Misses != 0) {
            Misses = other.Misses;
          }
          abilityUpgrades_.Add(other.abilityUpgrades_);
          additionalUnitsInventory_.Add(other.additionalUnitsInventory_);
          permanentBuffs_.Add(other.permanentBuffs_);
          if (other.customGameData_ != null) {
            if (customGameData_ == null) {
              customGameData_ = new global::Proto.Dota.CMsgDOTAMatch.Types.Player.Types.CustomGameData();
            }
            CustomGameData.MergeFrom(other.CustomGameData);
          }
          if (other.ActivePrimeSubscription != false) {
            ActivePrimeSubscription = other.ActivePrimeSubscription;
          }
          if (other.NetWorth != 0) {
            NetWorth = other.NetWorth;
          }
          if (other.BotDifficulty != 0) {
            BotDifficulty = other.BotDifficulty;
          }
          if (other.HeroPickOrder != 0) {
            HeroPickOrder = other.HeroPickOrder;
          }
          if (other.HeroWasRandomed != false) {
            HeroWasRandomed = other.HeroWasRandomed;
          }
          if (other.HeroWasBonus != false) {
            HeroWasBonus = other.HeroWasBonus;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                PlayerSlot = input.ReadUInt32();
                break;
              }
              case 24: {
                HeroId = input.ReadUInt32();
                break;
              }
              case 32: {
                Item0 = input.ReadUInt32();
                break;
              }
              case 40: {
                Item1 = input.ReadUInt32();
                break;
              }
              case 48: {
                Item2 = input.ReadUInt32();
                break;
              }
              case 56: {
                Item3 = input.ReadUInt32();
                break;
              }
              case 64: {
                Item4 = input.ReadUInt32();
                break;
              }
              case 72: {
                Item5 = input.ReadUInt32();
                break;
              }
              case 85: {
                ExpectedTeamContribution = input.ReadFloat();
                break;
              }
              case 93: {
                ScaledMetric = input.ReadFloat();
                break;
              }
              case 96: {
                PreviousRank = input.ReadUInt32();
                break;
              }
              case 104: {
                RankChange = input.ReadSInt32();
                break;
              }
              case 112: {
                Kills = input.ReadUInt32();
                break;
              }
              case 120: {
                Deaths = input.ReadUInt32();
                break;
              }
              case 128: {
                Assists = input.ReadUInt32();
                break;
              }
              case 136: {
                LeaverStatus = input.ReadUInt32();
                break;
              }
              case 144: {
                Gold = input.ReadUInt32();
                break;
              }
              case 152: {
                LastHits = input.ReadUInt32();
                break;
              }
              case 160: {
                Denies = input.ReadUInt32();
                break;
              }
              case 168: {
                GoldPerMin = input.ReadUInt32();
                break;
              }
              case 176: {
                XPPerMin = input.ReadUInt32();
                break;
              }
              case 184: {
                GoldSpent = input.ReadUInt32();
                break;
              }
              case 192: {
                HeroDamage = input.ReadUInt32();
                break;
              }
              case 200: {
                TowerDamage = input.ReadUInt32();
                break;
              }
              case 208: {
                HeroHealing = input.ReadUInt32();
                break;
              }
              case 216: {
                Level = input.ReadUInt32();
                break;
              }
              case 224: {
                TimeLastSeen = input.ReadUInt32();
                break;
              }
              case 234: {
                PlayerName = input.ReadString();
                break;
              }
              case 240: {
                SupportAbilityValue = input.ReadUInt32();
                break;
              }
              case 256: {
                FeedingDetected = input.ReadBool();
                break;
              }
              case 272: {
                SearchRank = input.ReadUInt32();
                break;
              }
              case 280: {
                SearchRankUncertainty = input.ReadUInt32();
                break;
              }
              case 288: {
                RankUncertaintyChange = input.ReadInt32();
                break;
              }
              case 296: {
                HeroPlayCount = input.ReadUInt32();
                break;
              }
              case 305: {
                PartyId = input.ReadFixed64();
                break;
              }
              case 317: {
                ScaledKills = input.ReadFloat();
                break;
              }
              case 325: {
                ScaledDeaths = input.ReadFloat();
                break;
              }
              case 333: {
                ScaledAssists = input.ReadFloat();
                break;
              }
              case 336: {
                ClaimedFarmGold = input.ReadUInt32();
                break;
              }
              case 344: {
                SupportGold = input.ReadUInt32();
                break;
              }
              case 352: {
                ClaimedDenies = input.ReadUInt32();
                break;
              }
              case 360: {
                ClaimedMisses = input.ReadUInt32();
                break;
              }
              case 368: {
                Misses = input.ReadUInt32();
                break;
              }
              case 378: {
                abilityUpgrades_.AddEntriesFrom(input, _repeated_abilityUpgrades_codec);
                break;
              }
              case 386: {
                additionalUnitsInventory_.AddEntriesFrom(input, _repeated_additionalUnitsInventory_codec);
                break;
              }
              case 392: {
                SoloRank = input.ReadBool();
                break;
              }
              case 402: {
                if (customGameData_ == null) {
                  customGameData_ = new global::Proto.Dota.CMsgDOTAMatch.Types.Player.Types.CustomGameData();
                }
                input.ReadMessage(customGameData_);
                break;
              }
              case 408: {
                ActivePrimeSubscription = input.ReadBool();
                break;
              }
              case 416: {
                NetWorth = input.ReadUInt32();
                break;
              }
              case 424: {
                SeasonalRank = input.ReadBool();
                break;
              }
              case 432: {
                ScaledHeroDamage = input.ReadUInt32();
                break;
              }
              case 440: {
                ScaledTowerDamage = input.ReadUInt32();
                break;
              }
              case 448: {
                ScaledHeroHealing = input.ReadUInt32();
                break;
              }
              case 458: {
                permanentBuffs_.AddEntriesFrom(input, _repeated_permanentBuffs_codec);
                break;
              }
              case 464: {
                BotDifficulty = input.ReadUInt32();
                break;
              }
              case 472: {
                Item6 = input.ReadUInt32();
                break;
              }
              case 480: {
                Item7 = input.ReadUInt32();
                break;
              }
              case 488: {
                Item8 = input.ReadUInt32();
                break;
              }
              case 504: {
                HeroPickOrder = input.ReadUInt32();
                break;
              }
              case 512: {
                HeroWasRandomed = input.ReadBool();
                break;
              }
              case 520: {
                HeroWasBonus = input.ReadBool();
                break;
              }
              case 528: {
                RankTierUpdated = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Player message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class CustomGameData : pb::IMessage<CustomGameData> {
            private static readonly pb::MessageParser<CustomGameData> _parser = new pb::MessageParser<CustomGameData>(() => new CustomGameData());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CustomGameData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CMsgDOTAMatch.Types.Player.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CustomGameData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CustomGameData(CustomGameData other) : this() {
              dotaTeam_ = other.dotaTeam_;
              winner_ = other.winner_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CustomGameData Clone() {
              return new CustomGameData(this);
            }

            /// <summary>Field number for the "dota_team" field.</summary>
            public const int DotaTeamFieldNumber = 1;
            private uint dotaTeam_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint DotaTeam {
              get { return dotaTeam_; }
              set {
                dotaTeam_ = value;
              }
            }

            /// <summary>Field number for the "winner" field.</summary>
            public const int WinnerFieldNumber = 2;
            private bool winner_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Winner {
              get { return winner_; }
              set {
                winner_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CustomGameData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CustomGameData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (DotaTeam != other.DotaTeam) return false;
              if (Winner != other.Winner) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (DotaTeam != 0) hash ^= DotaTeam.GetHashCode();
              if (Winner != false) hash ^= Winner.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (DotaTeam != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(DotaTeam);
              }
              if (Winner != false) {
                output.WriteRawTag(16);
                output.WriteBool(Winner);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (DotaTeam != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DotaTeam);
              }
              if (Winner != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CustomGameData other) {
              if (other == null) {
                return;
              }
              if (other.DotaTeam != 0) {
                DotaTeam = other.DotaTeam;
              }
              if (other.Winner != false) {
                Winner = other.Winner;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    DotaTeam = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Winner = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class BroadcasterInfo : pb::IMessage<BroadcasterInfo> {
        private static readonly pb::MessageParser<BroadcasterInfo> _parser = new pb::MessageParser<BroadcasterInfo>(() => new BroadcasterInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BroadcasterInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CMsgDOTAMatch.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterInfo(BroadcasterInfo other) : this() {
          accountId_ = other.accountId_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterInfo Clone() {
          return new BroadcasterInfo(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId {
          get { return accountId_; }
          set {
            accountId_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BroadcasterInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BroadcasterInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AccountId != 0) hash ^= AccountId.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AccountId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountId);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AccountId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BroadcasterInfo other) {
          if (other == null) {
            return;
          }
          if (other.AccountId != 0) {
            AccountId = other.AccountId;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountId = input.ReadUInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BroadcasterChannel : pb::IMessage<BroadcasterChannel> {
        private static readonly pb::MessageParser<BroadcasterChannel> _parser = new pb::MessageParser<BroadcasterChannel>(() => new BroadcasterChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BroadcasterChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CMsgDOTAMatch.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterChannel(BroadcasterChannel other) : this() {
          countryCode_ = other.countryCode_;
          description_ = other.description_;
          broadcasterInfos_ = other.broadcasterInfos_.Clone();
          languageCode_ = other.languageCode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BroadcasterChannel Clone() {
          return new BroadcasterChannel(this);
        }

        /// <summary>Field number for the "country_code" field.</summary>
        public const int CountryCodeFieldNumber = 1;
        private string countryCode_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CountryCode {
          get { return countryCode_; }
          set {
            countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "broadcaster_infos" field.</summary>
        public const int BroadcasterInfosFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterInfo> _repeated_broadcasterInfos_codec
            = pb::FieldCodec.ForMessage(26, global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterInfo.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterInfo> broadcasterInfos_ = new pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CMsgDOTAMatch.Types.BroadcasterInfo> BroadcasterInfos {
          get { return broadcasterInfos_; }
        }

        /// <summary>Field number for the "language_code" field.</summary>
        public const int LanguageCodeFieldNumber = 4;
        private string languageCode_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LanguageCode {
          get { return languageCode_; }
          set {
            languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BroadcasterChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BroadcasterChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CountryCode != other.CountryCode) return false;
          if (Description != other.Description) return false;
          if(!broadcasterInfos_.Equals(other.broadcasterInfos_)) return false;
          if (LanguageCode != other.LanguageCode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          hash ^= broadcasterInfos_.GetHashCode();
          if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CountryCode.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CountryCode);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          broadcasterInfos_.WriteTo(output, _repeated_broadcasterInfos_codec);
          if (LanguageCode.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LanguageCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CountryCode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += broadcasterInfos_.CalculateSize(_repeated_broadcasterInfos_codec);
          if (LanguageCode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BroadcasterChannel other) {
          if (other == null) {
            return;
          }
          if (other.CountryCode.Length != 0) {
            CountryCode = other.CountryCode;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          broadcasterInfos_.Add(other.broadcasterInfos_);
          if (other.LanguageCode.Length != 0) {
            LanguageCode = other.LanguageCode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CountryCode = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 26: {
                broadcasterInfos_.AddEntriesFrom(input, _repeated_broadcasterInfos_codec);
                break;
              }
              case 34: {
                LanguageCode = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CustomGameData : pb::IMessage<CustomGameData> {
        private static readonly pb::MessageParser<CustomGameData> _parser = new pb::MessageParser<CustomGameData>(() => new CustomGameData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CustomGameData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CMsgDOTAMatch.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomGameData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomGameData(CustomGameData other) : this() {
          customGameId_ = other.customGameId_;
          mapName_ = other.mapName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomGameData Clone() {
          return new CustomGameData(this);
        }

        /// <summary>Field number for the "custom_game_id" field.</summary>
        public const int CustomGameIdFieldNumber = 1;
        private ulong customGameId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CustomGameId {
          get { return customGameId_; }
          set {
            customGameId_ = value;
          }
        }

        /// <summary>Field number for the "map_name" field.</summary>
        public const int MapNameFieldNumber = 2;
        private string mapName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapName {
          get { return mapName_; }
          set {
            mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CustomGameData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CustomGameData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CustomGameId != other.CustomGameId) return false;
          if (MapName != other.MapName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CustomGameId != 0UL) hash ^= CustomGameId.GetHashCode();
          if (MapName.Length != 0) hash ^= MapName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CustomGameId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(CustomGameId);
          }
          if (MapName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(MapName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CustomGameId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomGameId);
          }
          if (MapName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CustomGameData other) {
          if (other == null) {
            return;
          }
          if (other.CustomGameId != 0UL) {
            CustomGameId = other.CustomGameId;
          }
          if (other.MapName.Length != 0) {
            MapName = other.MapName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CustomGameId = input.ReadUInt64();
                break;
              }
              case 18: {
                MapName = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CMsgMatchTips : pb::IMessage<CMsgMatchTips> {
    private static readonly pb::MessageParser<CMsgMatchTips> _parser = new pb::MessageParser<CMsgMatchTips>(() => new CMsgMatchTips());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgMatchTips> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaGcmessagesCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchTips() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchTips(CMsgMatchTips other) : this() {
      eventId_ = other.eventId_;
      tips_ = other.tips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgMatchTips Clone() {
      return new CMsgMatchTips(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private global::Proto.Dota.EEvent eventId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.EEvent EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgMatchTips.Types.SingleTip> _repeated_tips_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CMsgMatchTips.Types.SingleTip.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgMatchTips.Types.SingleTip> tips_ = new pbc::RepeatedField<global::Proto.Dota.CMsgMatchTips.Types.SingleTip>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgMatchTips.Types.SingleTip> Tips {
      get { return tips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgMatchTips);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgMatchTips other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if(!tips_.Equals(other.tips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      hash ^= tips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      tips_.WriteTo(output, _repeated_tips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      size += tips_.CalculateSize(_repeated_tips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgMatchTips other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      tips_.Add(other.tips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            eventId_ = (global::Proto.Dota.EEvent) input.ReadEnum();
            break;
          }
          case 18: {
            tips_.AddEntriesFrom(input, _repeated_tips_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CMsgMatchTips message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SingleTip : pb::IMessage<SingleTip> {
        private static readonly pb::MessageParser<SingleTip> _parser = new pb::MessageParser<SingleTip>(() => new SingleTip());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SingleTip> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CMsgMatchTips.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleTip() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleTip(SingleTip other) : this() {
          sourceAccountId_ = other.sourceAccountId_;
          targetAccountId_ = other.targetAccountId_;
          tipAmount_ = other.tipAmount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SingleTip Clone() {
          return new SingleTip(this);
        }

        /// <summary>Field number for the "source_account_id" field.</summary>
        public const int SourceAccountIdFieldNumber = 1;
        private uint sourceAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SourceAccountId {
          get { return sourceAccountId_; }
          set {
            sourceAccountId_ = value;
          }
        }

        /// <summary>Field number for the "target_account_id" field.</summary>
        public const int TargetAccountIdFieldNumber = 2;
        private uint targetAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetAccountId {
          get { return targetAccountId_; }
          set {
            targetAccountId_ = value;
          }
        }

        /// <summary>Field number for the "tip_amount" field.</summary>
        public const int TipAmountFieldNumber = 3;
        private uint tipAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TipAmount {
          get { return tipAmount_; }
          set {
            tipAmount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SingleTip);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SingleTip other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SourceAccountId != other.SourceAccountId) return false;
          if (TargetAccountId != other.TargetAccountId) return false;
          if (TipAmount != other.TipAmount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SourceAccountId != 0) hash ^= SourceAccountId.GetHashCode();
          if (TargetAccountId != 0) hash ^= TargetAccountId.GetHashCode();
          if (TipAmount != 0) hash ^= TipAmount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SourceAccountId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SourceAccountId);
          }
          if (TargetAccountId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(TargetAccountId);
          }
          if (TipAmount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(TipAmount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SourceAccountId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceAccountId);
          }
          if (TargetAccountId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetAccountId);
          }
          if (TipAmount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TipAmount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SingleTip other) {
          if (other == null) {
            return;
          }
          if (other.SourceAccountId != 0) {
            SourceAccountId = other.SourceAccountId;
          }
          if (other.TargetAccountId != 0) {
            TargetAccountId = other.TargetAccountId;
          }
          if (other.TipAmount != 0) {
            TipAmount = other.TipAmount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SourceAccountId = input.ReadUInt32();
                break;
              }
              case 16: {
                TargetAccountId = input.ReadUInt32();
                break;
              }
              case 24: {
                TipAmount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
