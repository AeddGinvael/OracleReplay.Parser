// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2_netmessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from s2_netmessages.proto</summary>
  public static partial class S2NetmessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for s2_netmessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S2NetmessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRzMl9uZXRtZXNzYWdlcy5wcm90bxIPZ29vZ2xlLnByb3RvYnVmGhFuZXRt",
            "ZXNzYWdlcy5wcm90byLpAQoZQ1NWQ01zZ19DcmVhdGVTdHJpbmdUYWJsZRIM",
            "CgRuYW1lGAEgASgJEhMKC251bV9lbnRyaWVzGAIgASgFEhwKFHVzZXJfZGF0",
            "YV9maXhlZF9zaXplGAMgASgIEhYKDnVzZXJfZGF0YV9zaXplGAQgASgFEhsK",
            "E3VzZXJfZGF0YV9zaXplX2JpdHMYBSABKAUSDQoFZmxhZ3MYBiABKAUSEwoL",
            "c3RyaW5nX2RhdGEYByABKAwSGQoRdW5jb21wcmVzc2VkX3NpemUYCCABKAUS",
            "FwoPZGF0YV9jb21wcmVzc2VkGAkgASgIIpgBChFDU1ZDTXNnX1ZvaWNlRGF0",
            "YRIuCgVhdWRpbxgBIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5DTXNnVm9pY2VB",
            "dWRpbxIOCgZjbGllbnQYAiABKAUSEQoJcHJveGltaXR5GAMgASgIEgwKBHh1",
            "aWQYBCABKAYSFAoMYXVkaWJsZV9tYXNrGAUgASgFEgwKBHRpY2sYBiABKA0i",
            "QAocQ1NWQ01zZ19DbGVhckFsbFN0cmluZ1RhYmxlcxIPCgdtYXBuYW1lGAEg",
            "ASgJEg8KB21hcF9jcmMYAiABKA0ikgIKH1Byb3RvRmxhdHRlbmVkU2VyaWFs",
            "aXplckZpZWxkX3QSFAoMdmFyX3R5cGVfc3ltGAEgASgFEhQKDHZhcl9uYW1l",
            "X3N5bRgCIAEoBRIRCgliaXRfY291bnQYAyABKAUSEQoJbG93X3ZhbHVlGAQg",
            "ASgCEhIKCmhpZ2hfdmFsdWUYBSABKAISFAoMZW5jb2RlX2ZsYWdzGAYgASgF",
            "EiEKGWZpZWxkX3NlcmlhbGl6ZXJfbmFtZV9zeW0YByABKAUSIAoYZmllbGRf",
            "c2VyaWFsaXplcl92ZXJzaW9uGAggASgFEhUKDXNlbmRfbm9kZV9zeW0YCSAB",
            "KAUSFwoPdmFyX2VuY29kZXJfc3ltGAogASgFImsKGlByb3RvRmxhdHRlbmVk",
            "U2VyaWFsaXplcl90EhsKE3NlcmlhbGl6ZXJfbmFtZV9zeW0YASABKAUSGgoS",
            "c2VyaWFsaXplcl92ZXJzaW9uGAIgASgFEhQKDGZpZWxkc19pbmRleBgDIAMo",
            "BSKyAQobQ1NWQ01zZ19GbGF0dGVuZWRTZXJpYWxpemVyEkAKC3NlcmlhbGl6",
            "ZXJzGAEgAygLMisuZ29vZ2xlLnByb3RvYnVmLlByb3RvRmxhdHRlbmVkU2Vy",
            "aWFsaXplcl90Eg8KB3N5bWJvbHMYAiADKAkSQAoGZmllbGRzGAMgAygLMjAu",
            "Z29vZ2xlLnByb3RvYnVmLlByb3RvRmxhdHRlbmVkU2VyaWFsaXplckZpZWxk",
            "X3QiOwoOQ01zZ0lQQ0FkZHJlc3MSFQoNY29tcHV0ZXJfZ3VpZBgBIAEoBhIS",
            "Cgpwcm9jZXNzX2lkGAIgASgNIrABCg5DTXNnU2VydmVyUGVlchITCgtwbGF5",
            "ZXJfc2xvdBgBIAEoBRIPCgdzdGVhbWlkGAIgASgGEiwKA2lwYxgDIAEoCzIf",
            "Lmdvb2dsZS5wcm90b2J1Zi5DTXNnSVBDQWRkcmVzcxIVCg10aGV5X2hlYXJf",
            "eW91GAQgASgIEhUKDXlvdV9oZWFyX3RoZW0YBSABKAgSHAoUaXNfbGlzdGVu",
            "c2VydmVyX2hvc3QYBiABKAgiQQoQQ1NWQ01zZ19QZWVyTGlzdBItCgRwZWVy",
            "GAEgAygLMh8uZ29vZ2xlLnByb3RvYnVmLkNNc2dTZXJ2ZXJQZWVyIlUKEkNT",
            "VkNNc2dfSExUVlN0YXR1cxIOCgZtYXN0ZXIYASABKAkSDwoHY2xpZW50cxgC",
            "IAEoBRINCgVzbG90cxgDIAEoBRIPCgdwcm94aWVzGAQgASgFIikKFUNTVkNN",
            "c2dfU2VydmVyU3RlYW1JRBIQCghzdGVhbV9pZBgBIAEoBCrvAgoMQ0xDX01l",
            "c3NhZ2VzEg4KCmNsc19VS05PV04QABISCg5jbGNfQ2xpZW50SW5mbxAUEgwK",
            "CGNsY19Nb3ZlEBUSEQoNY2xjX1ZvaWNlRGF0YRAWEhMKD2NsY19CYXNlbGlu",
            "ZUFjaxAXEhQKEGNsY19MaXN0ZW5FdmVudHMQGBIYChRjbGNfUmVzcG9uZEN2",
            "YXJWYWx1ZRAZEhQKEGNsY19GaWxlQ1JDQ2hlY2sQGhIXChNjbGNfTG9hZGlu",
            "Z1Byb2dyZXNzEBsSGgoWY2xjX1NwbGl0UGxheWVyQ29ubmVjdBAcEhUKEWNs",
            "Y19DbGllbnRNZXNzYWdlEB0SHQoZY2xjX1NwbGl0UGxheWVyRGlzY29ubmVj",
            "dBAeEhQKEGNsY19TZXJ2ZXJTdGF0dXMQHxISCg5jbGNfU2VydmVyUGluZxAg",
            "EhQKEGNsY19SZXF1ZXN0UGF1c2UQIRIUChBjbGNfQ21kS2V5VmFsdWVzECIq",
            "qQQKDFNWQ19NZXNzYWdlcxIOCgpzdmNfVUtOT1dOEAASEgoOc3ZjX1NlcnZl",
            "ckluZm8QKBIbChdzdmNfRmxhdHRlbmVkU2VyaWFsaXplchApEhEKDXN2Y19D",
            "bGFzc0luZm8QKhIQCgxzdmNfU2V0UGF1c2UQKxIZChVzdmNfQ3JlYXRlU3Ry",
            "aW5nVGFibGUQLBIZChVzdmNfVXBkYXRlU3RyaW5nVGFibGUQLRIRCg1zdmNf",
            "Vm9pY2VJbml0EC4SEQoNc3ZjX1ZvaWNlRGF0YRAvEg0KCXN2Y19QcmludBAw",
            "Eg4KCnN2Y19Tb3VuZHMQMRIPCgtzdmNfU2V0VmlldxAyEhwKGHN2Y19DbGVh",
            "ckFsbFN0cmluZ1RhYmxlcxAzEhQKEHN2Y19DbWRLZXlWYWx1ZXMQNBIQCgxz",
            "dmNfQlNQRGVjYWwQNRITCg9zdmNfU3BsaXRTY3JlZW4QNhIWChJzdmNfUGFj",
            "a2V0RW50aXRpZXMQNxIQCgxzdmNfUHJlZmV0Y2gQOBIMCghzdmNfTWVudRA5",
            "EhQKEHN2Y19HZXRDdmFyVmFsdWUQOhIRCg1zdmNfU3RvcFNvdW5kEDsSEAoM",
            "c3ZjX1BlZXJMaXN0EDwSFgoSc3ZjX1BhY2tldFJlbGlhYmxlED0SEgoOc3Zj",
            "X0hMVFZTdGF0dXMQPhIVChFzdmNfU2VydmVyU3RlYW1JRBA/EhYKEnN2Y19G",
            "dWxsRnJhbWVTcGxpdBBGQhCAAQCqAgpQcm90by5Eb3RhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.Dota.NetmessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.CLC_Messages), typeof(global::Proto.Dota.SVC_Messages), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_CreateStringTable), global::Proto.Dota.CSVCMsg_CreateStringTable.Parser, new[]{ "Name", "NumEntries", "UserDataFixedSize", "UserDataSize", "UserDataSizeBits", "Flags", "StringData", "UncompressedSize", "DataCompressed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_VoiceData), global::Proto.Dota.CSVCMsg_VoiceData.Parser, new[]{ "Audio", "Client", "Proximity", "Xuid", "AudibleMask", "Tick" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_ClearAllStringTables), global::Proto.Dota.CSVCMsg_ClearAllStringTables.Parser, new[]{ "Mapname", "MapCrc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.ProtoFlattenedSerializerField_t), global::Proto.Dota.ProtoFlattenedSerializerField_t.Parser, new[]{ "VarTypeSym", "VarNameSym", "BitCount", "LowValue", "HighValue", "EncodeFlags", "FieldSerializerNameSym", "FieldSerializerVersion", "SendNodeSym", "VarEncoderSym" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.ProtoFlattenedSerializer_t), global::Proto.Dota.ProtoFlattenedSerializer_t.Parser, new[]{ "SerializerNameSym", "SerializerVersion", "FieldsIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_FlattenedSerializer), global::Proto.Dota.CSVCMsg_FlattenedSerializer.Parser, new[]{ "Serializers", "Symbols", "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgIPCAddress), global::Proto.Dota.CMsgIPCAddress.Parser, new[]{ "ComputerGuid", "ProcessId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgServerPeer), global::Proto.Dota.CMsgServerPeer.Parser, new[]{ "PlayerSlot", "Steamid", "Ipc", "TheyHearYou", "YouHearThem", "IsListenserverHost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_PeerList), global::Proto.Dota.CSVCMsg_PeerList.Parser, new[]{ "Peer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_HLTVStatus), global::Proto.Dota.CSVCMsg_HLTVStatus.Parser, new[]{ "Master", "Clients", "Slots", "Proxies" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_ServerSteamID), global::Proto.Dota.CSVCMsg_ServerSteamID.Parser, new[]{ "SteamId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CLC_Messages {
    [pbr::OriginalName("cls_UKNOWN")] ClsUknown = 0,
    [pbr::OriginalName("clc_ClientInfo")] ClcClientInfo = 20,
    [pbr::OriginalName("clc_Move")] ClcMove = 21,
    [pbr::OriginalName("clc_VoiceData")] ClcVoiceData = 22,
    [pbr::OriginalName("clc_BaselineAck")] ClcBaselineAck = 23,
    [pbr::OriginalName("clc_ListenEvents")] ClcListenEvents = 24,
    [pbr::OriginalName("clc_RespondCvarValue")] ClcRespondCvarValue = 25,
    [pbr::OriginalName("clc_FileCRCCheck")] ClcFileCrccheck = 26,
    [pbr::OriginalName("clc_LoadingProgress")] ClcLoadingProgress = 27,
    [pbr::OriginalName("clc_SplitPlayerConnect")] ClcSplitPlayerConnect = 28,
    [pbr::OriginalName("clc_ClientMessage")] ClcClientMessage = 29,
    [pbr::OriginalName("clc_SplitPlayerDisconnect")] ClcSplitPlayerDisconnect = 30,
    [pbr::OriginalName("clc_ServerStatus")] ClcServerStatus = 31,
    [pbr::OriginalName("clc_ServerPing")] ClcServerPing = 32,
    [pbr::OriginalName("clc_RequestPause")] ClcRequestPause = 33,
    [pbr::OriginalName("clc_CmdKeyValues")] ClcCmdKeyValues = 34,
  }

  public enum SVC_Messages {
    [pbr::OriginalName("svc_UKNOWN")] SvcUknown = 0,
    [pbr::OriginalName("svc_ServerInfo")] SvcServerInfo = 40,
    [pbr::OriginalName("svc_FlattenedSerializer")] SvcFlattenedSerializer = 41,
    [pbr::OriginalName("svc_ClassInfo")] SvcClassInfo = 42,
    [pbr::OriginalName("svc_SetPause")] SvcSetPause = 43,
    [pbr::OriginalName("svc_CreateStringTable")] SvcCreateStringTable = 44,
    [pbr::OriginalName("svc_UpdateStringTable")] SvcUpdateStringTable = 45,
    [pbr::OriginalName("svc_VoiceInit")] SvcVoiceInit = 46,
    [pbr::OriginalName("svc_VoiceData")] SvcVoiceData = 47,
    [pbr::OriginalName("svc_Print")] SvcPrint = 48,
    [pbr::OriginalName("svc_Sounds")] SvcSounds = 49,
    [pbr::OriginalName("svc_SetView")] SvcSetView = 50,
    [pbr::OriginalName("svc_ClearAllStringTables")] SvcClearAllStringTables = 51,
    [pbr::OriginalName("svc_CmdKeyValues")] SvcCmdKeyValues = 52,
    [pbr::OriginalName("svc_BSPDecal")] SvcBspdecal = 53,
    [pbr::OriginalName("svc_SplitScreen")] SvcSplitScreen = 54,
    [pbr::OriginalName("svc_PacketEntities")] SvcPacketEntities = 55,
    [pbr::OriginalName("svc_Prefetch")] SvcPrefetch = 56,
    [pbr::OriginalName("svc_Menu")] SvcMenu = 57,
    [pbr::OriginalName("svc_GetCvarValue")] SvcGetCvarValue = 58,
    [pbr::OriginalName("svc_StopSound")] SvcStopSound = 59,
    [pbr::OriginalName("svc_PeerList")] SvcPeerList = 60,
    [pbr::OriginalName("svc_PacketReliable")] SvcPacketReliable = 61,
    [pbr::OriginalName("svc_HLTVStatus")] SvcHltvstatus = 62,
    [pbr::OriginalName("svc_ServerSteamID")] SvcServerSteamId = 63,
    [pbr::OriginalName("svc_FullFrameSplit")] SvcFullFrameSplit = 70,
  }

  #endregion

  #region Messages
  public sealed partial class CSVCMsg_CreateStringTable : pb::IMessage<CSVCMsg_CreateStringTable> {
    private static readonly pb::MessageParser<CSVCMsg_CreateStringTable> _parser = new pb::MessageParser<CSVCMsg_CreateStringTable>(() => new CSVCMsg_CreateStringTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_CreateStringTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_CreateStringTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_CreateStringTable(CSVCMsg_CreateStringTable other) : this() {
      name_ = other.name_;
      numEntries_ = other.numEntries_;
      userDataFixedSize_ = other.userDataFixedSize_;
      userDataSize_ = other.userDataSize_;
      userDataSizeBits_ = other.userDataSizeBits_;
      flags_ = other.flags_;
      stringData_ = other.stringData_;
      uncompressedSize_ = other.uncompressedSize_;
      dataCompressed_ = other.dataCompressed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_CreateStringTable Clone() {
      return new CSVCMsg_CreateStringTable(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_entries" field.</summary>
    public const int NumEntriesFieldNumber = 2;
    private int numEntries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumEntries {
      get { return numEntries_; }
      set {
        numEntries_ = value;
      }
    }

    /// <summary>Field number for the "user_data_fixed_size" field.</summary>
    public const int UserDataFixedSizeFieldNumber = 3;
    private bool userDataFixedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserDataFixedSize {
      get { return userDataFixedSize_; }
      set {
        userDataFixedSize_ = value;
      }
    }

    /// <summary>Field number for the "user_data_size" field.</summary>
    public const int UserDataSizeFieldNumber = 4;
    private int userDataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDataSize {
      get { return userDataSize_; }
      set {
        userDataSize_ = value;
      }
    }

    /// <summary>Field number for the "user_data_size_bits" field.</summary>
    public const int UserDataSizeBitsFieldNumber = 5;
    private int userDataSizeBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDataSizeBits {
      get { return userDataSizeBits_; }
      set {
        userDataSizeBits_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 6;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "string_data" field.</summary>
    public const int StringDataFieldNumber = 7;
    private pb::ByteString stringData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StringData {
      get { return stringData_; }
      set {
        stringData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uncompressed_size" field.</summary>
    public const int UncompressedSizeFieldNumber = 8;
    private int uncompressedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UncompressedSize {
      get { return uncompressedSize_; }
      set {
        uncompressedSize_ = value;
      }
    }

    /// <summary>Field number for the "data_compressed" field.</summary>
    public const int DataCompressedFieldNumber = 9;
    private bool dataCompressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DataCompressed {
      get { return dataCompressed_; }
      set {
        dataCompressed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_CreateStringTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_CreateStringTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (NumEntries != other.NumEntries) return false;
      if (UserDataFixedSize != other.UserDataFixedSize) return false;
      if (UserDataSize != other.UserDataSize) return false;
      if (UserDataSizeBits != other.UserDataSizeBits) return false;
      if (Flags != other.Flags) return false;
      if (StringData != other.StringData) return false;
      if (UncompressedSize != other.UncompressedSize) return false;
      if (DataCompressed != other.DataCompressed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NumEntries != 0) hash ^= NumEntries.GetHashCode();
      if (UserDataFixedSize != false) hash ^= UserDataFixedSize.GetHashCode();
      if (UserDataSize != 0) hash ^= UserDataSize.GetHashCode();
      if (UserDataSizeBits != 0) hash ^= UserDataSizeBits.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (StringData.Length != 0) hash ^= StringData.GetHashCode();
      if (UncompressedSize != 0) hash ^= UncompressedSize.GetHashCode();
      if (DataCompressed != false) hash ^= DataCompressed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (NumEntries != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumEntries);
      }
      if (UserDataFixedSize != false) {
        output.WriteRawTag(24);
        output.WriteBool(UserDataFixedSize);
      }
      if (UserDataSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserDataSize);
      }
      if (UserDataSizeBits != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UserDataSizeBits);
      }
      if (Flags != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Flags);
      }
      if (StringData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(StringData);
      }
      if (UncompressedSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UncompressedSize);
      }
      if (DataCompressed != false) {
        output.WriteRawTag(72);
        output.WriteBool(DataCompressed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NumEntries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumEntries);
      }
      if (UserDataFixedSize != false) {
        size += 1 + 1;
      }
      if (UserDataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDataSize);
      }
      if (UserDataSizeBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDataSizeBits);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (StringData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StringData);
      }
      if (UncompressedSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UncompressedSize);
      }
      if (DataCompressed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_CreateStringTable other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NumEntries != 0) {
        NumEntries = other.NumEntries;
      }
      if (other.UserDataFixedSize != false) {
        UserDataFixedSize = other.UserDataFixedSize;
      }
      if (other.UserDataSize != 0) {
        UserDataSize = other.UserDataSize;
      }
      if (other.UserDataSizeBits != 0) {
        UserDataSizeBits = other.UserDataSizeBits;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.StringData.Length != 0) {
        StringData = other.StringData;
      }
      if (other.UncompressedSize != 0) {
        UncompressedSize = other.UncompressedSize;
      }
      if (other.DataCompressed != false) {
        DataCompressed = other.DataCompressed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            NumEntries = input.ReadInt32();
            break;
          }
          case 24: {
            UserDataFixedSize = input.ReadBool();
            break;
          }
          case 32: {
            UserDataSize = input.ReadInt32();
            break;
          }
          case 40: {
            UserDataSizeBits = input.ReadInt32();
            break;
          }
          case 48: {
            Flags = input.ReadInt32();
            break;
          }
          case 58: {
            StringData = input.ReadBytes();
            break;
          }
          case 64: {
            UncompressedSize = input.ReadInt32();
            break;
          }
          case 72: {
            DataCompressed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_VoiceData : pb::IMessage<CSVCMsg_VoiceData> {
    private static readonly pb::MessageParser<CSVCMsg_VoiceData> _parser = new pb::MessageParser<CSVCMsg_VoiceData>(() => new CSVCMsg_VoiceData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_VoiceData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_VoiceData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_VoiceData(CSVCMsg_VoiceData other) : this() {
      audio_ = other.audio_ != null ? other.audio_.Clone() : null;
      client_ = other.client_;
      proximity_ = other.proximity_;
      xuid_ = other.xuid_;
      audibleMask_ = other.audibleMask_;
      tick_ = other.tick_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_VoiceData Clone() {
      return new CSVCMsg_VoiceData(this);
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 1;
    private global::Proto.Dota.CMsgVoiceAudio audio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVoiceAudio Audio {
      get { return audio_; }
      set {
        audio_ = value;
      }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 2;
    private int client_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Client {
      get { return client_; }
      set {
        client_ = value;
      }
    }

    /// <summary>Field number for the "proximity" field.</summary>
    public const int ProximityFieldNumber = 3;
    private bool proximity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Proximity {
      get { return proximity_; }
      set {
        proximity_ = value;
      }
    }

    /// <summary>Field number for the "xuid" field.</summary>
    public const int XuidFieldNumber = 4;
    private ulong xuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Xuid {
      get { return xuid_; }
      set {
        xuid_ = value;
      }
    }

    /// <summary>Field number for the "audible_mask" field.</summary>
    public const int AudibleMaskFieldNumber = 5;
    private int audibleMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudibleMask {
      get { return audibleMask_; }
      set {
        audibleMask_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 6;
    private uint tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_VoiceData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_VoiceData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Audio, other.Audio)) return false;
      if (Client != other.Client) return false;
      if (Proximity != other.Proximity) return false;
      if (Xuid != other.Xuid) return false;
      if (AudibleMask != other.AudibleMask) return false;
      if (Tick != other.Tick) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (audio_ != null) hash ^= Audio.GetHashCode();
      if (Client != 0) hash ^= Client.GetHashCode();
      if (Proximity != false) hash ^= Proximity.GetHashCode();
      if (Xuid != 0UL) hash ^= Xuid.GetHashCode();
      if (AudibleMask != 0) hash ^= AudibleMask.GetHashCode();
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (audio_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Audio);
      }
      if (Client != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Client);
      }
      if (Proximity != false) {
        output.WriteRawTag(24);
        output.WriteBool(Proximity);
      }
      if (Xuid != 0UL) {
        output.WriteRawTag(33);
        output.WriteFixed64(Xuid);
      }
      if (AudibleMask != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AudibleMask);
      }
      if (Tick != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Tick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (audio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
      }
      if (Client != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Client);
      }
      if (Proximity != false) {
        size += 1 + 1;
      }
      if (Xuid != 0UL) {
        size += 1 + 8;
      }
      if (AudibleMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudibleMask);
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tick);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_VoiceData other) {
      if (other == null) {
        return;
      }
      if (other.audio_ != null) {
        if (audio_ == null) {
          audio_ = new global::Proto.Dota.CMsgVoiceAudio();
        }
        Audio.MergeFrom(other.Audio);
      }
      if (other.Client != 0) {
        Client = other.Client;
      }
      if (other.Proximity != false) {
        Proximity = other.Proximity;
      }
      if (other.Xuid != 0UL) {
        Xuid = other.Xuid;
      }
      if (other.AudibleMask != 0) {
        AudibleMask = other.AudibleMask;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (audio_ == null) {
              audio_ = new global::Proto.Dota.CMsgVoiceAudio();
            }
            input.ReadMessage(audio_);
            break;
          }
          case 16: {
            Client = input.ReadInt32();
            break;
          }
          case 24: {
            Proximity = input.ReadBool();
            break;
          }
          case 33: {
            Xuid = input.ReadFixed64();
            break;
          }
          case 40: {
            AudibleMask = input.ReadInt32();
            break;
          }
          case 48: {
            Tick = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_ClearAllStringTables : pb::IMessage<CSVCMsg_ClearAllStringTables> {
    private static readonly pb::MessageParser<CSVCMsg_ClearAllStringTables> _parser = new pb::MessageParser<CSVCMsg_ClearAllStringTables>(() => new CSVCMsg_ClearAllStringTables());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_ClearAllStringTables> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ClearAllStringTables() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ClearAllStringTables(CSVCMsg_ClearAllStringTables other) : this() {
      mapname_ = other.mapname_;
      mapCrc_ = other.mapCrc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ClearAllStringTables Clone() {
      return new CSVCMsg_ClearAllStringTables(this);
    }

    /// <summary>Field number for the "mapname" field.</summary>
    public const int MapnameFieldNumber = 1;
    private string mapname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mapname {
      get { return mapname_; }
      set {
        mapname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "map_crc" field.</summary>
    public const int MapCrcFieldNumber = 2;
    private uint mapCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapCrc {
      get { return mapCrc_; }
      set {
        mapCrc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_ClearAllStringTables);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_ClearAllStringTables other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapname != other.Mapname) return false;
      if (MapCrc != other.MapCrc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapname.Length != 0) hash ^= Mapname.GetHashCode();
      if (MapCrc != 0) hash ^= MapCrc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mapname);
      }
      if (MapCrc != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MapCrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mapname);
      }
      if (MapCrc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapCrc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_ClearAllStringTables other) {
      if (other == null) {
        return;
      }
      if (other.Mapname.Length != 0) {
        Mapname = other.Mapname;
      }
      if (other.MapCrc != 0) {
        MapCrc = other.MapCrc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Mapname = input.ReadString();
            break;
          }
          case 16: {
            MapCrc = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoFlattenedSerializerField_t : pb::IMessage<ProtoFlattenedSerializerField_t> {
    private static readonly pb::MessageParser<ProtoFlattenedSerializerField_t> _parser = new pb::MessageParser<ProtoFlattenedSerializerField_t>(() => new ProtoFlattenedSerializerField_t());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoFlattenedSerializerField_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoFlattenedSerializerField_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoFlattenedSerializerField_t(ProtoFlattenedSerializerField_t other) : this() {
      varTypeSym_ = other.varTypeSym_;
      varNameSym_ = other.varNameSym_;
      bitCount_ = other.bitCount_;
      lowValue_ = other.lowValue_;
      highValue_ = other.highValue_;
      encodeFlags_ = other.encodeFlags_;
      fieldSerializerNameSym_ = other.fieldSerializerNameSym_;
      fieldSerializerVersion_ = other.fieldSerializerVersion_;
      sendNodeSym_ = other.sendNodeSym_;
      varEncoderSym_ = other.varEncoderSym_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoFlattenedSerializerField_t Clone() {
      return new ProtoFlattenedSerializerField_t(this);
    }

    /// <summary>Field number for the "var_type_sym" field.</summary>
    public const int VarTypeSymFieldNumber = 1;
    private int varTypeSym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarTypeSym {
      get { return varTypeSym_; }
      set {
        varTypeSym_ = value;
      }
    }

    /// <summary>Field number for the "var_name_sym" field.</summary>
    public const int VarNameSymFieldNumber = 2;
    private int varNameSym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarNameSym {
      get { return varNameSym_; }
      set {
        varNameSym_ = value;
      }
    }

    /// <summary>Field number for the "bit_count" field.</summary>
    public const int BitCountFieldNumber = 3;
    private int bitCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BitCount {
      get { return bitCount_; }
      set {
        bitCount_ = value;
      }
    }

    /// <summary>Field number for the "low_value" field.</summary>
    public const int LowValueFieldNumber = 4;
    private float lowValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LowValue {
      get { return lowValue_; }
      set {
        lowValue_ = value;
      }
    }

    /// <summary>Field number for the "high_value" field.</summary>
    public const int HighValueFieldNumber = 5;
    private float highValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HighValue {
      get { return highValue_; }
      set {
        highValue_ = value;
      }
    }

    /// <summary>Field number for the "encode_flags" field.</summary>
    public const int EncodeFlagsFieldNumber = 6;
    private int encodeFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncodeFlags {
      get { return encodeFlags_; }
      set {
        encodeFlags_ = value;
      }
    }

    /// <summary>Field number for the "field_serializer_name_sym" field.</summary>
    public const int FieldSerializerNameSymFieldNumber = 7;
    private int fieldSerializerNameSym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldSerializerNameSym {
      get { return fieldSerializerNameSym_; }
      set {
        fieldSerializerNameSym_ = value;
      }
    }

    /// <summary>Field number for the "field_serializer_version" field.</summary>
    public const int FieldSerializerVersionFieldNumber = 8;
    private int fieldSerializerVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldSerializerVersion {
      get { return fieldSerializerVersion_; }
      set {
        fieldSerializerVersion_ = value;
      }
    }

    /// <summary>Field number for the "send_node_sym" field.</summary>
    public const int SendNodeSymFieldNumber = 9;
    private int sendNodeSym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SendNodeSym {
      get { return sendNodeSym_; }
      set {
        sendNodeSym_ = value;
      }
    }

    /// <summary>Field number for the "var_encoder_sym" field.</summary>
    public const int VarEncoderSymFieldNumber = 10;
    private int varEncoderSym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarEncoderSym {
      get { return varEncoderSym_; }
      set {
        varEncoderSym_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoFlattenedSerializerField_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoFlattenedSerializerField_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VarTypeSym != other.VarTypeSym) return false;
      if (VarNameSym != other.VarNameSym) return false;
      if (BitCount != other.BitCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LowValue, other.LowValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HighValue, other.HighValue)) return false;
      if (EncodeFlags != other.EncodeFlags) return false;
      if (FieldSerializerNameSym != other.FieldSerializerNameSym) return false;
      if (FieldSerializerVersion != other.FieldSerializerVersion) return false;
      if (SendNodeSym != other.SendNodeSym) return false;
      if (VarEncoderSym != other.VarEncoderSym) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VarTypeSym != 0) hash ^= VarTypeSym.GetHashCode();
      if (VarNameSym != 0) hash ^= VarNameSym.GetHashCode();
      if (BitCount != 0) hash ^= BitCount.GetHashCode();
      if (LowValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LowValue);
      if (HighValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HighValue);
      if (EncodeFlags != 0) hash ^= EncodeFlags.GetHashCode();
      if (FieldSerializerNameSym != 0) hash ^= FieldSerializerNameSym.GetHashCode();
      if (FieldSerializerVersion != 0) hash ^= FieldSerializerVersion.GetHashCode();
      if (SendNodeSym != 0) hash ^= SendNodeSym.GetHashCode();
      if (VarEncoderSym != 0) hash ^= VarEncoderSym.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VarTypeSym != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VarTypeSym);
      }
      if (VarNameSym != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VarNameSym);
      }
      if (BitCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BitCount);
      }
      if (LowValue != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(LowValue);
      }
      if (HighValue != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HighValue);
      }
      if (EncodeFlags != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EncodeFlags);
      }
      if (FieldSerializerNameSym != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FieldSerializerNameSym);
      }
      if (FieldSerializerVersion != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FieldSerializerVersion);
      }
      if (SendNodeSym != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SendNodeSym);
      }
      if (VarEncoderSym != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VarEncoderSym);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VarTypeSym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarTypeSym);
      }
      if (VarNameSym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarNameSym);
      }
      if (BitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitCount);
      }
      if (LowValue != 0F) {
        size += 1 + 4;
      }
      if (HighValue != 0F) {
        size += 1 + 4;
      }
      if (EncodeFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncodeFlags);
      }
      if (FieldSerializerNameSym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldSerializerNameSym);
      }
      if (FieldSerializerVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldSerializerVersion);
      }
      if (SendNodeSym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SendNodeSym);
      }
      if (VarEncoderSym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarEncoderSym);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoFlattenedSerializerField_t other) {
      if (other == null) {
        return;
      }
      if (other.VarTypeSym != 0) {
        VarTypeSym = other.VarTypeSym;
      }
      if (other.VarNameSym != 0) {
        VarNameSym = other.VarNameSym;
      }
      if (other.BitCount != 0) {
        BitCount = other.BitCount;
      }
      if (other.LowValue != 0F) {
        LowValue = other.LowValue;
      }
      if (other.HighValue != 0F) {
        HighValue = other.HighValue;
      }
      if (other.EncodeFlags != 0) {
        EncodeFlags = other.EncodeFlags;
      }
      if (other.FieldSerializerNameSym != 0) {
        FieldSerializerNameSym = other.FieldSerializerNameSym;
      }
      if (other.FieldSerializerVersion != 0) {
        FieldSerializerVersion = other.FieldSerializerVersion;
      }
      if (other.SendNodeSym != 0) {
        SendNodeSym = other.SendNodeSym;
      }
      if (other.VarEncoderSym != 0) {
        VarEncoderSym = other.VarEncoderSym;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VarTypeSym = input.ReadInt32();
            break;
          }
          case 16: {
            VarNameSym = input.ReadInt32();
            break;
          }
          case 24: {
            BitCount = input.ReadInt32();
            break;
          }
          case 37: {
            LowValue = input.ReadFloat();
            break;
          }
          case 45: {
            HighValue = input.ReadFloat();
            break;
          }
          case 48: {
            EncodeFlags = input.ReadInt32();
            break;
          }
          case 56: {
            FieldSerializerNameSym = input.ReadInt32();
            break;
          }
          case 64: {
            FieldSerializerVersion = input.ReadInt32();
            break;
          }
          case 72: {
            SendNodeSym = input.ReadInt32();
            break;
          }
          case 80: {
            VarEncoderSym = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoFlattenedSerializer_t : pb::IMessage<ProtoFlattenedSerializer_t> {
    private static readonly pb::MessageParser<ProtoFlattenedSerializer_t> _parser = new pb::MessageParser<ProtoFlattenedSerializer_t>(() => new ProtoFlattenedSerializer_t());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoFlattenedSerializer_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoFlattenedSerializer_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoFlattenedSerializer_t(ProtoFlattenedSerializer_t other) : this() {
      serializerNameSym_ = other.serializerNameSym_;
      serializerVersion_ = other.serializerVersion_;
      fieldsIndex_ = other.fieldsIndex_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoFlattenedSerializer_t Clone() {
      return new ProtoFlattenedSerializer_t(this);
    }

    /// <summary>Field number for the "serializer_name_sym" field.</summary>
    public const int SerializerNameSymFieldNumber = 1;
    private int serializerNameSym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerNameSym {
      get { return serializerNameSym_; }
      set {
        serializerNameSym_ = value;
      }
    }

    /// <summary>Field number for the "serializer_version" field.</summary>
    public const int SerializerVersionFieldNumber = 2;
    private int serializerVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerVersion {
      get { return serializerVersion_; }
      set {
        serializerVersion_ = value;
      }
    }

    /// <summary>Field number for the "fields_index" field.</summary>
    public const int FieldsIndexFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_fieldsIndex_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> fieldsIndex_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FieldsIndex {
      get { return fieldsIndex_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoFlattenedSerializer_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoFlattenedSerializer_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerializerNameSym != other.SerializerNameSym) return false;
      if (SerializerVersion != other.SerializerVersion) return false;
      if(!fieldsIndex_.Equals(other.fieldsIndex_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerializerNameSym != 0) hash ^= SerializerNameSym.GetHashCode();
      if (SerializerVersion != 0) hash ^= SerializerVersion.GetHashCode();
      hash ^= fieldsIndex_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerializerNameSym != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SerializerNameSym);
      }
      if (SerializerVersion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SerializerVersion);
      }
      fieldsIndex_.WriteTo(output, _repeated_fieldsIndex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerializerNameSym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerNameSym);
      }
      if (SerializerVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerVersion);
      }
      size += fieldsIndex_.CalculateSize(_repeated_fieldsIndex_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoFlattenedSerializer_t other) {
      if (other == null) {
        return;
      }
      if (other.SerializerNameSym != 0) {
        SerializerNameSym = other.SerializerNameSym;
      }
      if (other.SerializerVersion != 0) {
        SerializerVersion = other.SerializerVersion;
      }
      fieldsIndex_.Add(other.fieldsIndex_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SerializerNameSym = input.ReadInt32();
            break;
          }
          case 16: {
            SerializerVersion = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            fieldsIndex_.AddEntriesFrom(input, _repeated_fieldsIndex_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_FlattenedSerializer : pb::IMessage<CSVCMsg_FlattenedSerializer> {
    private static readonly pb::MessageParser<CSVCMsg_FlattenedSerializer> _parser = new pb::MessageParser<CSVCMsg_FlattenedSerializer>(() => new CSVCMsg_FlattenedSerializer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_FlattenedSerializer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_FlattenedSerializer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_FlattenedSerializer(CSVCMsg_FlattenedSerializer other) : this() {
      serializers_ = other.serializers_.Clone();
      symbols_ = other.symbols_.Clone();
      fields_ = other.fields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_FlattenedSerializer Clone() {
      return new CSVCMsg_FlattenedSerializer(this);
    }

    /// <summary>Field number for the "serializers" field.</summary>
    public const int SerializersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.ProtoFlattenedSerializer_t> _repeated_serializers_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.ProtoFlattenedSerializer_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.ProtoFlattenedSerializer_t> serializers_ = new pbc::RepeatedField<global::Proto.Dota.ProtoFlattenedSerializer_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.ProtoFlattenedSerializer_t> Serializers {
      get { return serializers_; }
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_symbols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> symbols_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Symbols {
      get { return symbols_; }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.Dota.ProtoFlattenedSerializerField_t> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.Dota.ProtoFlattenedSerializerField_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.ProtoFlattenedSerializerField_t> fields_ = new pbc::RepeatedField<global::Proto.Dota.ProtoFlattenedSerializerField_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.ProtoFlattenedSerializerField_t> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_FlattenedSerializer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_FlattenedSerializer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serializers_.Equals(other.serializers_)) return false;
      if(!symbols_.Equals(other.symbols_)) return false;
      if(!fields_.Equals(other.fields_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serializers_.GetHashCode();
      hash ^= symbols_.GetHashCode();
      hash ^= fields_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serializers_.WriteTo(output, _repeated_serializers_codec);
      symbols_.WriteTo(output, _repeated_symbols_codec);
      fields_.WriteTo(output, _repeated_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serializers_.CalculateSize(_repeated_serializers_codec);
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_FlattenedSerializer other) {
      if (other == null) {
        return;
      }
      serializers_.Add(other.serializers_);
      symbols_.Add(other.symbols_);
      fields_.Add(other.fields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            serializers_.AddEntriesFrom(input, _repeated_serializers_codec);
            break;
          }
          case 18: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
          case 26: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgIPCAddress : pb::IMessage<CMsgIPCAddress> {
    private static readonly pb::MessageParser<CMsgIPCAddress> _parser = new pb::MessageParser<CMsgIPCAddress>(() => new CMsgIPCAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgIPCAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgIPCAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgIPCAddress(CMsgIPCAddress other) : this() {
      computerGuid_ = other.computerGuid_;
      processId_ = other.processId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgIPCAddress Clone() {
      return new CMsgIPCAddress(this);
    }

    /// <summary>Field number for the "computer_guid" field.</summary>
    public const int ComputerGuidFieldNumber = 1;
    private ulong computerGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ComputerGuid {
      get { return computerGuid_; }
      set {
        computerGuid_ = value;
      }
    }

    /// <summary>Field number for the "process_id" field.</summary>
    public const int ProcessIdFieldNumber = 2;
    private uint processId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgIPCAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgIPCAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ComputerGuid != other.ComputerGuid) return false;
      if (ProcessId != other.ProcessId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ComputerGuid != 0UL) hash ^= ComputerGuid.GetHashCode();
      if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ComputerGuid != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(ComputerGuid);
      }
      if (ProcessId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ProcessId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ComputerGuid != 0UL) {
        size += 1 + 8;
      }
      if (ProcessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProcessId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgIPCAddress other) {
      if (other == null) {
        return;
      }
      if (other.ComputerGuid != 0UL) {
        ComputerGuid = other.ComputerGuid;
      }
      if (other.ProcessId != 0) {
        ProcessId = other.ProcessId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ComputerGuid = input.ReadFixed64();
            break;
          }
          case 16: {
            ProcessId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgServerPeer : pb::IMessage<CMsgServerPeer> {
    private static readonly pb::MessageParser<CMsgServerPeer> _parser = new pb::MessageParser<CMsgServerPeer>(() => new CMsgServerPeer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgServerPeer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerPeer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerPeer(CMsgServerPeer other) : this() {
      playerSlot_ = other.playerSlot_;
      steamid_ = other.steamid_;
      ipc_ = other.ipc_ != null ? other.ipc_.Clone() : null;
      theyHearYou_ = other.theyHearYou_;
      youHearThem_ = other.youHearThem_;
      isListenserverHost_ = other.isListenserverHost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgServerPeer Clone() {
      return new CMsgServerPeer(this);
    }

    /// <summary>Field number for the "player_slot" field.</summary>
    public const int PlayerSlotFieldNumber = 1;
    private int playerSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerSlot {
      get { return playerSlot_; }
      set {
        playerSlot_ = value;
      }
    }

    /// <summary>Field number for the "steamid" field.</summary>
    public const int SteamidFieldNumber = 2;
    private ulong steamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Steamid {
      get { return steamid_; }
      set {
        steamid_ = value;
      }
    }

    /// <summary>Field number for the "ipc" field.</summary>
    public const int IpcFieldNumber = 3;
    private global::Proto.Dota.CMsgIPCAddress ipc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgIPCAddress Ipc {
      get { return ipc_; }
      set {
        ipc_ = value;
      }
    }

    /// <summary>Field number for the "they_hear_you" field.</summary>
    public const int TheyHearYouFieldNumber = 4;
    private bool theyHearYou_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TheyHearYou {
      get { return theyHearYou_; }
      set {
        theyHearYou_ = value;
      }
    }

    /// <summary>Field number for the "you_hear_them" field.</summary>
    public const int YouHearThemFieldNumber = 5;
    private bool youHearThem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool YouHearThem {
      get { return youHearThem_; }
      set {
        youHearThem_ = value;
      }
    }

    /// <summary>Field number for the "is_listenserver_host" field.</summary>
    public const int IsListenserverHostFieldNumber = 6;
    private bool isListenserverHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsListenserverHost {
      get { return isListenserverHost_; }
      set {
        isListenserverHost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgServerPeer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgServerPeer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerSlot != other.PlayerSlot) return false;
      if (Steamid != other.Steamid) return false;
      if (!object.Equals(Ipc, other.Ipc)) return false;
      if (TheyHearYou != other.TheyHearYou) return false;
      if (YouHearThem != other.YouHearThem) return false;
      if (IsListenserverHost != other.IsListenserverHost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerSlot != 0) hash ^= PlayerSlot.GetHashCode();
      if (Steamid != 0UL) hash ^= Steamid.GetHashCode();
      if (ipc_ != null) hash ^= Ipc.GetHashCode();
      if (TheyHearYou != false) hash ^= TheyHearYou.GetHashCode();
      if (YouHearThem != false) hash ^= YouHearThem.GetHashCode();
      if (IsListenserverHost != false) hash ^= IsListenserverHost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerSlot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerSlot);
      }
      if (Steamid != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(Steamid);
      }
      if (ipc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Ipc);
      }
      if (TheyHearYou != false) {
        output.WriteRawTag(32);
        output.WriteBool(TheyHearYou);
      }
      if (YouHearThem != false) {
        output.WriteRawTag(40);
        output.WriteBool(YouHearThem);
      }
      if (IsListenserverHost != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsListenserverHost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerSlot);
      }
      if (Steamid != 0UL) {
        size += 1 + 8;
      }
      if (ipc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ipc);
      }
      if (TheyHearYou != false) {
        size += 1 + 1;
      }
      if (YouHearThem != false) {
        size += 1 + 1;
      }
      if (IsListenserverHost != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgServerPeer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerSlot != 0) {
        PlayerSlot = other.PlayerSlot;
      }
      if (other.Steamid != 0UL) {
        Steamid = other.Steamid;
      }
      if (other.ipc_ != null) {
        if (ipc_ == null) {
          ipc_ = new global::Proto.Dota.CMsgIPCAddress();
        }
        Ipc.MergeFrom(other.Ipc);
      }
      if (other.TheyHearYou != false) {
        TheyHearYou = other.TheyHearYou;
      }
      if (other.YouHearThem != false) {
        YouHearThem = other.YouHearThem;
      }
      if (other.IsListenserverHost != false) {
        IsListenserverHost = other.IsListenserverHost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerSlot = input.ReadInt32();
            break;
          }
          case 17: {
            Steamid = input.ReadFixed64();
            break;
          }
          case 26: {
            if (ipc_ == null) {
              ipc_ = new global::Proto.Dota.CMsgIPCAddress();
            }
            input.ReadMessage(ipc_);
            break;
          }
          case 32: {
            TheyHearYou = input.ReadBool();
            break;
          }
          case 40: {
            YouHearThem = input.ReadBool();
            break;
          }
          case 48: {
            IsListenserverHost = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_PeerList : pb::IMessage<CSVCMsg_PeerList> {
    private static readonly pb::MessageParser<CSVCMsg_PeerList> _parser = new pb::MessageParser<CSVCMsg_PeerList>(() => new CSVCMsg_PeerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_PeerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_PeerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_PeerList(CSVCMsg_PeerList other) : this() {
      peer_ = other.peer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_PeerList Clone() {
      return new CSVCMsg_PeerList(this);
    }

    /// <summary>Field number for the "peer" field.</summary>
    public const int PeerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgServerPeer> _repeated_peer_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CMsgServerPeer.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgServerPeer> peer_ = new pbc::RepeatedField<global::Proto.Dota.CMsgServerPeer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgServerPeer> Peer {
      get { return peer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_PeerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_PeerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!peer_.Equals(other.peer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= peer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      peer_.WriteTo(output, _repeated_peer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += peer_.CalculateSize(_repeated_peer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_PeerList other) {
      if (other == null) {
        return;
      }
      peer_.Add(other.peer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            peer_.AddEntriesFrom(input, _repeated_peer_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_HLTVStatus : pb::IMessage<CSVCMsg_HLTVStatus> {
    private static readonly pb::MessageParser<CSVCMsg_HLTVStatus> _parser = new pb::MessageParser<CSVCMsg_HLTVStatus>(() => new CSVCMsg_HLTVStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_HLTVStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_HLTVStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_HLTVStatus(CSVCMsg_HLTVStatus other) : this() {
      master_ = other.master_;
      clients_ = other.clients_;
      slots_ = other.slots_;
      proxies_ = other.proxies_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_HLTVStatus Clone() {
      return new CSVCMsg_HLTVStatus(this);
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int MasterFieldNumber = 1;
    private string master_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Master {
      get { return master_; }
      set {
        master_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clients" field.</summary>
    public const int ClientsFieldNumber = 2;
    private int clients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Clients {
      get { return clients_; }
      set {
        clients_ = value;
      }
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 3;
    private int slots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slots {
      get { return slots_; }
      set {
        slots_ = value;
      }
    }

    /// <summary>Field number for the "proxies" field.</summary>
    public const int ProxiesFieldNumber = 4;
    private int proxies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Proxies {
      get { return proxies_; }
      set {
        proxies_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_HLTVStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_HLTVStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Master != other.Master) return false;
      if (Clients != other.Clients) return false;
      if (Slots != other.Slots) return false;
      if (Proxies != other.Proxies) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Master.Length != 0) hash ^= Master.GetHashCode();
      if (Clients != 0) hash ^= Clients.GetHashCode();
      if (Slots != 0) hash ^= Slots.GetHashCode();
      if (Proxies != 0) hash ^= Proxies.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Master.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Master);
      }
      if (Clients != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Clients);
      }
      if (Slots != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Slots);
      }
      if (Proxies != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Proxies);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Master.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Master);
      }
      if (Clients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clients);
      }
      if (Slots != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slots);
      }
      if (Proxies != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Proxies);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_HLTVStatus other) {
      if (other == null) {
        return;
      }
      if (other.Master.Length != 0) {
        Master = other.Master;
      }
      if (other.Clients != 0) {
        Clients = other.Clients;
      }
      if (other.Slots != 0) {
        Slots = other.Slots;
      }
      if (other.Proxies != 0) {
        Proxies = other.Proxies;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Master = input.ReadString();
            break;
          }
          case 16: {
            Clients = input.ReadInt32();
            break;
          }
          case 24: {
            Slots = input.ReadInt32();
            break;
          }
          case 32: {
            Proxies = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_ServerSteamID : pb::IMessage<CSVCMsg_ServerSteamID> {
    private static readonly pb::MessageParser<CSVCMsg_ServerSteamID> _parser = new pb::MessageParser<CSVCMsg_ServerSteamID>(() => new CSVCMsg_ServerSteamID());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_ServerSteamID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2NetmessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ServerSteamID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ServerSteamID(CSVCMsg_ServerSteamID other) : this() {
      steamId_ = other.steamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ServerSteamID Clone() {
      return new CSVCMsg_ServerSteamID(this);
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { return steamId_; }
      set {
        steamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_ServerSteamID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_ServerSteamID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId != 0UL) hash ^= SteamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SteamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_ServerSteamID other) {
      if (other == null) {
        return;
      }
      if (other.SteamId != 0UL) {
        SteamId = other.SteamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SteamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
