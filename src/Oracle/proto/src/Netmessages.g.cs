// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: netmessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from netmessages.proto</summary>
  public static partial class NetmessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for netmessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetmessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFuZXRtZXNzYWdlcy5wcm90bxIPZ29vZ2xlLnByb3RvYnVmGhZuZXR3b3Jr",
            "YmFzZXR5cGVzLnByb3RvIpABChJDQ0xDTXNnX0NsaWVudEluZm8SFgoOc2Vu",
            "ZF90YWJsZV9jcmMYASABKAcSFAoMc2VydmVyX2NvdW50GAIgASgNEg8KB2lz",
            "X2hsdHYYAyABKAgSEQoJaXNfcmVwbGF5GAQgASgIEhIKCmZyaWVuZHNfaWQY",
            "BSABKA0SFAoMZnJpZW5kc19uYW1lGAYgASgJIoEBCgxDQ0xDTXNnX01vdmUS",
            "GwoTbnVtX2JhY2t1cF9jb21tYW5kcxgBIAEoDRIYChBudW1fbmV3X2NvbW1h",
            "bmRzGAIgASgNEgwKBGRhdGEYAyABKAwSFgoOY29tbWFuZF9udW1iZXIYBCAB",
            "KA0SFAoMbnVtX2NvbW1hbmRzGAUgASgNIsEBCg5DTXNnVm9pY2VBdWRpbxIy",
            "CgZmb3JtYXQYASABKA4yIi5nb29nbGUucHJvdG9idWYuVm9pY2VEYXRhRm9y",
            "bWF0X3QSEgoKdm9pY2VfZGF0YRgCIAEoDBIWCg5zZXF1ZW5jZV9ieXRlcxgD",
            "IAEoBRIWCg5zZWN0aW9uX251bWJlchgEIAEoDRITCgtzYW1wbGVfcmF0ZRgF",
            "IAEoDRIiChp1bmNvbXByZXNzZWRfc2FtcGxlX29mZnNldBgGIAEoDSJfChFD",
            "Q0xDTXNnX1ZvaWNlRGF0YRIuCgVhdWRpbxgBIAEoCzIfLmdvb2dsZS5wcm90",
            "b2J1Zi5DTXNnVm9pY2VBdWRpbxIMCgR4dWlkGAIgASgGEgwKBHRpY2sYAyAB",
            "KA0iQQoTQ0NMQ01zZ19CYXNlbGluZUFjaxIVCg1iYXNlbGluZV90aWNrGAEg",
            "ASgFEhMKC2Jhc2VsaW5lX25yGAIgASgFIioKFENDTENNc2dfTGlzdGVuRXZl",
            "bnRzEhIKCmV2ZW50X21hc2sYASADKAciXAoYQ0NMQ01zZ19SZXNwb25kQ3Zh",
            "clZhbHVlEg4KBmNvb2tpZRgBIAEoBRITCgtzdGF0dXNfY29kZRgCIAEoBRIM",
            "CgRuYW1lGAMgASgJEg0KBXZhbHVlGAQgASgJIm0KFENDTENNc2dfRmlsZUNS",
            "Q0NoZWNrEhEKCWNvZGVfcGF0aBgBIAEoBRIMCgRwYXRoGAIgASgJEhUKDWNv",
            "ZGVfZmlsZW5hbWUYAyABKAUSEAoIZmlsZW5hbWUYBCABKAkSCwoDY3JjGAUg",
            "ASgHIisKF0NDTENNc2dfTG9hZGluZ1Byb2dyZXNzEhAKCHByb2dyZXNzGAEg",
            "ASgFIjAKGkNDTENNc2dfU3BsaXRQbGF5ZXJDb25uZWN0EhIKCnBsYXllcm5h",
            "bWUYASABKAkiNwoVQ0NMQ01zZ19DbGllbnRNZXNzYWdlEhAKCG1zZ190eXBl",
            "GAEgASgFEgwKBGRhdGEYAiABKAwiLQodQ0NMQ01zZ19TcGxpdFBsYXllckRp",
            "c2Nvbm5lY3QSDAoEc2xvdBgBIAEoBSIqChRDQ0xDTXNnX1NlcnZlclN0YXR1",
            "cxISCgpzaW1wbGlmaWVkGAEgASgIIhQKEkNDTENNc2dfU2VydmVyUGluZyJg",
            "ChRDQ0xDTXNnX1JlcXVlc3RQYXVzZRIzCgpwYXVzZV90eXBlGAEgASgOMh8u",
            "Z29vZ2xlLnByb3RvYnVmLlJlcXVlc3RQYXVzZV90EhMKC3BhdXNlX2dyb3Vw",
            "GAIgASgFIiQKFENDTENNc2dfQ21kS2V5VmFsdWVzEgwKBGRhdGEYASABKAwi",
            "8QEKFUNTVkNNc2dfR2FtZUV2ZW50TGlzdBJICgtkZXNjcmlwdG9ycxgBIAMo",
            "CzIzLmdvb2dsZS5wcm90b2J1Zi5DU1ZDTXNnX0dhbWVFdmVudExpc3QuZGVz",
            "Y3JpcHRvcl90GiMKBWtleV90EgwKBHR5cGUYASABKAUSDAoEbmFtZRgCIAEo",
            "CRppCgxkZXNjcmlwdG9yX3QSDwoHZXZlbnRpZBgBIAEoBRIMCgRuYW1lGAIg",
            "ASgJEjoKBGtleXMYAyADKAsyLC5nb29nbGUucHJvdG9idWYuQ1NWQ01zZ19H",
            "YW1lRXZlbnRMaXN0LmtleV90IqwCChZDU1ZDTXNnX1BhY2tldEVudGl0aWVz",
            "EhMKC21heF9lbnRyaWVzGAEgASgFEhcKD3VwZGF0ZWRfZW50cmllcxgCIAEo",
            "BRIQCghpc19kZWx0YRgDIAEoCBIXCg91cGRhdGVfYmFzZWxpbmUYBCABKAgS",
            "EAoIYmFzZWxpbmUYBSABKAUSEgoKZGVsdGFfZnJvbRgGIAEoBRITCgtlbnRp",
            "dHlfZGF0YRgHIAEoDBIaChJwZW5kaW5nX2Z1bGxfZnJhbWUYCCABKAgSIAoY",
            "YWN0aXZlX3NwYXduZ3JvdXBfaGFuZGxlGAkgASgNEicKH21heF9zcGF3bmdy",
            "b3VwX2NyZWF0aW9uc2VxdWVuY2UYCiABKA0SFwoPbGFzdF9jbWRfbnVtYmVy",
            "GAsgASgNIuUDChJDU1ZDTXNnX1NlcnZlckluZm8SEAoIcHJvdG9jb2wYASAB",
            "KAUSFAoMc2VydmVyX2NvdW50GAIgASgFEhQKDGlzX2RlZGljYXRlZBgDIAEo",
            "CBIPCgdpc19obHR2GAQgASgIEhEKCWlzX3JlcGxheRgFIAEoCBIMCgRjX29z",
            "GAYgASgFEg8KB21hcF9jcmMYByABKAcSEgoKY2xpZW50X2NyYxgIIAEoBxIY",
            "ChBzdHJpbmdfdGFibGVfY3JjGAkgASgHEhMKC21heF9jbGllbnRzGAogASgF",
            "EhMKC21heF9jbGFzc2VzGAsgASgFEhMKC3BsYXllcl9zbG90GAwgASgFEhUK",
            "DXRpY2tfaW50ZXJ2YWwYDSABKAISEAoIZ2FtZV9kaXIYDiABKAkSEAoIbWFw",
            "X25hbWUYDyABKAkSEAoIc2t5X25hbWUYECABKAkSEQoJaG9zdF9uYW1lGBEg",
            "ASgJEhIKCmFkZG9uX25hbWUYEiABKAkSTgoTZ2FtZV9zZXNzaW9uX2NvbmZp",
            "ZxgTIAEoCzIxLmdvb2dsZS5wcm90b2J1Zi5DU1ZDTXNnX0dhbWVTZXNzaW9u",
            "Q29uZmlndXJhdGlvbhIdChVnYW1lX3Nlc3Npb25fbWFuaWZlc3QYFCABKAwi",
            "tAEKEUNTVkNNc2dfQ2xhc3NJbmZvEhgKEGNyZWF0ZV9vbl9jbGllbnQYASAB",
            "KAgSOwoHY2xhc3NlcxgCIAMoCzIqLmdvb2dsZS5wcm90b2J1Zi5DU1ZDTXNn",
            "X0NsYXNzSW5mby5jbGFzc190GkgKB2NsYXNzX3QSEAoIY2xhc3NfaWQYASAB",
            "KAUSFwoPZGF0YV90YWJsZV9uYW1lGAIgASgJEhIKCmNsYXNzX25hbWUYAyAB",
            "KAkiNQoPQ1NWQ01zZ19TZXRWaWV3EhQKDGVudGl0eV9pbmRleBgBIAEoBRIM",
            "CgRzbG90GAIgASgFIh0KDUNTVkNNc2dfUHJpbnQSDAoEdGV4dBgBIAEoCSJE",
            "ChFDU1ZDTXNnX1ZvaWNlSW5pdBIPCgdxdWFsaXR5GAEgASgFEg0KBWNvZGVj",
            "GAIgASgJEg8KB3ZlcnNpb24YAyABKAUi7wMKDkNTVkNNc2dfU291bmRzEhYK",
            "DnJlbGlhYmxlX3NvdW5kGAEgASgIEjsKBnNvdW5kcxgCIAMoCzIrLmdvb2ds",
            "ZS5wcm90b2J1Zi5DU1ZDTXNnX1NvdW5kcy5zb3VuZGRhdGFfdBqHAwoLc291",
            "bmRkYXRhX3QSEAoIb3JpZ2luX3gYASABKBESEAoIb3JpZ2luX3kYAiABKBES",
            "EAoIb3JpZ2luX3oYAyABKBESDgoGdm9sdW1lGAQgASgNEhMKC2RlbGF5X3Zh",
            "bHVlGAUgASgCEhcKD3NlcXVlbmNlX251bWJlchgGIAEoBRIUCgxlbnRpdHlf",
            "aW5kZXgYByABKAUSDwoHY2hhbm5lbBgIIAEoBRINCgVwaXRjaBgJIAEoBRIN",
            "CgVmbGFncxgKIAEoBRIRCglzb3VuZF9udW0YCyABKA0SGAoQc291bmRfbnVt",
            "X2hhbmRsZRgMIAEoBxIWCg5zcGVha2VyX2VudGl0eRgNIAEoBRITCgtyYW5k",
            "b21fc2VlZBgOIAEoBRITCgtzb3VuZF9sZXZlbBgPIAEoBRITCgtpc19zZW50",
            "ZW5jZRgQIAEoCBISCgppc19hbWJpZW50GBEgASgIEgwKBGd1aWQYEiABKA0S",
            "GQoRc291bmRfcmVzb3VyY2VfaWQYEyABKAYiXwoZQ1NWQ01zZ19VcGRhdGVT",
            "dHJpbmdUYWJsZRIQCgh0YWJsZV9pZBgBIAEoBRIbChNudW1fY2hhbmdlZF9l",
            "bnRyaWVzGAIgASgFEhMKC3N0cmluZ19kYXRhGAMgASgMIlQKFkNTVkNNc2df",
            "RnVsbEZyYW1lU3BsaXQSDAoEdGljaxgBIAEoBRIPCgdzZWN0aW9uGAIgASgF",
            "Eg0KBXRvdGFsGAMgASgFEgwKBGRhdGEYBCABKAwimgEKEENTVkNNc2dfQlNQ",
            "RGVjYWwSKAoDcG9zGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkNNc2dWZWN0",
            "b3ISGwoTZGVjYWxfdGV4dHVyZV9pbmRleBgCIAEoBRIUCgxlbnRpdHlfaW5k",
            "ZXgYAyABKAUSEwoLbW9kZWxfaW5kZXgYBCABKAUSFAoMbG93X3ByaW9yaXR5",
            "GAUgASgIKkwKEVZvaWNlRGF0YUZvcm1hdF90EhoKFlZPSUNFREFUQV9GT1JN",
            "QVRfU1RFQU0QABIbChdWT0lDRURBVEFfRk9STUFUX0VOR0lORRABKkIKDlJl",
            "cXVlc3RQYXVzZV90EgwKCFJQX1BBVVNFEAASDgoKUlBfVU5QQVVTRRABEhIK",
            "DlJQX1RPR0dMRVBBVVNFEAJCEIABAKoCClByb3RvLkRvdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.Dota.NetworkbasetypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.VoiceDataFormat_t), typeof(global::Proto.Dota.RequestPause_t), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_ClientInfo), global::Proto.Dota.CCLCMsg_ClientInfo.Parser, new[]{ "SendTableCrc", "ServerCount", "IsHltv", "IsReplay", "FriendsId", "FriendsName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_Move), global::Proto.Dota.CCLCMsg_Move.Parser, new[]{ "NumBackupCommands", "NumNewCommands", "Data", "CommandNumber", "NumCommands" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgVoiceAudio), global::Proto.Dota.CMsgVoiceAudio.Parser, new[]{ "Format", "VoiceData", "SequenceBytes", "SectionNumber", "SampleRate", "UncompressedSampleOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_VoiceData), global::Proto.Dota.CCLCMsg_VoiceData.Parser, new[]{ "Audio", "Xuid", "Tick" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_BaselineAck), global::Proto.Dota.CCLCMsg_BaselineAck.Parser, new[]{ "BaselineTick", "BaselineNr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_ListenEvents), global::Proto.Dota.CCLCMsg_ListenEvents.Parser, new[]{ "EventMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_RespondCvarValue), global::Proto.Dota.CCLCMsg_RespondCvarValue.Parser, new[]{ "Cookie", "StatusCode", "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_FileCRCCheck), global::Proto.Dota.CCLCMsg_FileCRCCheck.Parser, new[]{ "CodePath", "Path", "CodeFilename", "Filename", "Crc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_LoadingProgress), global::Proto.Dota.CCLCMsg_LoadingProgress.Parser, new[]{ "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_SplitPlayerConnect), global::Proto.Dota.CCLCMsg_SplitPlayerConnect.Parser, new[]{ "Playername" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_ClientMessage), global::Proto.Dota.CCLCMsg_ClientMessage.Parser, new[]{ "MsgType", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_SplitPlayerDisconnect), global::Proto.Dota.CCLCMsg_SplitPlayerDisconnect.Parser, new[]{ "Slot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_ServerStatus), global::Proto.Dota.CCLCMsg_ServerStatus.Parser, new[]{ "Simplified" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_ServerPing), global::Proto.Dota.CCLCMsg_ServerPing.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_RequestPause), global::Proto.Dota.CCLCMsg_RequestPause.Parser, new[]{ "PauseType", "PauseGroup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CCLCMsg_CmdKeyValues), global::Proto.Dota.CCLCMsg_CmdKeyValues.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_GameEventList), global::Proto.Dota.CSVCMsg_GameEventList.Parser, new[]{ "Descriptors" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_GameEventList.Types.key_t), global::Proto.Dota.CSVCMsg_GameEventList.Types.key_t.Parser, new[]{ "Type", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_GameEventList.Types.descriptor_t), global::Proto.Dota.CSVCMsg_GameEventList.Types.descriptor_t.Parser, new[]{ "Eventid", "Name", "Keys" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_PacketEntities), global::Proto.Dota.CSVCMsg_PacketEntities.Parser, new[]{ "MaxEntries", "UpdatedEntries", "IsDelta", "UpdateBaseline", "Baseline", "DeltaFrom", "EntityData", "PendingFullFrame", "ActiveSpawngroupHandle", "MaxSpawngroupCreationsequence", "LastCmdNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_ServerInfo), global::Proto.Dota.CSVCMsg_ServerInfo.Parser, new[]{ "Protocol", "ServerCount", "IsDedicated", "IsHltv", "IsReplay", "COs", "MapCrc", "ClientCrc", "StringTableCrc", "MaxClients", "MaxClasses", "PlayerSlot", "TickInterval", "GameDir", "MapName", "SkyName", "HostName", "AddonName", "GameSessionConfig", "GameSessionManifest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_ClassInfo), global::Proto.Dota.CSVCMsg_ClassInfo.Parser, new[]{ "CreateOnClient", "Classes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_ClassInfo.Types.class_t), global::Proto.Dota.CSVCMsg_ClassInfo.Types.class_t.Parser, new[]{ "ClassId", "DataTableName", "ClassName" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_SetView), global::Proto.Dota.CSVCMsg_SetView.Parser, new[]{ "EntityIndex", "Slot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_Print), global::Proto.Dota.CSVCMsg_Print.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_VoiceInit), global::Proto.Dota.CSVCMsg_VoiceInit.Parser, new[]{ "Quality", "Codec", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_Sounds), global::Proto.Dota.CSVCMsg_Sounds.Parser, new[]{ "ReliableSound", "Sounds" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_Sounds.Types.sounddata_t), global::Proto.Dota.CSVCMsg_Sounds.Types.sounddata_t.Parser, new[]{ "OriginX", "OriginY", "OriginZ", "Volume", "DelayValue", "SequenceNumber", "EntityIndex", "Channel", "Pitch", "Flags", "SoundNum", "SoundNumHandle", "SpeakerEntity", "RandomSeed", "SoundLevel", "IsSentence", "IsAmbient", "Guid", "SoundResourceId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_UpdateStringTable), global::Proto.Dota.CSVCMsg_UpdateStringTable.Parser, new[]{ "TableId", "NumChangedEntries", "StringData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_FullFrameSplit), global::Proto.Dota.CSVCMsg_FullFrameSplit.Parser, new[]{ "Tick", "Section", "Total", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_BSPDecal), global::Proto.Dota.CSVCMsg_BSPDecal.Parser, new[]{ "Pos", "DecalTextureIndex", "EntityIndex", "ModelIndex", "LowPriority" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum VoiceDataFormat_t {
    [pbr::OriginalName("VOICEDATA_FORMAT_STEAM")] VoicedataFormatSteam = 0,
    [pbr::OriginalName("VOICEDATA_FORMAT_ENGINE")] VoicedataFormatEngine = 1,
  }

  public enum RequestPause_t {
    [pbr::OriginalName("RP_PAUSE")] RpPause = 0,
    [pbr::OriginalName("RP_UNPAUSE")] RpUnpause = 1,
    [pbr::OriginalName("RP_TOGGLEPAUSE")] RpTogglepause = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CCLCMsg_ClientInfo : pb::IMessage<CCLCMsg_ClientInfo> {
    private static readonly pb::MessageParser<CCLCMsg_ClientInfo> _parser = new pb::MessageParser<CCLCMsg_ClientInfo>(() => new CCLCMsg_ClientInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_ClientInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ClientInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ClientInfo(CCLCMsg_ClientInfo other) : this() {
      sendTableCrc_ = other.sendTableCrc_;
      serverCount_ = other.serverCount_;
      isHltv_ = other.isHltv_;
      isReplay_ = other.isReplay_;
      friendsId_ = other.friendsId_;
      friendsName_ = other.friendsName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ClientInfo Clone() {
      return new CCLCMsg_ClientInfo(this);
    }

    /// <summary>Field number for the "send_table_crc" field.</summary>
    public const int SendTableCrcFieldNumber = 1;
    private uint sendTableCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendTableCrc {
      get { return sendTableCrc_; }
      set {
        sendTableCrc_ = value;
      }
    }

    /// <summary>Field number for the "server_count" field.</summary>
    public const int ServerCountFieldNumber = 2;
    private uint serverCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerCount {
      get { return serverCount_; }
      set {
        serverCount_ = value;
      }
    }

    /// <summary>Field number for the "is_hltv" field.</summary>
    public const int IsHltvFieldNumber = 3;
    private bool isHltv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHltv {
      get { return isHltv_; }
      set {
        isHltv_ = value;
      }
    }

    /// <summary>Field number for the "is_replay" field.</summary>
    public const int IsReplayFieldNumber = 4;
    private bool isReplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReplay {
      get { return isReplay_; }
      set {
        isReplay_ = value;
      }
    }

    /// <summary>Field number for the "friends_id" field.</summary>
    public const int FriendsIdFieldNumber = 5;
    private uint friendsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendsId {
      get { return friendsId_; }
      set {
        friendsId_ = value;
      }
    }

    /// <summary>Field number for the "friends_name" field.</summary>
    public const int FriendsNameFieldNumber = 6;
    private string friendsName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendsName {
      get { return friendsName_; }
      set {
        friendsName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_ClientInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_ClientInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendTableCrc != other.SendTableCrc) return false;
      if (ServerCount != other.ServerCount) return false;
      if (IsHltv != other.IsHltv) return false;
      if (IsReplay != other.IsReplay) return false;
      if (FriendsId != other.FriendsId) return false;
      if (FriendsName != other.FriendsName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SendTableCrc != 0) hash ^= SendTableCrc.GetHashCode();
      if (ServerCount != 0) hash ^= ServerCount.GetHashCode();
      if (IsHltv != false) hash ^= IsHltv.GetHashCode();
      if (IsReplay != false) hash ^= IsReplay.GetHashCode();
      if (FriendsId != 0) hash ^= FriendsId.GetHashCode();
      if (FriendsName.Length != 0) hash ^= FriendsName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SendTableCrc != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(SendTableCrc);
      }
      if (ServerCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerCount);
      }
      if (IsHltv != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsHltv);
      }
      if (IsReplay != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsReplay);
      }
      if (FriendsId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FriendsId);
      }
      if (FriendsName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FriendsName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SendTableCrc != 0) {
        size += 1 + 4;
      }
      if (ServerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerCount);
      }
      if (IsHltv != false) {
        size += 1 + 1;
      }
      if (IsReplay != false) {
        size += 1 + 1;
      }
      if (FriendsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendsId);
      }
      if (FriendsName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendsName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_ClientInfo other) {
      if (other == null) {
        return;
      }
      if (other.SendTableCrc != 0) {
        SendTableCrc = other.SendTableCrc;
      }
      if (other.ServerCount != 0) {
        ServerCount = other.ServerCount;
      }
      if (other.IsHltv != false) {
        IsHltv = other.IsHltv;
      }
      if (other.IsReplay != false) {
        IsReplay = other.IsReplay;
      }
      if (other.FriendsId != 0) {
        FriendsId = other.FriendsId;
      }
      if (other.FriendsName.Length != 0) {
        FriendsName = other.FriendsName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SendTableCrc = input.ReadFixed32();
            break;
          }
          case 16: {
            ServerCount = input.ReadUInt32();
            break;
          }
          case 24: {
            IsHltv = input.ReadBool();
            break;
          }
          case 32: {
            IsReplay = input.ReadBool();
            break;
          }
          case 40: {
            FriendsId = input.ReadUInt32();
            break;
          }
          case 50: {
            FriendsName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_Move : pb::IMessage<CCLCMsg_Move> {
    private static readonly pb::MessageParser<CCLCMsg_Move> _parser = new pb::MessageParser<CCLCMsg_Move>(() => new CCLCMsg_Move());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_Move(CCLCMsg_Move other) : this() {
      numBackupCommands_ = other.numBackupCommands_;
      numNewCommands_ = other.numNewCommands_;
      data_ = other.data_;
      commandNumber_ = other.commandNumber_;
      numCommands_ = other.numCommands_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_Move Clone() {
      return new CCLCMsg_Move(this);
    }

    /// <summary>Field number for the "num_backup_commands" field.</summary>
    public const int NumBackupCommandsFieldNumber = 1;
    private uint numBackupCommands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumBackupCommands {
      get { return numBackupCommands_; }
      set {
        numBackupCommands_ = value;
      }
    }

    /// <summary>Field number for the "num_new_commands" field.</summary>
    public const int NumNewCommandsFieldNumber = 2;
    private uint numNewCommands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumNewCommands {
      get { return numNewCommands_; }
      set {
        numNewCommands_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_number" field.</summary>
    public const int CommandNumberFieldNumber = 4;
    private uint commandNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CommandNumber {
      get { return commandNumber_; }
      set {
        commandNumber_ = value;
      }
    }

    /// <summary>Field number for the "num_commands" field.</summary>
    public const int NumCommandsFieldNumber = 5;
    private uint numCommands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumCommands {
      get { return numCommands_; }
      set {
        numCommands_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumBackupCommands != other.NumBackupCommands) return false;
      if (NumNewCommands != other.NumNewCommands) return false;
      if (Data != other.Data) return false;
      if (CommandNumber != other.CommandNumber) return false;
      if (NumCommands != other.NumCommands) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumBackupCommands != 0) hash ^= NumBackupCommands.GetHashCode();
      if (NumNewCommands != 0) hash ^= NumNewCommands.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (CommandNumber != 0) hash ^= CommandNumber.GetHashCode();
      if (NumCommands != 0) hash ^= NumCommands.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumBackupCommands != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumBackupCommands);
      }
      if (NumNewCommands != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumNewCommands);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (CommandNumber != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CommandNumber);
      }
      if (NumCommands != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumCommands);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumBackupCommands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBackupCommands);
      }
      if (NumNewCommands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumNewCommands);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (CommandNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CommandNumber);
      }
      if (NumCommands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCommands);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_Move other) {
      if (other == null) {
        return;
      }
      if (other.NumBackupCommands != 0) {
        NumBackupCommands = other.NumBackupCommands;
      }
      if (other.NumNewCommands != 0) {
        NumNewCommands = other.NumNewCommands;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.CommandNumber != 0) {
        CommandNumber = other.CommandNumber;
      }
      if (other.NumCommands != 0) {
        NumCommands = other.NumCommands;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumBackupCommands = input.ReadUInt32();
            break;
          }
          case 16: {
            NumNewCommands = input.ReadUInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            CommandNumber = input.ReadUInt32();
            break;
          }
          case 40: {
            NumCommands = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgVoiceAudio : pb::IMessage<CMsgVoiceAudio> {
    private static readonly pb::MessageParser<CMsgVoiceAudio> _parser = new pb::MessageParser<CMsgVoiceAudio>(() => new CMsgVoiceAudio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgVoiceAudio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVoiceAudio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVoiceAudio(CMsgVoiceAudio other) : this() {
      format_ = other.format_;
      voiceData_ = other.voiceData_;
      sequenceBytes_ = other.sequenceBytes_;
      sectionNumber_ = other.sectionNumber_;
      sampleRate_ = other.sampleRate_;
      uncompressedSampleOffset_ = other.uncompressedSampleOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVoiceAudio Clone() {
      return new CMsgVoiceAudio(this);
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 1;
    private global::Proto.Dota.VoiceDataFormat_t format_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.VoiceDataFormat_t Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "voice_data" field.</summary>
    public const int VoiceDataFieldNumber = 2;
    private pb::ByteString voiceData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VoiceData {
      get { return voiceData_; }
      set {
        voiceData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_bytes" field.</summary>
    public const int SequenceBytesFieldNumber = 3;
    private int sequenceBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceBytes {
      get { return sequenceBytes_; }
      set {
        sequenceBytes_ = value;
      }
    }

    /// <summary>Field number for the "section_number" field.</summary>
    public const int SectionNumberFieldNumber = 4;
    private uint sectionNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionNumber {
      get { return sectionNumber_; }
      set {
        sectionNumber_ = value;
      }
    }

    /// <summary>Field number for the "sample_rate" field.</summary>
    public const int SampleRateFieldNumber = 5;
    private uint sampleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    /// <summary>Field number for the "uncompressed_sample_offset" field.</summary>
    public const int UncompressedSampleOffsetFieldNumber = 6;
    private uint uncompressedSampleOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UncompressedSampleOffset {
      get { return uncompressedSampleOffset_; }
      set {
        uncompressedSampleOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgVoiceAudio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgVoiceAudio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Format != other.Format) return false;
      if (VoiceData != other.VoiceData) return false;
      if (SequenceBytes != other.SequenceBytes) return false;
      if (SectionNumber != other.SectionNumber) return false;
      if (SampleRate != other.SampleRate) return false;
      if (UncompressedSampleOffset != other.UncompressedSampleOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Format != 0) hash ^= Format.GetHashCode();
      if (VoiceData.Length != 0) hash ^= VoiceData.GetHashCode();
      if (SequenceBytes != 0) hash ^= SequenceBytes.GetHashCode();
      if (SectionNumber != 0) hash ^= SectionNumber.GetHashCode();
      if (SampleRate != 0) hash ^= SampleRate.GetHashCode();
      if (UncompressedSampleOffset != 0) hash ^= UncompressedSampleOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Format != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Format);
      }
      if (VoiceData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(VoiceData);
      }
      if (SequenceBytes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SequenceBytes);
      }
      if (SectionNumber != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SectionNumber);
      }
      if (SampleRate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SampleRate);
      }
      if (UncompressedSampleOffset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UncompressedSampleOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (VoiceData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VoiceData);
      }
      if (SequenceBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceBytes);
      }
      if (SectionNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionNumber);
      }
      if (SampleRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleRate);
      }
      if (UncompressedSampleOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UncompressedSampleOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgVoiceAudio other) {
      if (other == null) {
        return;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.VoiceData.Length != 0) {
        VoiceData = other.VoiceData;
      }
      if (other.SequenceBytes != 0) {
        SequenceBytes = other.SequenceBytes;
      }
      if (other.SectionNumber != 0) {
        SectionNumber = other.SectionNumber;
      }
      if (other.SampleRate != 0) {
        SampleRate = other.SampleRate;
      }
      if (other.UncompressedSampleOffset != 0) {
        UncompressedSampleOffset = other.UncompressedSampleOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            format_ = (global::Proto.Dota.VoiceDataFormat_t) input.ReadEnum();
            break;
          }
          case 18: {
            VoiceData = input.ReadBytes();
            break;
          }
          case 24: {
            SequenceBytes = input.ReadInt32();
            break;
          }
          case 32: {
            SectionNumber = input.ReadUInt32();
            break;
          }
          case 40: {
            SampleRate = input.ReadUInt32();
            break;
          }
          case 48: {
            UncompressedSampleOffset = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_VoiceData : pb::IMessage<CCLCMsg_VoiceData> {
    private static readonly pb::MessageParser<CCLCMsg_VoiceData> _parser = new pb::MessageParser<CCLCMsg_VoiceData>(() => new CCLCMsg_VoiceData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_VoiceData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_VoiceData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_VoiceData(CCLCMsg_VoiceData other) : this() {
      audio_ = other.audio_ != null ? other.audio_.Clone() : null;
      xuid_ = other.xuid_;
      tick_ = other.tick_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_VoiceData Clone() {
      return new CCLCMsg_VoiceData(this);
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 1;
    private global::Proto.Dota.CMsgVoiceAudio audio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVoiceAudio Audio {
      get { return audio_; }
      set {
        audio_ = value;
      }
    }

    /// <summary>Field number for the "xuid" field.</summary>
    public const int XuidFieldNumber = 2;
    private ulong xuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Xuid {
      get { return xuid_; }
      set {
        xuid_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 3;
    private uint tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_VoiceData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_VoiceData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Audio, other.Audio)) return false;
      if (Xuid != other.Xuid) return false;
      if (Tick != other.Tick) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (audio_ != null) hash ^= Audio.GetHashCode();
      if (Xuid != 0UL) hash ^= Xuid.GetHashCode();
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (audio_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Audio);
      }
      if (Xuid != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(Xuid);
      }
      if (Tick != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Tick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (audio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
      }
      if (Xuid != 0UL) {
        size += 1 + 8;
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tick);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_VoiceData other) {
      if (other == null) {
        return;
      }
      if (other.audio_ != null) {
        if (audio_ == null) {
          audio_ = new global::Proto.Dota.CMsgVoiceAudio();
        }
        Audio.MergeFrom(other.Audio);
      }
      if (other.Xuid != 0UL) {
        Xuid = other.Xuid;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (audio_ == null) {
              audio_ = new global::Proto.Dota.CMsgVoiceAudio();
            }
            input.ReadMessage(audio_);
            break;
          }
          case 17: {
            Xuid = input.ReadFixed64();
            break;
          }
          case 24: {
            Tick = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_BaselineAck : pb::IMessage<CCLCMsg_BaselineAck> {
    private static readonly pb::MessageParser<CCLCMsg_BaselineAck> _parser = new pb::MessageParser<CCLCMsg_BaselineAck>(() => new CCLCMsg_BaselineAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_BaselineAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_BaselineAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_BaselineAck(CCLCMsg_BaselineAck other) : this() {
      baselineTick_ = other.baselineTick_;
      baselineNr_ = other.baselineNr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_BaselineAck Clone() {
      return new CCLCMsg_BaselineAck(this);
    }

    /// <summary>Field number for the "baseline_tick" field.</summary>
    public const int BaselineTickFieldNumber = 1;
    private int baselineTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaselineTick {
      get { return baselineTick_; }
      set {
        baselineTick_ = value;
      }
    }

    /// <summary>Field number for the "baseline_nr" field.</summary>
    public const int BaselineNrFieldNumber = 2;
    private int baselineNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaselineNr {
      get { return baselineNr_; }
      set {
        baselineNr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_BaselineAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_BaselineAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaselineTick != other.BaselineTick) return false;
      if (BaselineNr != other.BaselineNr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaselineTick != 0) hash ^= BaselineTick.GetHashCode();
      if (BaselineNr != 0) hash ^= BaselineNr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaselineTick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BaselineTick);
      }
      if (BaselineNr != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BaselineNr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaselineTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaselineTick);
      }
      if (BaselineNr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaselineNr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_BaselineAck other) {
      if (other == null) {
        return;
      }
      if (other.BaselineTick != 0) {
        BaselineTick = other.BaselineTick;
      }
      if (other.BaselineNr != 0) {
        BaselineNr = other.BaselineNr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BaselineTick = input.ReadInt32();
            break;
          }
          case 16: {
            BaselineNr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_ListenEvents : pb::IMessage<CCLCMsg_ListenEvents> {
    private static readonly pb::MessageParser<CCLCMsg_ListenEvents> _parser = new pb::MessageParser<CCLCMsg_ListenEvents>(() => new CCLCMsg_ListenEvents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_ListenEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ListenEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ListenEvents(CCLCMsg_ListenEvents other) : this() {
      eventMask_ = other.eventMask_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ListenEvents Clone() {
      return new CCLCMsg_ListenEvents(this);
    }

    /// <summary>Field number for the "event_mask" field.</summary>
    public const int EventMaskFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_eventMask_codec
        = pb::FieldCodec.ForFixed32(10);
    private readonly pbc::RepeatedField<uint> eventMask_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EventMask {
      get { return eventMask_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_ListenEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_ListenEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!eventMask_.Equals(other.eventMask_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= eventMask_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      eventMask_.WriteTo(output, _repeated_eventMask_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMask_.CalculateSize(_repeated_eventMask_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_ListenEvents other) {
      if (other == null) {
        return;
      }
      eventMask_.Add(other.eventMask_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            eventMask_.AddEntriesFrom(input, _repeated_eventMask_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_RespondCvarValue : pb::IMessage<CCLCMsg_RespondCvarValue> {
    private static readonly pb::MessageParser<CCLCMsg_RespondCvarValue> _parser = new pb::MessageParser<CCLCMsg_RespondCvarValue>(() => new CCLCMsg_RespondCvarValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_RespondCvarValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_RespondCvarValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_RespondCvarValue(CCLCMsg_RespondCvarValue other) : this() {
      cookie_ = other.cookie_;
      statusCode_ = other.statusCode_;
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_RespondCvarValue Clone() {
      return new CCLCMsg_RespondCvarValue(this);
    }

    /// <summary>Field number for the "cookie" field.</summary>
    public const int CookieFieldNumber = 1;
    private int cookie_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cookie {
      get { return cookie_; }
      set {
        cookie_ = value;
      }
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 2;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_RespondCvarValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_RespondCvarValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cookie != other.Cookie) return false;
      if (StatusCode != other.StatusCode) return false;
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cookie != 0) hash ^= Cookie.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cookie != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cookie);
      }
      if (StatusCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StatusCode);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cookie != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cookie);
      }
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_RespondCvarValue other) {
      if (other == null) {
        return;
      }
      if (other.Cookie != 0) {
        Cookie = other.Cookie;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cookie = input.ReadInt32();
            break;
          }
          case 16: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_FileCRCCheck : pb::IMessage<CCLCMsg_FileCRCCheck> {
    private static readonly pb::MessageParser<CCLCMsg_FileCRCCheck> _parser = new pb::MessageParser<CCLCMsg_FileCRCCheck>(() => new CCLCMsg_FileCRCCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_FileCRCCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_FileCRCCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_FileCRCCheck(CCLCMsg_FileCRCCheck other) : this() {
      codePath_ = other.codePath_;
      path_ = other.path_;
      codeFilename_ = other.codeFilename_;
      filename_ = other.filename_;
      crc_ = other.crc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_FileCRCCheck Clone() {
      return new CCLCMsg_FileCRCCheck(this);
    }

    /// <summary>Field number for the "code_path" field.</summary>
    public const int CodePathFieldNumber = 1;
    private int codePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CodePath {
      get { return codePath_; }
      set {
        codePath_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code_filename" field.</summary>
    public const int CodeFilenameFieldNumber = 3;
    private int codeFilename_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CodeFilename {
      get { return codeFilename_; }
      set {
        codeFilename_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 4;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crc" field.</summary>
    public const int CrcFieldNumber = 5;
    private uint crc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Crc {
      get { return crc_; }
      set {
        crc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_FileCRCCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_FileCRCCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CodePath != other.CodePath) return false;
      if (Path != other.Path) return false;
      if (CodeFilename != other.CodeFilename) return false;
      if (Filename != other.Filename) return false;
      if (Crc != other.Crc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CodePath != 0) hash ^= CodePath.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (CodeFilename != 0) hash ^= CodeFilename.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Crc != 0) hash ^= Crc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CodePath != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CodePath);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (CodeFilename != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CodeFilename);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filename);
      }
      if (Crc != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(Crc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CodePath != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodePath);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (CodeFilename != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeFilename);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Crc != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_FileCRCCheck other) {
      if (other == null) {
        return;
      }
      if (other.CodePath != 0) {
        CodePath = other.CodePath;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.CodeFilename != 0) {
        CodeFilename = other.CodeFilename;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Crc != 0) {
        Crc = other.Crc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CodePath = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 24: {
            CodeFilename = input.ReadInt32();
            break;
          }
          case 34: {
            Filename = input.ReadString();
            break;
          }
          case 45: {
            Crc = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_LoadingProgress : pb::IMessage<CCLCMsg_LoadingProgress> {
    private static readonly pb::MessageParser<CCLCMsg_LoadingProgress> _parser = new pb::MessageParser<CCLCMsg_LoadingProgress>(() => new CCLCMsg_LoadingProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_LoadingProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_LoadingProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_LoadingProgress(CCLCMsg_LoadingProgress other) : this() {
      progress_ = other.progress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_LoadingProgress Clone() {
      return new CCLCMsg_LoadingProgress(this);
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_LoadingProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_LoadingProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_LoadingProgress other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_SplitPlayerConnect : pb::IMessage<CCLCMsg_SplitPlayerConnect> {
    private static readonly pb::MessageParser<CCLCMsg_SplitPlayerConnect> _parser = new pb::MessageParser<CCLCMsg_SplitPlayerConnect>(() => new CCLCMsg_SplitPlayerConnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_SplitPlayerConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_SplitPlayerConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_SplitPlayerConnect(CCLCMsg_SplitPlayerConnect other) : this() {
      playername_ = other.playername_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_SplitPlayerConnect Clone() {
      return new CCLCMsg_SplitPlayerConnect(this);
    }

    /// <summary>Field number for the "playername" field.</summary>
    public const int PlayernameFieldNumber = 1;
    private string playername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Playername {
      get { return playername_; }
      set {
        playername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_SplitPlayerConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_SplitPlayerConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Playername != other.Playername) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Playername.Length != 0) hash ^= Playername.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Playername.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Playername);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Playername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Playername);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_SplitPlayerConnect other) {
      if (other == null) {
        return;
      }
      if (other.Playername.Length != 0) {
        Playername = other.Playername;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Playername = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_ClientMessage : pb::IMessage<CCLCMsg_ClientMessage> {
    private static readonly pb::MessageParser<CCLCMsg_ClientMessage> _parser = new pb::MessageParser<CCLCMsg_ClientMessage>(() => new CCLCMsg_ClientMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_ClientMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ClientMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ClientMessage(CCLCMsg_ClientMessage other) : this() {
      msgType_ = other.msgType_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ClientMessage Clone() {
      return new CCLCMsg_ClientMessage(this);
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private int msgType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_ClientMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_ClientMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MsgType);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_ClientMessage other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgType = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_SplitPlayerDisconnect : pb::IMessage<CCLCMsg_SplitPlayerDisconnect> {
    private static readonly pb::MessageParser<CCLCMsg_SplitPlayerDisconnect> _parser = new pb::MessageParser<CCLCMsg_SplitPlayerDisconnect>(() => new CCLCMsg_SplitPlayerDisconnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_SplitPlayerDisconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_SplitPlayerDisconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_SplitPlayerDisconnect(CCLCMsg_SplitPlayerDisconnect other) : this() {
      slot_ = other.slot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_SplitPlayerDisconnect Clone() {
      return new CCLCMsg_SplitPlayerDisconnect(this);
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_SplitPlayerDisconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_SplitPlayerDisconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slot != other.Slot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_SplitPlayerDisconnect other) {
      if (other == null) {
        return;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Slot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_ServerStatus : pb::IMessage<CCLCMsg_ServerStatus> {
    private static readonly pb::MessageParser<CCLCMsg_ServerStatus> _parser = new pb::MessageParser<CCLCMsg_ServerStatus>(() => new CCLCMsg_ServerStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_ServerStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ServerStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ServerStatus(CCLCMsg_ServerStatus other) : this() {
      simplified_ = other.simplified_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ServerStatus Clone() {
      return new CCLCMsg_ServerStatus(this);
    }

    /// <summary>Field number for the "simplified" field.</summary>
    public const int SimplifiedFieldNumber = 1;
    private bool simplified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Simplified {
      get { return simplified_; }
      set {
        simplified_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_ServerStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_ServerStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Simplified != other.Simplified) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Simplified != false) hash ^= Simplified.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Simplified != false) {
        output.WriteRawTag(8);
        output.WriteBool(Simplified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Simplified != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_ServerStatus other) {
      if (other == null) {
        return;
      }
      if (other.Simplified != false) {
        Simplified = other.Simplified;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Simplified = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_ServerPing : pb::IMessage<CCLCMsg_ServerPing> {
    private static readonly pb::MessageParser<CCLCMsg_ServerPing> _parser = new pb::MessageParser<CCLCMsg_ServerPing>(() => new CCLCMsg_ServerPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_ServerPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ServerPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ServerPing(CCLCMsg_ServerPing other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_ServerPing Clone() {
      return new CCLCMsg_ServerPing(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_ServerPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_ServerPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_ServerPing other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CCLCMsg_RequestPause : pb::IMessage<CCLCMsg_RequestPause> {
    private static readonly pb::MessageParser<CCLCMsg_RequestPause> _parser = new pb::MessageParser<CCLCMsg_RequestPause>(() => new CCLCMsg_RequestPause());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_RequestPause> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_RequestPause() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_RequestPause(CCLCMsg_RequestPause other) : this() {
      pauseType_ = other.pauseType_;
      pauseGroup_ = other.pauseGroup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_RequestPause Clone() {
      return new CCLCMsg_RequestPause(this);
    }

    /// <summary>Field number for the "pause_type" field.</summary>
    public const int PauseTypeFieldNumber = 1;
    private global::Proto.Dota.RequestPause_t pauseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.RequestPause_t PauseType {
      get { return pauseType_; }
      set {
        pauseType_ = value;
      }
    }

    /// <summary>Field number for the "pause_group" field.</summary>
    public const int PauseGroupFieldNumber = 2;
    private int pauseGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PauseGroup {
      get { return pauseGroup_; }
      set {
        pauseGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_RequestPause);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_RequestPause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PauseType != other.PauseType) return false;
      if (PauseGroup != other.PauseGroup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PauseType != 0) hash ^= PauseType.GetHashCode();
      if (PauseGroup != 0) hash ^= PauseGroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PauseType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PauseType);
      }
      if (PauseGroup != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PauseGroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PauseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseType);
      }
      if (PauseGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PauseGroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_RequestPause other) {
      if (other == null) {
        return;
      }
      if (other.PauseType != 0) {
        PauseType = other.PauseType;
      }
      if (other.PauseGroup != 0) {
        PauseGroup = other.PauseGroup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pauseType_ = (global::Proto.Dota.RequestPause_t) input.ReadEnum();
            break;
          }
          case 16: {
            PauseGroup = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CCLCMsg_CmdKeyValues : pb::IMessage<CCLCMsg_CmdKeyValues> {
    private static readonly pb::MessageParser<CCLCMsg_CmdKeyValues> _parser = new pb::MessageParser<CCLCMsg_CmdKeyValues>(() => new CCLCMsg_CmdKeyValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCLCMsg_CmdKeyValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_CmdKeyValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_CmdKeyValues(CCLCMsg_CmdKeyValues other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCLCMsg_CmdKeyValues Clone() {
      return new CCLCMsg_CmdKeyValues(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCLCMsg_CmdKeyValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCLCMsg_CmdKeyValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCLCMsg_CmdKeyValues other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_GameEventList : pb::IMessage<CSVCMsg_GameEventList> {
    private static readonly pb::MessageParser<CSVCMsg_GameEventList> _parser = new pb::MessageParser<CSVCMsg_GameEventList>(() => new CSVCMsg_GameEventList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_GameEventList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameEventList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameEventList(CSVCMsg_GameEventList other) : this() {
      descriptors_ = other.descriptors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameEventList Clone() {
      return new CSVCMsg_GameEventList(this);
    }

    /// <summary>Field number for the "descriptors" field.</summary>
    public const int DescriptorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CSVCMsg_GameEventList.Types.descriptor_t> _repeated_descriptors_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CSVCMsg_GameEventList.Types.descriptor_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEventList.Types.descriptor_t> descriptors_ = new pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEventList.Types.descriptor_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEventList.Types.descriptor_t> Descriptors {
      get { return descriptors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_GameEventList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_GameEventList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!descriptors_.Equals(other.descriptors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= descriptors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      descriptors_.WriteTo(output, _repeated_descriptors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += descriptors_.CalculateSize(_repeated_descriptors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_GameEventList other) {
      if (other == null) {
        return;
      }
      descriptors_.Add(other.descriptors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            descriptors_.AddEntriesFrom(input, _repeated_descriptors_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CSVCMsg_GameEventList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class key_t : pb::IMessage<key_t> {
        private static readonly pb::MessageParser<key_t> _parser = new pb::MessageParser<key_t>(() => new key_t());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<key_t> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CSVCMsg_GameEventList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public key_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public key_t(key_t other) : this() {
          type_ = other.type_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public key_t Clone() {
          return new key_t(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as key_t);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(key_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Type);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(key_t other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class descriptor_t : pb::IMessage<descriptor_t> {
        private static readonly pb::MessageParser<descriptor_t> _parser = new pb::MessageParser<descriptor_t>(() => new descriptor_t());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<descriptor_t> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CSVCMsg_GameEventList.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public descriptor_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public descriptor_t(descriptor_t other) : this() {
          eventid_ = other.eventid_;
          name_ = other.name_;
          keys_ = other.keys_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public descriptor_t Clone() {
          return new descriptor_t(this);
        }

        /// <summary>Field number for the "eventid" field.</summary>
        public const int EventidFieldNumber = 1;
        private int eventid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Eventid {
          get { return eventid_; }
          set {
            eventid_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "keys" field.</summary>
        public const int KeysFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Proto.Dota.CSVCMsg_GameEventList.Types.key_t> _repeated_keys_codec
            = pb::FieldCodec.ForMessage(26, global::Proto.Dota.CSVCMsg_GameEventList.Types.key_t.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEventList.Types.key_t> keys_ = new pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEventList.Types.key_t>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEventList.Types.key_t> Keys {
          get { return keys_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as descriptor_t);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(descriptor_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Eventid != other.Eventid) return false;
          if (Name != other.Name) return false;
          if(!keys_.Equals(other.keys_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Eventid != 0) hash ^= Eventid.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= keys_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Eventid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Eventid);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          keys_.WriteTo(output, _repeated_keys_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Eventid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eventid);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += keys_.CalculateSize(_repeated_keys_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(descriptor_t other) {
          if (other == null) {
            return;
          }
          if (other.Eventid != 0) {
            Eventid = other.Eventid;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          keys_.Add(other.keys_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Eventid = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                keys_.AddEntriesFrom(input, _repeated_keys_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CSVCMsg_PacketEntities : pb::IMessage<CSVCMsg_PacketEntities> {
    private static readonly pb::MessageParser<CSVCMsg_PacketEntities> _parser = new pb::MessageParser<CSVCMsg_PacketEntities>(() => new CSVCMsg_PacketEntities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_PacketEntities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_PacketEntities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_PacketEntities(CSVCMsg_PacketEntities other) : this() {
      maxEntries_ = other.maxEntries_;
      updatedEntries_ = other.updatedEntries_;
      isDelta_ = other.isDelta_;
      updateBaseline_ = other.updateBaseline_;
      baseline_ = other.baseline_;
      deltaFrom_ = other.deltaFrom_;
      entityData_ = other.entityData_;
      pendingFullFrame_ = other.pendingFullFrame_;
      activeSpawngroupHandle_ = other.activeSpawngroupHandle_;
      maxSpawngroupCreationsequence_ = other.maxSpawngroupCreationsequence_;
      lastCmdNumber_ = other.lastCmdNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_PacketEntities Clone() {
      return new CSVCMsg_PacketEntities(this);
    }

    /// <summary>Field number for the "max_entries" field.</summary>
    public const int MaxEntriesFieldNumber = 1;
    private int maxEntries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxEntries {
      get { return maxEntries_; }
      set {
        maxEntries_ = value;
      }
    }

    /// <summary>Field number for the "updated_entries" field.</summary>
    public const int UpdatedEntriesFieldNumber = 2;
    private int updatedEntries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdatedEntries {
      get { return updatedEntries_; }
      set {
        updatedEntries_ = value;
      }
    }

    /// <summary>Field number for the "is_delta" field.</summary>
    public const int IsDeltaFieldNumber = 3;
    private bool isDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDelta {
      get { return isDelta_; }
      set {
        isDelta_ = value;
      }
    }

    /// <summary>Field number for the "update_baseline" field.</summary>
    public const int UpdateBaselineFieldNumber = 4;
    private bool updateBaseline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateBaseline {
      get { return updateBaseline_; }
      set {
        updateBaseline_ = value;
      }
    }

    /// <summary>Field number for the "baseline" field.</summary>
    public const int BaselineFieldNumber = 5;
    private int baseline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Baseline {
      get { return baseline_; }
      set {
        baseline_ = value;
      }
    }

    /// <summary>Field number for the "delta_from" field.</summary>
    public const int DeltaFromFieldNumber = 6;
    private int deltaFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaFrom {
      get { return deltaFrom_; }
      set {
        deltaFrom_ = value;
      }
    }

    /// <summary>Field number for the "entity_data" field.</summary>
    public const int EntityDataFieldNumber = 7;
    private pb::ByteString entityData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EntityData {
      get { return entityData_; }
      set {
        entityData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending_full_frame" field.</summary>
    public const int PendingFullFrameFieldNumber = 8;
    private bool pendingFullFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PendingFullFrame {
      get { return pendingFullFrame_; }
      set {
        pendingFullFrame_ = value;
      }
    }

    /// <summary>Field number for the "active_spawngroup_handle" field.</summary>
    public const int ActiveSpawngroupHandleFieldNumber = 9;
    private uint activeSpawngroupHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveSpawngroupHandle {
      get { return activeSpawngroupHandle_; }
      set {
        activeSpawngroupHandle_ = value;
      }
    }

    /// <summary>Field number for the "max_spawngroup_creationsequence" field.</summary>
    public const int MaxSpawngroupCreationsequenceFieldNumber = 10;
    private uint maxSpawngroupCreationsequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpawngroupCreationsequence {
      get { return maxSpawngroupCreationsequence_; }
      set {
        maxSpawngroupCreationsequence_ = value;
      }
    }

    /// <summary>Field number for the "last_cmd_number" field.</summary>
    public const int LastCmdNumberFieldNumber = 11;
    private uint lastCmdNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastCmdNumber {
      get { return lastCmdNumber_; }
      set {
        lastCmdNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_PacketEntities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_PacketEntities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxEntries != other.MaxEntries) return false;
      if (UpdatedEntries != other.UpdatedEntries) return false;
      if (IsDelta != other.IsDelta) return false;
      if (UpdateBaseline != other.UpdateBaseline) return false;
      if (Baseline != other.Baseline) return false;
      if (DeltaFrom != other.DeltaFrom) return false;
      if (EntityData != other.EntityData) return false;
      if (PendingFullFrame != other.PendingFullFrame) return false;
      if (ActiveSpawngroupHandle != other.ActiveSpawngroupHandle) return false;
      if (MaxSpawngroupCreationsequence != other.MaxSpawngroupCreationsequence) return false;
      if (LastCmdNumber != other.LastCmdNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxEntries != 0) hash ^= MaxEntries.GetHashCode();
      if (UpdatedEntries != 0) hash ^= UpdatedEntries.GetHashCode();
      if (IsDelta != false) hash ^= IsDelta.GetHashCode();
      if (UpdateBaseline != false) hash ^= UpdateBaseline.GetHashCode();
      if (Baseline != 0) hash ^= Baseline.GetHashCode();
      if (DeltaFrom != 0) hash ^= DeltaFrom.GetHashCode();
      if (EntityData.Length != 0) hash ^= EntityData.GetHashCode();
      if (PendingFullFrame != false) hash ^= PendingFullFrame.GetHashCode();
      if (ActiveSpawngroupHandle != 0) hash ^= ActiveSpawngroupHandle.GetHashCode();
      if (MaxSpawngroupCreationsequence != 0) hash ^= MaxSpawngroupCreationsequence.GetHashCode();
      if (LastCmdNumber != 0) hash ^= LastCmdNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxEntries != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxEntries);
      }
      if (UpdatedEntries != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UpdatedEntries);
      }
      if (IsDelta != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDelta);
      }
      if (UpdateBaseline != false) {
        output.WriteRawTag(32);
        output.WriteBool(UpdateBaseline);
      }
      if (Baseline != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Baseline);
      }
      if (DeltaFrom != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeltaFrom);
      }
      if (EntityData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EntityData);
      }
      if (PendingFullFrame != false) {
        output.WriteRawTag(64);
        output.WriteBool(PendingFullFrame);
      }
      if (ActiveSpawngroupHandle != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ActiveSpawngroupHandle);
      }
      if (MaxSpawngroupCreationsequence != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaxSpawngroupCreationsequence);
      }
      if (LastCmdNumber != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(LastCmdNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxEntries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEntries);
      }
      if (UpdatedEntries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdatedEntries);
      }
      if (IsDelta != false) {
        size += 1 + 1;
      }
      if (UpdateBaseline != false) {
        size += 1 + 1;
      }
      if (Baseline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Baseline);
      }
      if (DeltaFrom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeltaFrom);
      }
      if (EntityData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EntityData);
      }
      if (PendingFullFrame != false) {
        size += 1 + 1;
      }
      if (ActiveSpawngroupHandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveSpawngroupHandle);
      }
      if (MaxSpawngroupCreationsequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpawngroupCreationsequence);
      }
      if (LastCmdNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastCmdNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_PacketEntities other) {
      if (other == null) {
        return;
      }
      if (other.MaxEntries != 0) {
        MaxEntries = other.MaxEntries;
      }
      if (other.UpdatedEntries != 0) {
        UpdatedEntries = other.UpdatedEntries;
      }
      if (other.IsDelta != false) {
        IsDelta = other.IsDelta;
      }
      if (other.UpdateBaseline != false) {
        UpdateBaseline = other.UpdateBaseline;
      }
      if (other.Baseline != 0) {
        Baseline = other.Baseline;
      }
      if (other.DeltaFrom != 0) {
        DeltaFrom = other.DeltaFrom;
      }
      if (other.EntityData.Length != 0) {
        EntityData = other.EntityData;
      }
      if (other.PendingFullFrame != false) {
        PendingFullFrame = other.PendingFullFrame;
      }
      if (other.ActiveSpawngroupHandle != 0) {
        ActiveSpawngroupHandle = other.ActiveSpawngroupHandle;
      }
      if (other.MaxSpawngroupCreationsequence != 0) {
        MaxSpawngroupCreationsequence = other.MaxSpawngroupCreationsequence;
      }
      if (other.LastCmdNumber != 0) {
        LastCmdNumber = other.LastCmdNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxEntries = input.ReadInt32();
            break;
          }
          case 16: {
            UpdatedEntries = input.ReadInt32();
            break;
          }
          case 24: {
            IsDelta = input.ReadBool();
            break;
          }
          case 32: {
            UpdateBaseline = input.ReadBool();
            break;
          }
          case 40: {
            Baseline = input.ReadInt32();
            break;
          }
          case 48: {
            DeltaFrom = input.ReadInt32();
            break;
          }
          case 58: {
            EntityData = input.ReadBytes();
            break;
          }
          case 64: {
            PendingFullFrame = input.ReadBool();
            break;
          }
          case 72: {
            ActiveSpawngroupHandle = input.ReadUInt32();
            break;
          }
          case 80: {
            MaxSpawngroupCreationsequence = input.ReadUInt32();
            break;
          }
          case 88: {
            LastCmdNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_ServerInfo : pb::IMessage<CSVCMsg_ServerInfo> {
    private static readonly pb::MessageParser<CSVCMsg_ServerInfo> _parser = new pb::MessageParser<CSVCMsg_ServerInfo>(() => new CSVCMsg_ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ServerInfo(CSVCMsg_ServerInfo other) : this() {
      protocol_ = other.protocol_;
      serverCount_ = other.serverCount_;
      isDedicated_ = other.isDedicated_;
      isHltv_ = other.isHltv_;
      isReplay_ = other.isReplay_;
      cOs_ = other.cOs_;
      mapCrc_ = other.mapCrc_;
      clientCrc_ = other.clientCrc_;
      stringTableCrc_ = other.stringTableCrc_;
      maxClients_ = other.maxClients_;
      maxClasses_ = other.maxClasses_;
      playerSlot_ = other.playerSlot_;
      tickInterval_ = other.tickInterval_;
      gameDir_ = other.gameDir_;
      mapName_ = other.mapName_;
      skyName_ = other.skyName_;
      hostName_ = other.hostName_;
      addonName_ = other.addonName_;
      gameSessionConfig_ = other.gameSessionConfig_ != null ? other.gameSessionConfig_.Clone() : null;
      gameSessionManifest_ = other.gameSessionManifest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ServerInfo Clone() {
      return new CSVCMsg_ServerInfo(this);
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 1;
    private int protocol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "server_count" field.</summary>
    public const int ServerCountFieldNumber = 2;
    private int serverCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerCount {
      get { return serverCount_; }
      set {
        serverCount_ = value;
      }
    }

    /// <summary>Field number for the "is_dedicated" field.</summary>
    public const int IsDedicatedFieldNumber = 3;
    private bool isDedicated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDedicated {
      get { return isDedicated_; }
      set {
        isDedicated_ = value;
      }
    }

    /// <summary>Field number for the "is_hltv" field.</summary>
    public const int IsHltvFieldNumber = 4;
    private bool isHltv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHltv {
      get { return isHltv_; }
      set {
        isHltv_ = value;
      }
    }

    /// <summary>Field number for the "is_replay" field.</summary>
    public const int IsReplayFieldNumber = 5;
    private bool isReplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReplay {
      get { return isReplay_; }
      set {
        isReplay_ = value;
      }
    }

    /// <summary>Field number for the "c_os" field.</summary>
    public const int COsFieldNumber = 6;
    private int cOs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int COs {
      get { return cOs_; }
      set {
        cOs_ = value;
      }
    }

    /// <summary>Field number for the "map_crc" field.</summary>
    public const int MapCrcFieldNumber = 7;
    private uint mapCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapCrc {
      get { return mapCrc_; }
      set {
        mapCrc_ = value;
      }
    }

    /// <summary>Field number for the "client_crc" field.</summary>
    public const int ClientCrcFieldNumber = 8;
    private uint clientCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientCrc {
      get { return clientCrc_; }
      set {
        clientCrc_ = value;
      }
    }

    /// <summary>Field number for the "string_table_crc" field.</summary>
    public const int StringTableCrcFieldNumber = 9;
    private uint stringTableCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StringTableCrc {
      get { return stringTableCrc_; }
      set {
        stringTableCrc_ = value;
      }
    }

    /// <summary>Field number for the "max_clients" field.</summary>
    public const int MaxClientsFieldNumber = 10;
    private int maxClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxClients {
      get { return maxClients_; }
      set {
        maxClients_ = value;
      }
    }

    /// <summary>Field number for the "max_classes" field.</summary>
    public const int MaxClassesFieldNumber = 11;
    private int maxClasses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxClasses {
      get { return maxClasses_; }
      set {
        maxClasses_ = value;
      }
    }

    /// <summary>Field number for the "player_slot" field.</summary>
    public const int PlayerSlotFieldNumber = 12;
    private int playerSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerSlot {
      get { return playerSlot_; }
      set {
        playerSlot_ = value;
      }
    }

    /// <summary>Field number for the "tick_interval" field.</summary>
    public const int TickIntervalFieldNumber = 13;
    private float tickInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TickInterval {
      get { return tickInterval_; }
      set {
        tickInterval_ = value;
      }
    }

    /// <summary>Field number for the "game_dir" field.</summary>
    public const int GameDirFieldNumber = 14;
    private string gameDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameDir {
      get { return gameDir_; }
      set {
        gameDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 15;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sky_name" field.</summary>
    public const int SkyNameFieldNumber = 16;
    private string skyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkyName {
      get { return skyName_; }
      set {
        skyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 17;
    private string hostName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addon_name" field.</summary>
    public const int AddonNameFieldNumber = 18;
    private string addonName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddonName {
      get { return addonName_; }
      set {
        addonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_session_config" field.</summary>
    public const int GameSessionConfigFieldNumber = 19;
    private global::Proto.Dota.CSVCMsg_GameSessionConfiguration gameSessionConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CSVCMsg_GameSessionConfiguration GameSessionConfig {
      get { return gameSessionConfig_; }
      set {
        gameSessionConfig_ = value;
      }
    }

    /// <summary>Field number for the "game_session_manifest" field.</summary>
    public const int GameSessionManifestFieldNumber = 20;
    private pb::ByteString gameSessionManifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GameSessionManifest {
      get { return gameSessionManifest_; }
      set {
        gameSessionManifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Protocol != other.Protocol) return false;
      if (ServerCount != other.ServerCount) return false;
      if (IsDedicated != other.IsDedicated) return false;
      if (IsHltv != other.IsHltv) return false;
      if (IsReplay != other.IsReplay) return false;
      if (COs != other.COs) return false;
      if (MapCrc != other.MapCrc) return false;
      if (ClientCrc != other.ClientCrc) return false;
      if (StringTableCrc != other.StringTableCrc) return false;
      if (MaxClients != other.MaxClients) return false;
      if (MaxClasses != other.MaxClasses) return false;
      if (PlayerSlot != other.PlayerSlot) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickInterval, other.TickInterval)) return false;
      if (GameDir != other.GameDir) return false;
      if (MapName != other.MapName) return false;
      if (SkyName != other.SkyName) return false;
      if (HostName != other.HostName) return false;
      if (AddonName != other.AddonName) return false;
      if (!object.Equals(GameSessionConfig, other.GameSessionConfig)) return false;
      if (GameSessionManifest != other.GameSessionManifest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Protocol != 0) hash ^= Protocol.GetHashCode();
      if (ServerCount != 0) hash ^= ServerCount.GetHashCode();
      if (IsDedicated != false) hash ^= IsDedicated.GetHashCode();
      if (IsHltv != false) hash ^= IsHltv.GetHashCode();
      if (IsReplay != false) hash ^= IsReplay.GetHashCode();
      if (COs != 0) hash ^= COs.GetHashCode();
      if (MapCrc != 0) hash ^= MapCrc.GetHashCode();
      if (ClientCrc != 0) hash ^= ClientCrc.GetHashCode();
      if (StringTableCrc != 0) hash ^= StringTableCrc.GetHashCode();
      if (MaxClients != 0) hash ^= MaxClients.GetHashCode();
      if (MaxClasses != 0) hash ^= MaxClasses.GetHashCode();
      if (PlayerSlot != 0) hash ^= PlayerSlot.GetHashCode();
      if (TickInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickInterval);
      if (GameDir.Length != 0) hash ^= GameDir.GetHashCode();
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (SkyName.Length != 0) hash ^= SkyName.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (AddonName.Length != 0) hash ^= AddonName.GetHashCode();
      if (gameSessionConfig_ != null) hash ^= GameSessionConfig.GetHashCode();
      if (GameSessionManifest.Length != 0) hash ^= GameSessionManifest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Protocol);
      }
      if (ServerCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerCount);
      }
      if (IsDedicated != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDedicated);
      }
      if (IsHltv != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsHltv);
      }
      if (IsReplay != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsReplay);
      }
      if (COs != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(COs);
      }
      if (MapCrc != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(MapCrc);
      }
      if (ClientCrc != 0) {
        output.WriteRawTag(69);
        output.WriteFixed32(ClientCrc);
      }
      if (StringTableCrc != 0) {
        output.WriteRawTag(77);
        output.WriteFixed32(StringTableCrc);
      }
      if (MaxClients != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxClients);
      }
      if (MaxClasses != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MaxClasses);
      }
      if (PlayerSlot != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PlayerSlot);
      }
      if (TickInterval != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(TickInterval);
      }
      if (GameDir.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(GameDir);
      }
      if (MapName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MapName);
      }
      if (SkyName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(SkyName);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(HostName);
      }
      if (AddonName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AddonName);
      }
      if (gameSessionConfig_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(GameSessionConfig);
      }
      if (GameSessionManifest.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(GameSessionManifest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Protocol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protocol);
      }
      if (ServerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerCount);
      }
      if (IsDedicated != false) {
        size += 1 + 1;
      }
      if (IsHltv != false) {
        size += 1 + 1;
      }
      if (IsReplay != false) {
        size += 1 + 1;
      }
      if (COs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(COs);
      }
      if (MapCrc != 0) {
        size += 1 + 4;
      }
      if (ClientCrc != 0) {
        size += 1 + 4;
      }
      if (StringTableCrc != 0) {
        size += 1 + 4;
      }
      if (MaxClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxClients);
      }
      if (MaxClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxClasses);
      }
      if (PlayerSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerSlot);
      }
      if (TickInterval != 0F) {
        size += 1 + 4;
      }
      if (GameDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameDir);
      }
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (SkyName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkyName);
      }
      if (HostName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (AddonName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddonName);
      }
      if (gameSessionConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameSessionConfig);
      }
      if (GameSessionManifest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(GameSessionManifest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Protocol != 0) {
        Protocol = other.Protocol;
      }
      if (other.ServerCount != 0) {
        ServerCount = other.ServerCount;
      }
      if (other.IsDedicated != false) {
        IsDedicated = other.IsDedicated;
      }
      if (other.IsHltv != false) {
        IsHltv = other.IsHltv;
      }
      if (other.IsReplay != false) {
        IsReplay = other.IsReplay;
      }
      if (other.COs != 0) {
        COs = other.COs;
      }
      if (other.MapCrc != 0) {
        MapCrc = other.MapCrc;
      }
      if (other.ClientCrc != 0) {
        ClientCrc = other.ClientCrc;
      }
      if (other.StringTableCrc != 0) {
        StringTableCrc = other.StringTableCrc;
      }
      if (other.MaxClients != 0) {
        MaxClients = other.MaxClients;
      }
      if (other.MaxClasses != 0) {
        MaxClasses = other.MaxClasses;
      }
      if (other.PlayerSlot != 0) {
        PlayerSlot = other.PlayerSlot;
      }
      if (other.TickInterval != 0F) {
        TickInterval = other.TickInterval;
      }
      if (other.GameDir.Length != 0) {
        GameDir = other.GameDir;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.SkyName.Length != 0) {
        SkyName = other.SkyName;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.AddonName.Length != 0) {
        AddonName = other.AddonName;
      }
      if (other.gameSessionConfig_ != null) {
        if (gameSessionConfig_ == null) {
          gameSessionConfig_ = new global::Proto.Dota.CSVCMsg_GameSessionConfiguration();
        }
        GameSessionConfig.MergeFrom(other.GameSessionConfig);
      }
      if (other.GameSessionManifest.Length != 0) {
        GameSessionManifest = other.GameSessionManifest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Protocol = input.ReadInt32();
            break;
          }
          case 16: {
            ServerCount = input.ReadInt32();
            break;
          }
          case 24: {
            IsDedicated = input.ReadBool();
            break;
          }
          case 32: {
            IsHltv = input.ReadBool();
            break;
          }
          case 40: {
            IsReplay = input.ReadBool();
            break;
          }
          case 48: {
            COs = input.ReadInt32();
            break;
          }
          case 61: {
            MapCrc = input.ReadFixed32();
            break;
          }
          case 69: {
            ClientCrc = input.ReadFixed32();
            break;
          }
          case 77: {
            StringTableCrc = input.ReadFixed32();
            break;
          }
          case 80: {
            MaxClients = input.ReadInt32();
            break;
          }
          case 88: {
            MaxClasses = input.ReadInt32();
            break;
          }
          case 96: {
            PlayerSlot = input.ReadInt32();
            break;
          }
          case 109: {
            TickInterval = input.ReadFloat();
            break;
          }
          case 114: {
            GameDir = input.ReadString();
            break;
          }
          case 122: {
            MapName = input.ReadString();
            break;
          }
          case 130: {
            SkyName = input.ReadString();
            break;
          }
          case 138: {
            HostName = input.ReadString();
            break;
          }
          case 146: {
            AddonName = input.ReadString();
            break;
          }
          case 154: {
            if (gameSessionConfig_ == null) {
              gameSessionConfig_ = new global::Proto.Dota.CSVCMsg_GameSessionConfiguration();
            }
            input.ReadMessage(gameSessionConfig_);
            break;
          }
          case 162: {
            GameSessionManifest = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_ClassInfo : pb::IMessage<CSVCMsg_ClassInfo> {
    private static readonly pb::MessageParser<CSVCMsg_ClassInfo> _parser = new pb::MessageParser<CSVCMsg_ClassInfo>(() => new CSVCMsg_ClassInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_ClassInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ClassInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ClassInfo(CSVCMsg_ClassInfo other) : this() {
      createOnClient_ = other.createOnClient_;
      classes_ = other.classes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_ClassInfo Clone() {
      return new CSVCMsg_ClassInfo(this);
    }

    /// <summary>Field number for the "create_on_client" field.</summary>
    public const int CreateOnClientFieldNumber = 1;
    private bool createOnClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreateOnClient {
      get { return createOnClient_; }
      set {
        createOnClient_ = value;
      }
    }

    /// <summary>Field number for the "classes" field.</summary>
    public const int ClassesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CSVCMsg_ClassInfo.Types.class_t> _repeated_classes_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CSVCMsg_ClassInfo.Types.class_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CSVCMsg_ClassInfo.Types.class_t> classes_ = new pbc::RepeatedField<global::Proto.Dota.CSVCMsg_ClassInfo.Types.class_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CSVCMsg_ClassInfo.Types.class_t> Classes {
      get { return classes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_ClassInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_ClassInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreateOnClient != other.CreateOnClient) return false;
      if(!classes_.Equals(other.classes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreateOnClient != false) hash ^= CreateOnClient.GetHashCode();
      hash ^= classes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateOnClient != false) {
        output.WriteRawTag(8);
        output.WriteBool(CreateOnClient);
      }
      classes_.WriteTo(output, _repeated_classes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreateOnClient != false) {
        size += 1 + 1;
      }
      size += classes_.CalculateSize(_repeated_classes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_ClassInfo other) {
      if (other == null) {
        return;
      }
      if (other.CreateOnClient != false) {
        CreateOnClient = other.CreateOnClient;
      }
      classes_.Add(other.classes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreateOnClient = input.ReadBool();
            break;
          }
          case 18: {
            classes_.AddEntriesFrom(input, _repeated_classes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CSVCMsg_ClassInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class class_t : pb::IMessage<class_t> {
        private static readonly pb::MessageParser<class_t> _parser = new pb::MessageParser<class_t>(() => new class_t());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<class_t> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CSVCMsg_ClassInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public class_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public class_t(class_t other) : this() {
          classId_ = other.classId_;
          dataTableName_ = other.dataTableName_;
          className_ = other.className_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public class_t Clone() {
          return new class_t(this);
        }

        /// <summary>Field number for the "class_id" field.</summary>
        public const int ClassIdFieldNumber = 1;
        private int classId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClassId {
          get { return classId_; }
          set {
            classId_ = value;
          }
        }

        /// <summary>Field number for the "data_table_name" field.</summary>
        public const int DataTableNameFieldNumber = 2;
        private string dataTableName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataTableName {
          get { return dataTableName_; }
          set {
            dataTableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "class_name" field.</summary>
        public const int ClassNameFieldNumber = 3;
        private string className_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClassName {
          get { return className_; }
          set {
            className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as class_t);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(class_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClassId != other.ClassId) return false;
          if (DataTableName != other.DataTableName) return false;
          if (ClassName != other.ClassName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ClassId != 0) hash ^= ClassId.GetHashCode();
          if (DataTableName.Length != 0) hash ^= DataTableName.GetHashCode();
          if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ClassId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ClassId);
          }
          if (DataTableName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DataTableName);
          }
          if (ClassName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ClassName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ClassId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassId);
          }
          if (DataTableName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DataTableName);
          }
          if (ClassName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(class_t other) {
          if (other == null) {
            return;
          }
          if (other.ClassId != 0) {
            ClassId = other.ClassId;
          }
          if (other.DataTableName.Length != 0) {
            DataTableName = other.DataTableName;
          }
          if (other.ClassName.Length != 0) {
            ClassName = other.ClassName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ClassId = input.ReadInt32();
                break;
              }
              case 18: {
                DataTableName = input.ReadString();
                break;
              }
              case 26: {
                ClassName = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CSVCMsg_SetView : pb::IMessage<CSVCMsg_SetView> {
    private static readonly pb::MessageParser<CSVCMsg_SetView> _parser = new pb::MessageParser<CSVCMsg_SetView>(() => new CSVCMsg_SetView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_SetView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_SetView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_SetView(CSVCMsg_SetView other) : this() {
      entityIndex_ = other.entityIndex_;
      slot_ = other.slot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_SetView Clone() {
      return new CSVCMsg_SetView(this);
    }

    /// <summary>Field number for the "entity_index" field.</summary>
    public const int EntityIndexFieldNumber = 1;
    private int entityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityIndex {
      get { return entityIndex_; }
      set {
        entityIndex_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 2;
    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_SetView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_SetView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityIndex != other.EntityIndex) return false;
      if (Slot != other.Slot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityIndex != 0) hash ^= EntityIndex.GetHashCode();
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityIndex);
      }
      if (Slot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Slot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIndex);
      }
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_SetView other) {
      if (other == null) {
        return;
      }
      if (other.EntityIndex != 0) {
        EntityIndex = other.EntityIndex;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Slot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_Print : pb::IMessage<CSVCMsg_Print> {
    private static readonly pb::MessageParser<CSVCMsg_Print> _parser = new pb::MessageParser<CSVCMsg_Print>(() => new CSVCMsg_Print());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_Print> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_Print() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_Print(CSVCMsg_Print other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_Print Clone() {
      return new CSVCMsg_Print(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_Print);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_Print other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_Print other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_VoiceInit : pb::IMessage<CSVCMsg_VoiceInit> {
    private static readonly pb::MessageParser<CSVCMsg_VoiceInit> _parser = new pb::MessageParser<CSVCMsg_VoiceInit>(() => new CSVCMsg_VoiceInit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_VoiceInit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_VoiceInit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_VoiceInit(CSVCMsg_VoiceInit other) : this() {
      quality_ = other.quality_;
      codec_ = other.codec_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_VoiceInit Clone() {
      return new CSVCMsg_VoiceInit(this);
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 1;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "codec" field.</summary>
    public const int CodecFieldNumber = 2;
    private string codec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Codec {
      get { return codec_; }
      set {
        codec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_VoiceInit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_VoiceInit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quality != other.Quality) return false;
      if (Codec != other.Codec) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Codec.Length != 0) hash ^= Codec.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Quality != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Quality);
      }
      if (Codec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Codec);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (Codec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Codec);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_VoiceInit other) {
      if (other == null) {
        return;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Codec.Length != 0) {
        Codec = other.Codec;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Quality = input.ReadInt32();
            break;
          }
          case 18: {
            Codec = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_Sounds : pb::IMessage<CSVCMsg_Sounds> {
    private static readonly pb::MessageParser<CSVCMsg_Sounds> _parser = new pb::MessageParser<CSVCMsg_Sounds>(() => new CSVCMsg_Sounds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_Sounds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_Sounds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_Sounds(CSVCMsg_Sounds other) : this() {
      reliableSound_ = other.reliableSound_;
      sounds_ = other.sounds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_Sounds Clone() {
      return new CSVCMsg_Sounds(this);
    }

    /// <summary>Field number for the "reliable_sound" field.</summary>
    public const int ReliableSoundFieldNumber = 1;
    private bool reliableSound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReliableSound {
      get { return reliableSound_; }
      set {
        reliableSound_ = value;
      }
    }

    /// <summary>Field number for the "sounds" field.</summary>
    public const int SoundsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CSVCMsg_Sounds.Types.sounddata_t> _repeated_sounds_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CSVCMsg_Sounds.Types.sounddata_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CSVCMsg_Sounds.Types.sounddata_t> sounds_ = new pbc::RepeatedField<global::Proto.Dota.CSVCMsg_Sounds.Types.sounddata_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CSVCMsg_Sounds.Types.sounddata_t> Sounds {
      get { return sounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_Sounds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_Sounds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReliableSound != other.ReliableSound) return false;
      if(!sounds_.Equals(other.sounds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReliableSound != false) hash ^= ReliableSound.GetHashCode();
      hash ^= sounds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReliableSound != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReliableSound);
      }
      sounds_.WriteTo(output, _repeated_sounds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReliableSound != false) {
        size += 1 + 1;
      }
      size += sounds_.CalculateSize(_repeated_sounds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_Sounds other) {
      if (other == null) {
        return;
      }
      if (other.ReliableSound != false) {
        ReliableSound = other.ReliableSound;
      }
      sounds_.Add(other.sounds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReliableSound = input.ReadBool();
            break;
          }
          case 18: {
            sounds_.AddEntriesFrom(input, _repeated_sounds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CSVCMsg_Sounds message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class sounddata_t : pb::IMessage<sounddata_t> {
        private static readonly pb::MessageParser<sounddata_t> _parser = new pb::MessageParser<sounddata_t>(() => new sounddata_t());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<sounddata_t> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CSVCMsg_Sounds.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public sounddata_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public sounddata_t(sounddata_t other) : this() {
          originX_ = other.originX_;
          originY_ = other.originY_;
          originZ_ = other.originZ_;
          volume_ = other.volume_;
          delayValue_ = other.delayValue_;
          sequenceNumber_ = other.sequenceNumber_;
          entityIndex_ = other.entityIndex_;
          channel_ = other.channel_;
          pitch_ = other.pitch_;
          flags_ = other.flags_;
          soundNum_ = other.soundNum_;
          soundNumHandle_ = other.soundNumHandle_;
          speakerEntity_ = other.speakerEntity_;
          randomSeed_ = other.randomSeed_;
          soundLevel_ = other.soundLevel_;
          isSentence_ = other.isSentence_;
          isAmbient_ = other.isAmbient_;
          guid_ = other.guid_;
          soundResourceId_ = other.soundResourceId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public sounddata_t Clone() {
          return new sounddata_t(this);
        }

        /// <summary>Field number for the "origin_x" field.</summary>
        public const int OriginXFieldNumber = 1;
        private int originX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OriginX {
          get { return originX_; }
          set {
            originX_ = value;
          }
        }

        /// <summary>Field number for the "origin_y" field.</summary>
        public const int OriginYFieldNumber = 2;
        private int originY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OriginY {
          get { return originY_; }
          set {
            originY_ = value;
          }
        }

        /// <summary>Field number for the "origin_z" field.</summary>
        public const int OriginZFieldNumber = 3;
        private int originZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OriginZ {
          get { return originZ_; }
          set {
            originZ_ = value;
          }
        }

        /// <summary>Field number for the "volume" field.</summary>
        public const int VolumeFieldNumber = 4;
        private uint volume_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Volume {
          get { return volume_; }
          set {
            volume_ = value;
          }
        }

        /// <summary>Field number for the "delay_value" field.</summary>
        public const int DelayValueFieldNumber = 5;
        private float delayValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DelayValue {
          get { return delayValue_; }
          set {
            delayValue_ = value;
          }
        }

        /// <summary>Field number for the "sequence_number" field.</summary>
        public const int SequenceNumberFieldNumber = 6;
        private int sequenceNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SequenceNumber {
          get { return sequenceNumber_; }
          set {
            sequenceNumber_ = value;
          }
        }

        /// <summary>Field number for the "entity_index" field.</summary>
        public const int EntityIndexFieldNumber = 7;
        private int entityIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntityIndex {
          get { return entityIndex_; }
          set {
            entityIndex_ = value;
          }
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 8;
        private int channel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "pitch" field.</summary>
        public const int PitchFieldNumber = 9;
        private int pitch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Pitch {
          get { return pitch_; }
          set {
            pitch_ = value;
          }
        }

        /// <summary>Field number for the "flags" field.</summary>
        public const int FlagsFieldNumber = 10;
        private int flags_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Flags {
          get { return flags_; }
          set {
            flags_ = value;
          }
        }

        /// <summary>Field number for the "sound_num" field.</summary>
        public const int SoundNumFieldNumber = 11;
        private uint soundNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SoundNum {
          get { return soundNum_; }
          set {
            soundNum_ = value;
          }
        }

        /// <summary>Field number for the "sound_num_handle" field.</summary>
        public const int SoundNumHandleFieldNumber = 12;
        private uint soundNumHandle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SoundNumHandle {
          get { return soundNumHandle_; }
          set {
            soundNumHandle_ = value;
          }
        }

        /// <summary>Field number for the "speaker_entity" field.</summary>
        public const int SpeakerEntityFieldNumber = 13;
        private int speakerEntity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SpeakerEntity {
          get { return speakerEntity_; }
          set {
            speakerEntity_ = value;
          }
        }

        /// <summary>Field number for the "random_seed" field.</summary>
        public const int RandomSeedFieldNumber = 14;
        private int randomSeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RandomSeed {
          get { return randomSeed_; }
          set {
            randomSeed_ = value;
          }
        }

        /// <summary>Field number for the "sound_level" field.</summary>
        public const int SoundLevelFieldNumber = 15;
        private int soundLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SoundLevel {
          get { return soundLevel_; }
          set {
            soundLevel_ = value;
          }
        }

        /// <summary>Field number for the "is_sentence" field.</summary>
        public const int IsSentenceFieldNumber = 16;
        private bool isSentence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsSentence {
          get { return isSentence_; }
          set {
            isSentence_ = value;
          }
        }

        /// <summary>Field number for the "is_ambient" field.</summary>
        public const int IsAmbientFieldNumber = 17;
        private bool isAmbient_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsAmbient {
          get { return isAmbient_; }
          set {
            isAmbient_ = value;
          }
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 18;
        private uint guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "sound_resource_id" field.</summary>
        public const int SoundResourceIdFieldNumber = 19;
        private ulong soundResourceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SoundResourceId {
          get { return soundResourceId_; }
          set {
            soundResourceId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as sounddata_t);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(sounddata_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OriginX != other.OriginX) return false;
          if (OriginY != other.OriginY) return false;
          if (OriginZ != other.OriginZ) return false;
          if (Volume != other.Volume) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DelayValue, other.DelayValue)) return false;
          if (SequenceNumber != other.SequenceNumber) return false;
          if (EntityIndex != other.EntityIndex) return false;
          if (Channel != other.Channel) return false;
          if (Pitch != other.Pitch) return false;
          if (Flags != other.Flags) return false;
          if (SoundNum != other.SoundNum) return false;
          if (SoundNumHandle != other.SoundNumHandle) return false;
          if (SpeakerEntity != other.SpeakerEntity) return false;
          if (RandomSeed != other.RandomSeed) return false;
          if (SoundLevel != other.SoundLevel) return false;
          if (IsSentence != other.IsSentence) return false;
          if (IsAmbient != other.IsAmbient) return false;
          if (Guid != other.Guid) return false;
          if (SoundResourceId != other.SoundResourceId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OriginX != 0) hash ^= OriginX.GetHashCode();
          if (OriginY != 0) hash ^= OriginY.GetHashCode();
          if (OriginZ != 0) hash ^= OriginZ.GetHashCode();
          if (Volume != 0) hash ^= Volume.GetHashCode();
          if (DelayValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DelayValue);
          if (SequenceNumber != 0) hash ^= SequenceNumber.GetHashCode();
          if (EntityIndex != 0) hash ^= EntityIndex.GetHashCode();
          if (Channel != 0) hash ^= Channel.GetHashCode();
          if (Pitch != 0) hash ^= Pitch.GetHashCode();
          if (Flags != 0) hash ^= Flags.GetHashCode();
          if (SoundNum != 0) hash ^= SoundNum.GetHashCode();
          if (SoundNumHandle != 0) hash ^= SoundNumHandle.GetHashCode();
          if (SpeakerEntity != 0) hash ^= SpeakerEntity.GetHashCode();
          if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
          if (SoundLevel != 0) hash ^= SoundLevel.GetHashCode();
          if (IsSentence != false) hash ^= IsSentence.GetHashCode();
          if (IsAmbient != false) hash ^= IsAmbient.GetHashCode();
          if (Guid != 0) hash ^= Guid.GetHashCode();
          if (SoundResourceId != 0UL) hash ^= SoundResourceId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OriginX != 0) {
            output.WriteRawTag(8);
            output.WriteSInt32(OriginX);
          }
          if (OriginY != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(OriginY);
          }
          if (OriginZ != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(OriginZ);
          }
          if (Volume != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Volume);
          }
          if (DelayValue != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(DelayValue);
          }
          if (SequenceNumber != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(SequenceNumber);
          }
          if (EntityIndex != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(EntityIndex);
          }
          if (Channel != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(Channel);
          }
          if (Pitch != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(Pitch);
          }
          if (Flags != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(Flags);
          }
          if (SoundNum != 0) {
            output.WriteRawTag(88);
            output.WriteUInt32(SoundNum);
          }
          if (SoundNumHandle != 0) {
            output.WriteRawTag(101);
            output.WriteFixed32(SoundNumHandle);
          }
          if (SpeakerEntity != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(SpeakerEntity);
          }
          if (RandomSeed != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(RandomSeed);
          }
          if (SoundLevel != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(SoundLevel);
          }
          if (IsSentence != false) {
            output.WriteRawTag(128, 1);
            output.WriteBool(IsSentence);
          }
          if (IsAmbient != false) {
            output.WriteRawTag(136, 1);
            output.WriteBool(IsAmbient);
          }
          if (Guid != 0) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(Guid);
          }
          if (SoundResourceId != 0UL) {
            output.WriteRawTag(153, 1);
            output.WriteFixed64(SoundResourceId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OriginX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OriginX);
          }
          if (OriginY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OriginY);
          }
          if (OriginZ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OriginZ);
          }
          if (Volume != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Volume);
          }
          if (DelayValue != 0F) {
            size += 1 + 4;
          }
          if (SequenceNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
          }
          if (EntityIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIndex);
          }
          if (Channel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
          }
          if (Pitch != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pitch);
          }
          if (Flags != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
          }
          if (SoundNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SoundNum);
          }
          if (SoundNumHandle != 0) {
            size += 1 + 4;
          }
          if (SpeakerEntity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeakerEntity);
          }
          if (RandomSeed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
          }
          if (SoundLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundLevel);
          }
          if (IsSentence != false) {
            size += 2 + 1;
          }
          if (IsAmbient != false) {
            size += 2 + 1;
          }
          if (Guid != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
          }
          if (SoundResourceId != 0UL) {
            size += 2 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(sounddata_t other) {
          if (other == null) {
            return;
          }
          if (other.OriginX != 0) {
            OriginX = other.OriginX;
          }
          if (other.OriginY != 0) {
            OriginY = other.OriginY;
          }
          if (other.OriginZ != 0) {
            OriginZ = other.OriginZ;
          }
          if (other.Volume != 0) {
            Volume = other.Volume;
          }
          if (other.DelayValue != 0F) {
            DelayValue = other.DelayValue;
          }
          if (other.SequenceNumber != 0) {
            SequenceNumber = other.SequenceNumber;
          }
          if (other.EntityIndex != 0) {
            EntityIndex = other.EntityIndex;
          }
          if (other.Channel != 0) {
            Channel = other.Channel;
          }
          if (other.Pitch != 0) {
            Pitch = other.Pitch;
          }
          if (other.Flags != 0) {
            Flags = other.Flags;
          }
          if (other.SoundNum != 0) {
            SoundNum = other.SoundNum;
          }
          if (other.SoundNumHandle != 0) {
            SoundNumHandle = other.SoundNumHandle;
          }
          if (other.SpeakerEntity != 0) {
            SpeakerEntity = other.SpeakerEntity;
          }
          if (other.RandomSeed != 0) {
            RandomSeed = other.RandomSeed;
          }
          if (other.SoundLevel != 0) {
            SoundLevel = other.SoundLevel;
          }
          if (other.IsSentence != false) {
            IsSentence = other.IsSentence;
          }
          if (other.IsAmbient != false) {
            IsAmbient = other.IsAmbient;
          }
          if (other.Guid != 0) {
            Guid = other.Guid;
          }
          if (other.SoundResourceId != 0UL) {
            SoundResourceId = other.SoundResourceId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                OriginX = input.ReadSInt32();
                break;
              }
              case 16: {
                OriginY = input.ReadSInt32();
                break;
              }
              case 24: {
                OriginZ = input.ReadSInt32();
                break;
              }
              case 32: {
                Volume = input.ReadUInt32();
                break;
              }
              case 45: {
                DelayValue = input.ReadFloat();
                break;
              }
              case 48: {
                SequenceNumber = input.ReadInt32();
                break;
              }
              case 56: {
                EntityIndex = input.ReadInt32();
                break;
              }
              case 64: {
                Channel = input.ReadInt32();
                break;
              }
              case 72: {
                Pitch = input.ReadInt32();
                break;
              }
              case 80: {
                Flags = input.ReadInt32();
                break;
              }
              case 88: {
                SoundNum = input.ReadUInt32();
                break;
              }
              case 101: {
                SoundNumHandle = input.ReadFixed32();
                break;
              }
              case 104: {
                SpeakerEntity = input.ReadInt32();
                break;
              }
              case 112: {
                RandomSeed = input.ReadInt32();
                break;
              }
              case 120: {
                SoundLevel = input.ReadInt32();
                break;
              }
              case 128: {
                IsSentence = input.ReadBool();
                break;
              }
              case 136: {
                IsAmbient = input.ReadBool();
                break;
              }
              case 144: {
                Guid = input.ReadUInt32();
                break;
              }
              case 153: {
                SoundResourceId = input.ReadFixed64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CSVCMsg_UpdateStringTable : pb::IMessage<CSVCMsg_UpdateStringTable> {
    private static readonly pb::MessageParser<CSVCMsg_UpdateStringTable> _parser = new pb::MessageParser<CSVCMsg_UpdateStringTable>(() => new CSVCMsg_UpdateStringTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_UpdateStringTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_UpdateStringTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_UpdateStringTable(CSVCMsg_UpdateStringTable other) : this() {
      tableId_ = other.tableId_;
      numChangedEntries_ = other.numChangedEntries_;
      stringData_ = other.stringData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_UpdateStringTable Clone() {
      return new CSVCMsg_UpdateStringTable(this);
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 1;
    private int tableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "num_changed_entries" field.</summary>
    public const int NumChangedEntriesFieldNumber = 2;
    private int numChangedEntries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumChangedEntries {
      get { return numChangedEntries_; }
      set {
        numChangedEntries_ = value;
      }
    }

    /// <summary>Field number for the "string_data" field.</summary>
    public const int StringDataFieldNumber = 3;
    private pb::ByteString stringData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StringData {
      get { return stringData_; }
      set {
        stringData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_UpdateStringTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_UpdateStringTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableId != other.TableId) return false;
      if (NumChangedEntries != other.NumChangedEntries) return false;
      if (StringData != other.StringData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableId != 0) hash ^= TableId.GetHashCode();
      if (NumChangedEntries != 0) hash ^= NumChangedEntries.GetHashCode();
      if (StringData.Length != 0) hash ^= StringData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TableId);
      }
      if (NumChangedEntries != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumChangedEntries);
      }
      if (StringData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(StringData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (NumChangedEntries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumChangedEntries);
      }
      if (StringData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StringData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_UpdateStringTable other) {
      if (other == null) {
        return;
      }
      if (other.TableId != 0) {
        TableId = other.TableId;
      }
      if (other.NumChangedEntries != 0) {
        NumChangedEntries = other.NumChangedEntries;
      }
      if (other.StringData.Length != 0) {
        StringData = other.StringData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableId = input.ReadInt32();
            break;
          }
          case 16: {
            NumChangedEntries = input.ReadInt32();
            break;
          }
          case 26: {
            StringData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_FullFrameSplit : pb::IMessage<CSVCMsg_FullFrameSplit> {
    private static readonly pb::MessageParser<CSVCMsg_FullFrameSplit> _parser = new pb::MessageParser<CSVCMsg_FullFrameSplit>(() => new CSVCMsg_FullFrameSplit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_FullFrameSplit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_FullFrameSplit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_FullFrameSplit(CSVCMsg_FullFrameSplit other) : this() {
      tick_ = other.tick_;
      section_ = other.section_;
      total_ = other.total_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_FullFrameSplit Clone() {
      return new CSVCMsg_FullFrameSplit(this);
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "section" field.</summary>
    public const int SectionFieldNumber = 2;
    private int section_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Section {
      get { return section_; }
      set {
        section_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_FullFrameSplit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_FullFrameSplit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tick != other.Tick) return false;
      if (Section != other.Section) return false;
      if (Total != other.Total) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (Section != 0) hash ^= Section.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tick);
      }
      if (Section != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Section);
      }
      if (Total != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Total);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      if (Section != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Section);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_FullFrameSplit other) {
      if (other == null) {
        return;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      if (other.Section != 0) {
        Section = other.Section;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tick = input.ReadInt32();
            break;
          }
          case 16: {
            Section = input.ReadInt32();
            break;
          }
          case 24: {
            Total = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_BSPDecal : pb::IMessage<CSVCMsg_BSPDecal> {
    private static readonly pb::MessageParser<CSVCMsg_BSPDecal> _parser = new pb::MessageParser<CSVCMsg_BSPDecal>(() => new CSVCMsg_BSPDecal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_BSPDecal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetmessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_BSPDecal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_BSPDecal(CSVCMsg_BSPDecal other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      decalTextureIndex_ = other.decalTextureIndex_;
      entityIndex_ = other.entityIndex_;
      modelIndex_ = other.modelIndex_;
      lowPriority_ = other.lowPriority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_BSPDecal Clone() {
      return new CSVCMsg_BSPDecal(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Proto.Dota.CMsgVector pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "decal_texture_index" field.</summary>
    public const int DecalTextureIndexFieldNumber = 2;
    private int decalTextureIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecalTextureIndex {
      get { return decalTextureIndex_; }
      set {
        decalTextureIndex_ = value;
      }
    }

    /// <summary>Field number for the "entity_index" field.</summary>
    public const int EntityIndexFieldNumber = 3;
    private int entityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityIndex {
      get { return entityIndex_; }
      set {
        entityIndex_ = value;
      }
    }

    /// <summary>Field number for the "model_index" field.</summary>
    public const int ModelIndexFieldNumber = 4;
    private int modelIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelIndex {
      get { return modelIndex_; }
      set {
        modelIndex_ = value;
      }
    }

    /// <summary>Field number for the "low_priority" field.</summary>
    public const int LowPriorityFieldNumber = 5;
    private bool lowPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowPriority {
      get { return lowPriority_; }
      set {
        lowPriority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_BSPDecal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_BSPDecal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (DecalTextureIndex != other.DecalTextureIndex) return false;
      if (EntityIndex != other.EntityIndex) return false;
      if (ModelIndex != other.ModelIndex) return false;
      if (LowPriority != other.LowPriority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (DecalTextureIndex != 0) hash ^= DecalTextureIndex.GetHashCode();
      if (EntityIndex != 0) hash ^= EntityIndex.GetHashCode();
      if (ModelIndex != 0) hash ^= ModelIndex.GetHashCode();
      if (LowPriority != false) hash ^= LowPriority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (DecalTextureIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DecalTextureIndex);
      }
      if (EntityIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EntityIndex);
      }
      if (ModelIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ModelIndex);
      }
      if (LowPriority != false) {
        output.WriteRawTag(40);
        output.WriteBool(LowPriority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (DecalTextureIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DecalTextureIndex);
      }
      if (EntityIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIndex);
      }
      if (ModelIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelIndex);
      }
      if (LowPriority != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_BSPDecal other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Proto.Dota.CMsgVector();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.DecalTextureIndex != 0) {
        DecalTextureIndex = other.DecalTextureIndex;
      }
      if (other.EntityIndex != 0) {
        EntityIndex = other.EntityIndex;
      }
      if (other.ModelIndex != 0) {
        ModelIndex = other.ModelIndex;
      }
      if (other.LowPriority != false) {
        LowPriority = other.LowPriority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 16: {
            DecalTextureIndex = input.ReadInt32();
            break;
          }
          case 24: {
            EntityIndex = input.ReadInt32();
            break;
          }
          case 32: {
            ModelIndex = input.ReadInt32();
            break;
          }
          case 40: {
            LowPriority = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
