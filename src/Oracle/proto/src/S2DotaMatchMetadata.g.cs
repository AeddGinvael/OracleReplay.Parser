// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: s2_dota_match_metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from s2_dota_match_metadata.proto</summary>
  public static partial class S2DotaMatchMetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for s2_dota_match_metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S2DotaMatchMetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxzMl9kb3RhX21hdGNoX21ldGFkYXRhLnByb3RvEg9nb29nbGUucHJvdG9i",
            "dWYaGHMyX2Jhc2VfZ2NtZXNzYWdlcy5wcm90bxofczJfZG90YV9nY21lc3Nh",
            "Z2VzX2NvbW1vbi5wcm90byKGAQoYQ0xvYmJ5VGltZWRSZXdhcmREZXRhaWxz",
            "EhYKDml0ZW1fZGVmX2luZGV4GAIgASgNEhcKD2lzX3N1cHBseV9jcmF0ZRgD",
            "IAEoCBIVCg1pc190aW1lZF9kcm9wGAQgASgIEhIKCmFjY291bnRfaWQYBSAB",
            "KA0SDgoGb3JpZ2luGAYgASgNIowBChZDRE9UQU1hdGNoTWV0YWRhdGFGaWxl",
            "Eg8KB3ZlcnNpb24YASABKAUSEAoIbWF0Y2hfaWQYAiABKAQSNQoIbWV0YWRh",
            "dGEYAyABKAsyIy5nb29nbGUucHJvdG9idWYuQ0RPVEFNYXRjaE1ldGFkYXRh",
            "EhgKEHByaXZhdGVfbWV0YWRhdGEYBSABKAwi2BcKEkNET1RBTWF0Y2hNZXRh",
            "ZGF0YRI3CgV0ZWFtcxgBIAMoCzIoLmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1h",
            "dGNoTWV0YWRhdGEuVGVhbRI/CgxpdGVtX3Jld2FyZHMYAiADKAsyKS5nb29n",
            "bGUucHJvdG9idWYuQ0xvYmJ5VGltZWRSZXdhcmREZXRhaWxzEhAKCGxvYmJ5",
            "X2lkGAMgASgGEhkKEXJlcG9ydF91bnRpbF90aW1lGAQgASgGEh8KF2V2ZW50",
            "X2dhbWVfY3VzdG9tX3RhYmxlGAUgASgMEhgKEHByaW1hcnlfZXZlbnRfaWQY",
            "BiABKA0SMgoKbWF0Y2hfdGlwcxgHIAMoCzIeLmdvb2dsZS5wcm90b2J1Zi5D",
            "TXNnTWF0Y2hUaXBzGqsVCgRUZWFtEhEKCWRvdGFfdGVhbRgBIAEoDRJACgdw",
            "bGF5ZXJzGAIgAygLMi8uZ29vZ2xlLnByb3RvYnVmLkNET1RBTWF0Y2hNZXRh",
            "ZGF0YS5UZWFtLlBsYXllchIYChBncmFwaF9leHBlcmllbmNlGAMgAygCEhkK",
            "EWdyYXBoX2dvbGRfZWFybmVkGAQgAygCEhcKD2dyYXBoX25ldF93b3J0aBgF",
            "IAMoAhIVCg1jbV9maXJzdF9waWNrGAYgASgIEhwKFGNtX2NhcHRhaW5fcGxh",
            "eWVyX2lkGAcgASgNEg8KB2NtX2JhbnMYCCADKA0SEAoIY21fcGlja3MYCSAD",
            "KA0SEgoKY21fcGVuYWx0eRgKIAEoDRowCgpQbGF5ZXJLaWxsEhMKC3ZpY3Rp",
            "bV9zbG90GAEgASgNEg0KBWNvdW50GAIgASgNGjYKDEl0ZW1QdXJjaGFzZRIP",
            "CgdpdGVtX2lkGAEgASgNEhUKDXB1cmNoYXNlX3RpbWUYAiABKAUadgoRSW52",
            "ZW50b3J5U25hcHNob3QSDwoHaXRlbV9pZBgBIAMoDRIRCglnYW1lX3RpbWUY",
            "AiABKAUSDQoFa2lsbHMYAyABKA0SDgoGZGVhdGhzGAQgASgNEg8KB2Fzc2lz",
            "dHMYBSABKA0SDQoFbGV2ZWwYBiABKA0aNgoRQXV0b1N0eWxlQ3JpdGVyaWES",
            "EgoKbmFtZV90b2tlbhgBIAEoDRINCgV2YWx1ZRgCIAEoAhq+AQoSU3RyYW5n",
            "ZUdlbVByb2dyZXNzEhcKD2tpbGxfZWF0ZXJfdHlwZRgBIAEoDRIaChJnZW1f",
            "aXRlbV9kZWZfaW5kZXgYAiABKA0SEAoIX2hlcm9faWQYAyABKA0SFgoOc3Rh",
            "cnRpbmdfdmFsdWUYBCABKA0SFAoMZW5kaW5nX3ZhbHVlGAUgASgNEhwKFG93",
            "bmVyX2l0ZW1fZGVmX2luZGV4GAYgASgNEhUKDW93bmVyX2l0ZW1faWQYByAB",
            "KAQaaAoRVmljdG9yeVByZWRpY3Rpb24SDwoHaXRlbV9pZBgBIAEoBBIWCg5p",
            "dGVtX2RlZl9pbmRleBgCIAEoDRIWCg5zdGFydGluZ192YWx1ZRgDIAEoDRIS",
            "Cgppc192aWN0b3J5GAQgASgIGloKDFN1YkNoYWxsZW5nZRIPCgdzbG90X2lk",
            "GAEgASgNEhMKC3N0YXJ0X3ZhbHVlGAIgASgNEhEKCWVuZF92YWx1ZRgDIAEo",
            "DRIRCgljb21wbGV0ZWQYBCABKAgapQQKCUV2ZW50RGF0YRIQCghldmVudF9p",
            "ZBgBIAEoDRIUCgxldmVudF9wb2ludHMYAiABKA0SHQoVY2hhbGxlbmdlX2lu",
            "c3RhbmNlX2lkGAMgASgNEhoKEmNoYWxsZW5nZV9xdWVzdF9pZBgEIAEoDRIk",
            "ChxjaGFsbGVuZ2VfcXVlc3RfY2hhbGxlbmdlX2lkGAUgASgNEhsKE2NoYWxs",
            "ZW5nZV9jb21wbGV0ZWQYBiABKAgSIAoYY2hhbGxlbmdlX3JhbmtfY29tcGxl",
            "dGVkGAcgASgNEisKI2NoYWxsZW5nZV9yYW5rX3ByZXZpb3VzbHlfY29tcGxl",
            "dGVkGAggASgNEhMKC2V2ZW50X293bmVkGAkgASgIElsKHHN1Yl9jaGFsbGVu",
            "Z2VzX3dpdGhfcHJvZ3Jlc3MYCiADKAsyNS5nb29nbGUucHJvdG9idWYuQ0RP",
            "VEFNYXRjaE1ldGFkYXRhLlRlYW0uU3ViQ2hhbGxlbmdlEhYKDndhZ2VyX3dp",
            "bm5pbmdzGAsgASgNEh8KF2NhdmVybl9jaGFsbGVuZ2VfYWN0aXZlGAwgASgI",
            "EiEKGWNhdmVybl9jaGFsbGVuZ2Vfd2lubmluZ3MYDSABKA0SFgoOYW1vdW50",
            "X3dhZ2VyZWQYDiABKA0SGQoRdGVhbV93YWdlcl9hbW91bnQYDyABKA0SIgoa",
            "cGVyaW9kaWNfcG9pbnRfYWRqdXN0bWVudHMYECABKA0aygkKBlBsYXllchIS",
            "CgphY2NvdW50X2lkGAEgASgNEhgKEGFiaWxpdHlfdXBncmFkZXMYAiADKA0S",
            "EwoLcGxheWVyX3Nsb3QYAyABKA0SOQoTZXF1aXBwZWRfZWNvbl9pdGVtcxgE",
            "IAMoCzIcLmdvb2dsZS5wcm90b2J1Zi5DU09FY29uSXRlbRJCCgVraWxscxgF",
            "IAMoCzIzLmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1hdGNoTWV0YWRhdGEuVGVh",
            "bS5QbGF5ZXJLaWxsEkQKBWl0ZW1zGAYgAygLMjUuZ29vZ2xlLnByb3RvYnVm",
            "LkNET1RBTWF0Y2hNZXRhZGF0YS5UZWFtLkl0ZW1QdXJjaGFzZRIVCg1hdmdf",
            "a2lsbHNfeDE2GAcgASgNEhYKDmF2Z19kZWF0aHNfeDE2GAggASgNEhcKD2F2",
            "Z19hc3Npc3RzX3gxNhgJIAEoDRITCgthdmdfZ3BtX3gxNhgKIAEoDRITCgth",
            "dmdfeHBtX3gxNhgLIAEoDRIWCg5iZXN0X2tpbGxzX3gxNhgMIAEoDRIYChBi",
            "ZXN0X2Fzc2lzdHNfeDE2GA0gASgNEhQKDGJlc3RfZ3BtX3gxNhgOIAEoDRIU",
            "CgxiZXN0X3hwbV94MTYYDyABKA0SEgoKd2luX3N0cmVhaxgQIAEoDRIXCg9i",
            "ZXN0X3dpbl9zdHJlYWsYESABKA0SEwoLZmlnaHRfc2NvcmUYEiABKAISEgoK",
            "ZmFybV9zY29yZRgTIAEoAhIVCg1zdXBwb3J0X3Njb3JlGBQgASgCEhIKCnB1",
            "c2hfc2NvcmUYFSABKAISFgoObGV2ZWxfdXBfdGltZXMYFiADKA0SFwoPZ3Jh",
            "cGhfbmV0X3dvcnRoGBcgAygCElYKEmludmVudG9yeV9zbmFwc2hvdBgYIAMo",
            "CzI6Lmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1hdGNoTWV0YWRhdGEuVGVhbS5J",
            "bnZlbnRvcnlTbmFwc2hvdBIcChRhdmdfc3RhdHNfY2FsaWJyYXRlZBgZIAEo",
            "CBJXChNhdXRvX3N0eWxlX2NyaXRlcmlhGBogAygLMjouZ29vZ2xlLnByb3Rv",
            "YnVmLkNET1RBTWF0Y2hNZXRhZGF0YS5UZWFtLkF1dG9TdHlsZUNyaXRlcmlh",
            "EhAKCGV2ZW50X2lkGBsgASgNEhQKDGV2ZW50X3BvaW50cxgcIAEoDRJGCgpl",
            "dmVudF9kYXRhGB0gAygLMjIuZ29vZ2xlLnByb3RvYnVmLkNET1RBTWF0Y2hN",
            "ZXRhZGF0YS5UZWFtLkV2ZW50RGF0YRJZChRzdHJhbmdlX2dlbV9wcm9ncmVz",
            "cxgeIAMoCzI7Lmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1hdGNoTWV0YWRhdGEu",
            "VGVhbS5TdHJhbmdlR2VtUHJvZ3Jlc3MSDwoHaGVyb194cBgfIAEoDRIVCg1j",
            "YW1wc19zdGFja2VkGCAgASgNElYKEnZpY3RvcnlfcHJlZGljdGlvbhghIAMo",
            "CzI6Lmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1hdGNoTWV0YWRhdGEuVGVhbS5W",
            "aWN0b3J5UHJlZGljdGlvbhIcChRsYW5lX3NlbGVjdGlvbl9mbGFncxgiIAEo",
            "DSKkCwoZQ0RPVEFNYXRjaFByaXZhdGVNZXRhZGF0YRI+CgV0ZWFtcxgBIAMo",
            "CzIvLmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1hdGNoUHJpdmF0ZU1ldGFkYXRh",
            "LlRlYW0SHQoVZ3JhcGhfd2luX3Byb2JhYmlsaXR5GAIgAygCGqcKCgRUZWFt",
            "EhEKCWRvdGFfdGVhbRgBIAEoDRJHCgdwbGF5ZXJzGAIgAygLMjYuZ29vZ2xl",
            "LnByb3RvYnVmLkNET1RBTWF0Y2hQcml2YXRlTWV0YWRhdGEuVGVhbS5QbGF5",
            "ZXISSwoJYnVpbGRpbmdzGAMgAygLMjguZ29vZ2xlLnByb3RvYnVmLkNET1RB",
            "TWF0Y2hQcml2YXRlTWV0YWRhdGEuVGVhbS5CdWlsZGluZxqOCAoGUGxheWVy",
            "EhIKCmFjY291bnRfaWQYASABKA0SEwoLcGxheWVyX3Nsb3QYAiABKA0SFwoP",
            "cG9zaXRpb25fc3RyZWFtGAMgASgMEl0KD2NvbWJhdF9zZWdtZW50cxgEIAMo",
            "CzJELmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1hdGNoUHJpdmF0ZU1ldGFkYXRh",
            "LlRlYW0uUGxheWVyLkNvbWJhdFNlZ21lbnQSGQoRZGFtYWdlX3VuaXRfbmFt",
            "ZXMYBSADKAkSVwoMYnVmZl9yZWNvcmRzGAYgAygLMkEuZ29vZ2xlLnByb3Rv",
            "YnVmLkNET1RBTWF0Y2hQcml2YXRlTWV0YWRhdGEuVGVhbS5QbGF5ZXIuQnVm",
            "ZlJlY29yZBITCgtncmFwaF9raWxscxgHIAMoAhIUCgxncmFwaF9kZWF0aHMY",
            "CCADKAISFQoNZ3JhcGhfYXNzaXN0cxgJIAMoAhIWCg5ncmFwaF9sYXN0aGl0",
            "cxgKIAMoAhIUCgxncmFwaF9kZW5pZXMYCyADKAIagwMKDUNvbWJhdFNlZ21l",
            "bnQSEQoJZ2FtZV90aW1lGAEgASgFEm8KEWRhbWFnZV9ieV9hYmlsaXR5GAIg",
            "AygLMlQuZ29vZ2xlLnByb3RvYnVmLkNET1RBTWF0Y2hQcml2YXRlTWV0YWRh",
            "dGEuVGVhbS5QbGF5ZXIuQ29tYmF0U2VnbWVudC5EYW1hZ2VCeUFiaWxpdHka",
            "7QEKD0RhbWFnZUJ5QWJpbGl0eRIZChFzb3VyY2VfdW5pdF9pbmRleBgDIAEo",
            "DRISCgphYmlsaXR5X2lkGAEgASgNEnoKD2J5X2hlcm9fdGFyZ2V0cxgCIAMo",
            "CzJhLmdvb2dsZS5wcm90b2J1Zi5DRE9UQU1hdGNoUHJpdmF0ZU1ldGFkYXRh",
            "LlRlYW0uUGxheWVyLkNvbWJhdFNlZ21lbnQuRGFtYWdlQnlBYmlsaXR5LkJ5",
            "SGVyb1RhcmdldBovCgxCeUhlcm9UYXJnZXQSDwoHaGVyb19pZBgBIAEoDRIO",
            "CgZkYW1hZ2UYAiABKA0a+AEKCkJ1ZmZSZWNvcmQSFwoPYnVmZl9hYmlsaXR5",
            "X2lkGAEgASgNEhoKEmJ1ZmZfbW9kaWZpZXJfbmFtZRgDIAEoCRJnCg9ieV9o",
            "ZXJvX3RhcmdldHMYAiADKAsyTi5nb29nbGUucHJvdG9idWYuQ0RPVEFNYXRj",
            "aFByaXZhdGVNZXRhZGF0YS5UZWFtLlBsYXllci5CdWZmUmVjb3JkLkJ5SGVy",
            "b1RhcmdldBpMCgxCeUhlcm9UYXJnZXQSDwoHaGVyb19pZBgBIAEoDRIYChBl",
            "bGFwc2VkX2R1cmF0aW9uGAIgASgCEhEKCWlzX2hpZGRlbhgDIAEoCBplCghC",
            "dWlsZGluZxIRCgl1bml0X25hbWUYASABKAkSGAoQcG9zaXRpb25fcXVhbnRf",
            "eBgCIAEoDRIYChBwb3NpdGlvbl9xdWFudF95GAMgASgNEhIKCmRlYXRoX3Rp",
            "bWUYBCABKAJCEIABAKoCClByb3RvLkRvdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.Dota.S2BaseGcmessagesReflection.Descriptor, global::Proto.Dota.S2DotaGcmessagesCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CLobbyTimedRewardDetails), global::Proto.Dota.CLobbyTimedRewardDetails.Parser, new[]{ "ItemDefIndex", "IsSupplyCrate", "IsTimedDrop", "AccountId", "Origin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadataFile), global::Proto.Dota.CDOTAMatchMetadataFile.Parser, new[]{ "Version", "MatchId", "Metadata", "PrivateMetadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata), global::Proto.Dota.CDOTAMatchMetadata.Parser, new[]{ "Teams", "ItemRewards", "LobbyId", "ReportUntilTime", "EventGameCustomTable", "PrimaryEventId", "MatchTips" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Parser, new[]{ "DotaTeam", "Players", "GraphExperience", "GraphGoldEarned", "GraphNetWorth", "CmFirstPick", "CmCaptainPlayerId", "CmBans", "CmPicks", "CmPenalty" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.PlayerKill), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.PlayerKill.Parser, new[]{ "VictimSlot", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.ItemPurchase), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.ItemPurchase.Parser, new[]{ "ItemId", "PurchaseTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.InventorySnapshot), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.InventorySnapshot.Parser, new[]{ "ItemId", "GameTime", "Kills", "Deaths", "Assists", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.AutoStyleCriteria), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.AutoStyleCriteria.Parser, new[]{ "NameToken", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.StrangeGemProgress), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.StrangeGemProgress.Parser, new[]{ "KillEaterType", "GemItemDefIndex", "HeroId", "StartingValue", "EndingValue", "OwnerItemDefIndex", "OwnerItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.VictoryPrediction), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.VictoryPrediction.Parser, new[]{ "ItemId", "ItemDefIndex", "StartingValue", "IsVictory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.SubChallenge), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.SubChallenge.Parser, new[]{ "SlotId", "StartValue", "EndValue", "Completed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.EventData), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.EventData.Parser, new[]{ "EventId", "EventPoints", "ChallengeInstanceId", "ChallengeQuestId", "ChallengeQuestChallengeId", "ChallengeCompleted", "ChallengeRankCompleted", "ChallengeRankPreviouslyCompleted", "EventOwned", "SubChallengesWithProgress", "WagerWinnings", "CavernChallengeActive", "CavernChallengeWinnings", "AmountWagered", "TeamWagerAmount", "PeriodicPointAdjustments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.Player), global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.Player.Parser, new[]{ "AccountId", "AbilityUpgrades", "PlayerSlot", "EquippedEconItems", "Kills", "Items", "AvgKillsX16", "AvgDeathsX16", "AvgAssistsX16", "AvgGpmX16", "AvgXpmX16", "BestKillsX16", "BestAssistsX16", "BestGpmX16", "BestXpmX16", "WinStreak", "BestWinStreak", "FightScore", "FarmScore", "SupportScore", "PushScore", "LevelUpTimes", "GraphNetWorth", "InventorySnapshot", "AvgStatsCalibrated", "AutoStyleCriteria", "EventId", "EventPoints", "EventData", "StrangeGemProgress", "HeroXp", "CampsStacked", "VictoryPrediction", "LaneSelectionFlags" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata), global::Proto.Dota.CDOTAMatchPrivateMetadata.Parser, new[]{ "Teams", "GraphWinProbability" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Parser, new[]{ "DotaTeam", "Players", "Buildings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Parser, new[]{ "AccountId", "PlayerSlot", "PositionStream", "CombatSegments", "DamageUnitNames", "BuffRecords", "GraphKills", "GraphDeaths", "GraphAssists", "GraphLasthits", "GraphDenies" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Parser, new[]{ "GameTime", "DamageByAbility" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Parser, new[]{ "SourceUnitIndex", "AbilityId", "ByHeroTargets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Types.ByHeroTarget), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Types.ByHeroTarget.Parser, new[]{ "HeroId", "Damage" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Parser, new[]{ "BuffAbilityId", "BuffModifierName", "ByHeroTargets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Types.ByHeroTarget), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Types.ByHeroTarget.Parser, new[]{ "HeroId", "ElapsedDuration", "IsHidden" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Building), global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Building.Parser, new[]{ "UnitName", "PositionQuantX", "PositionQuantY", "DeathTime" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CLobbyTimedRewardDetails : pb::IMessage<CLobbyTimedRewardDetails> {
    private static readonly pb::MessageParser<CLobbyTimedRewardDetails> _parser = new pb::MessageParser<CLobbyTimedRewardDetails>(() => new CLobbyTimedRewardDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLobbyTimedRewardDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaMatchMetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTimedRewardDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTimedRewardDetails(CLobbyTimedRewardDetails other) : this() {
      itemDefIndex_ = other.itemDefIndex_;
      isSupplyCrate_ = other.isSupplyCrate_;
      isTimedDrop_ = other.isTimedDrop_;
      accountId_ = other.accountId_;
      origin_ = other.origin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLobbyTimedRewardDetails Clone() {
      return new CLobbyTimedRewardDetails(this);
    }

    /// <summary>Field number for the "item_def_index" field.</summary>
    public const int ItemDefIndexFieldNumber = 2;
    private uint itemDefIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemDefIndex {
      get { return itemDefIndex_; }
      set {
        itemDefIndex_ = value;
      }
    }

    /// <summary>Field number for the "is_supply_crate" field.</summary>
    public const int IsSupplyCrateFieldNumber = 3;
    private bool isSupplyCrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSupplyCrate {
      get { return isSupplyCrate_; }
      set {
        isSupplyCrate_ = value;
      }
    }

    /// <summary>Field number for the "is_timed_drop" field.</summary>
    public const int IsTimedDropFieldNumber = 4;
    private bool isTimedDrop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimedDrop {
      get { return isTimedDrop_; }
      set {
        isTimedDrop_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 5;
    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 6;
    private uint origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLobbyTimedRewardDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLobbyTimedRewardDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemDefIndex != other.ItemDefIndex) return false;
      if (IsSupplyCrate != other.IsSupplyCrate) return false;
      if (IsTimedDrop != other.IsTimedDrop) return false;
      if (AccountId != other.AccountId) return false;
      if (Origin != other.Origin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemDefIndex != 0) hash ^= ItemDefIndex.GetHashCode();
      if (IsSupplyCrate != false) hash ^= IsSupplyCrate.GetHashCode();
      if (IsTimedDrop != false) hash ^= IsTimedDrop.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (Origin != 0) hash ^= Origin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemDefIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemDefIndex);
      }
      if (IsSupplyCrate != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSupplyCrate);
      }
      if (IsTimedDrop != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTimedDrop);
      }
      if (AccountId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AccountId);
      }
      if (Origin != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemDefIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDefIndex);
      }
      if (IsSupplyCrate != false) {
        size += 1 + 1;
      }
      if (IsTimedDrop != false) {
        size += 1 + 1;
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (Origin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Origin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLobbyTimedRewardDetails other) {
      if (other == null) {
        return;
      }
      if (other.ItemDefIndex != 0) {
        ItemDefIndex = other.ItemDefIndex;
      }
      if (other.IsSupplyCrate != false) {
        IsSupplyCrate = other.IsSupplyCrate;
      }
      if (other.IsTimedDrop != false) {
        IsTimedDrop = other.IsTimedDrop;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.Origin != 0) {
        Origin = other.Origin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            ItemDefIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            IsSupplyCrate = input.ReadBool();
            break;
          }
          case 32: {
            IsTimedDrop = input.ReadBool();
            break;
          }
          case 40: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 48: {
            Origin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMatchMetadataFile : pb::IMessage<CDOTAMatchMetadataFile> {
    private static readonly pb::MessageParser<CDOTAMatchMetadataFile> _parser = new pb::MessageParser<CDOTAMatchMetadataFile>(() => new CDOTAMatchMetadataFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMatchMetadataFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaMatchMetadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchMetadataFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchMetadataFile(CDOTAMatchMetadataFile other) : this() {
      version_ = other.version_;
      matchId_ = other.matchId_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      privateMetadata_ = other.privateMetadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchMetadataFile Clone() {
      return new CDOTAMatchMetadataFile(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private global::Proto.Dota.CDOTAMatchMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CDOTAMatchMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "private_metadata" field.</summary>
    public const int PrivateMetadataFieldNumber = 5;
    private pb::ByteString privateMetadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateMetadata {
      get { return privateMetadata_; }
      set {
        privateMetadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMatchMetadataFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMatchMetadataFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (PrivateMetadata != other.PrivateMetadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (PrivateMetadata.Length != 0) hash ^= PrivateMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (MatchId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
      if (PrivateMetadata.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PrivateMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (MatchId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (PrivateMetadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMatchMetadataFile other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.MatchId != 0UL) {
        MatchId = other.MatchId;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Proto.Dota.CDOTAMatchMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.PrivateMetadata.Length != 0) {
        PrivateMetadata = other.PrivateMetadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (metadata_ == null) {
              metadata_ = new global::Proto.Dota.CDOTAMatchMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 42: {
            PrivateMetadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDOTAMatchMetadata : pb::IMessage<CDOTAMatchMetadata> {
    private static readonly pb::MessageParser<CDOTAMatchMetadata> _parser = new pb::MessageParser<CDOTAMatchMetadata>(() => new CDOTAMatchMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMatchMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaMatchMetadataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchMetadata(CDOTAMatchMetadata other) : this() {
      teams_ = other.teams_.Clone();
      itemRewards_ = other.itemRewards_.Clone();
      lobbyId_ = other.lobbyId_;
      reportUntilTime_ = other.reportUntilTime_;
      eventGameCustomTable_ = other.eventGameCustomTable_;
      primaryEventId_ = other.primaryEventId_;
      matchTips_ = other.matchTips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchMetadata Clone() {
      return new CDOTAMatchMetadata(this);
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team> teams_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "item_rewards" field.</summary>
    public const int ItemRewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Dota.CLobbyTimedRewardDetails> _repeated_itemRewards_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CLobbyTimedRewardDetails.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CLobbyTimedRewardDetails> itemRewards_ = new pbc::RepeatedField<global::Proto.Dota.CLobbyTimedRewardDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CLobbyTimedRewardDetails> ItemRewards {
      get { return itemRewards_; }
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 3;
    private ulong lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "report_until_time" field.</summary>
    public const int ReportUntilTimeFieldNumber = 4;
    private ulong reportUntilTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReportUntilTime {
      get { return reportUntilTime_; }
      set {
        reportUntilTime_ = value;
      }
    }

    /// <summary>Field number for the "event_game_custom_table" field.</summary>
    public const int EventGameCustomTableFieldNumber = 5;
    private pb::ByteString eventGameCustomTable_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventGameCustomTable {
      get { return eventGameCustomTable_; }
      set {
        eventGameCustomTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_event_id" field.</summary>
    public const int PrimaryEventIdFieldNumber = 6;
    private uint primaryEventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrimaryEventId {
      get { return primaryEventId_; }
      set {
        primaryEventId_ = value;
      }
    }

    /// <summary>Field number for the "match_tips" field.</summary>
    public const int MatchTipsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsgMatchTips> _repeated_matchTips_codec
        = pb::FieldCodec.ForMessage(58, global::Proto.Dota.CMsgMatchTips.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsgMatchTips> matchTips_ = new pbc::RepeatedField<global::Proto.Dota.CMsgMatchTips>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsgMatchTips> MatchTips {
      get { return matchTips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMatchMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMatchMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teams_.Equals(other.teams_)) return false;
      if(!itemRewards_.Equals(other.itemRewards_)) return false;
      if (LobbyId != other.LobbyId) return false;
      if (ReportUntilTime != other.ReportUntilTime) return false;
      if (EventGameCustomTable != other.EventGameCustomTable) return false;
      if (PrimaryEventId != other.PrimaryEventId) return false;
      if(!matchTips_.Equals(other.matchTips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teams_.GetHashCode();
      hash ^= itemRewards_.GetHashCode();
      if (LobbyId != 0UL) hash ^= LobbyId.GetHashCode();
      if (ReportUntilTime != 0UL) hash ^= ReportUntilTime.GetHashCode();
      if (EventGameCustomTable.Length != 0) hash ^= EventGameCustomTable.GetHashCode();
      if (PrimaryEventId != 0) hash ^= PrimaryEventId.GetHashCode();
      hash ^= matchTips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
      itemRewards_.WriteTo(output, _repeated_itemRewards_codec);
      if (LobbyId != 0UL) {
        output.WriteRawTag(25);
        output.WriteFixed64(LobbyId);
      }
      if (ReportUntilTime != 0UL) {
        output.WriteRawTag(33);
        output.WriteFixed64(ReportUntilTime);
      }
      if (EventGameCustomTable.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EventGameCustomTable);
      }
      if (PrimaryEventId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PrimaryEventId);
      }
      matchTips_.WriteTo(output, _repeated_matchTips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      size += itemRewards_.CalculateSize(_repeated_itemRewards_codec);
      if (LobbyId != 0UL) {
        size += 1 + 8;
      }
      if (ReportUntilTime != 0UL) {
        size += 1 + 8;
      }
      if (EventGameCustomTable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventGameCustomTable);
      }
      if (PrimaryEventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrimaryEventId);
      }
      size += matchTips_.CalculateSize(_repeated_matchTips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMatchMetadata other) {
      if (other == null) {
        return;
      }
      teams_.Add(other.teams_);
      itemRewards_.Add(other.itemRewards_);
      if (other.LobbyId != 0UL) {
        LobbyId = other.LobbyId;
      }
      if (other.ReportUntilTime != 0UL) {
        ReportUntilTime = other.ReportUntilTime;
      }
      if (other.EventGameCustomTable.Length != 0) {
        EventGameCustomTable = other.EventGameCustomTable;
      }
      if (other.PrimaryEventId != 0) {
        PrimaryEventId = other.PrimaryEventId;
      }
      matchTips_.Add(other.matchTips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 18: {
            itemRewards_.AddEntriesFrom(input, _repeated_itemRewards_codec);
            break;
          }
          case 25: {
            LobbyId = input.ReadFixed64();
            break;
          }
          case 33: {
            ReportUntilTime = input.ReadFixed64();
            break;
          }
          case 42: {
            EventGameCustomTable = input.ReadBytes();
            break;
          }
          case 48: {
            PrimaryEventId = input.ReadUInt32();
            break;
          }
          case 58: {
            matchTips_.AddEntriesFrom(input, _repeated_matchTips_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAMatchMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Team : pb::IMessage<Team> {
        private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Team> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAMatchMetadata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team(Team other) : this() {
          dotaTeam_ = other.dotaTeam_;
          players_ = other.players_.Clone();
          graphExperience_ = other.graphExperience_.Clone();
          graphGoldEarned_ = other.graphGoldEarned_.Clone();
          graphNetWorth_ = other.graphNetWorth_.Clone();
          cmFirstPick_ = other.cmFirstPick_;
          cmCaptainPlayerId_ = other.cmCaptainPlayerId_;
          cmBans_ = other.cmBans_.Clone();
          cmPicks_ = other.cmPicks_.Clone();
          cmPenalty_ = other.cmPenalty_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team Clone() {
          return new Team(this);
        }

        /// <summary>Field number for the "dota_team" field.</summary>
        public const int DotaTeamFieldNumber = 1;
        private uint dotaTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DotaTeam {
          get { return dotaTeam_; }
          set {
            dotaTeam_ = value;
          }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.Player> _repeated_players_codec
            = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.Player.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.Player> players_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.Player>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.Player> Players {
          get { return players_; }
        }

        /// <summary>Field number for the "graph_experience" field.</summary>
        public const int GraphExperienceFieldNumber = 3;
        private static readonly pb::FieldCodec<float> _repeated_graphExperience_codec
            = pb::FieldCodec.ForFloat(26);
        private readonly pbc::RepeatedField<float> graphExperience_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> GraphExperience {
          get { return graphExperience_; }
        }

        /// <summary>Field number for the "graph_gold_earned" field.</summary>
        public const int GraphGoldEarnedFieldNumber = 4;
        private static readonly pb::FieldCodec<float> _repeated_graphGoldEarned_codec
            = pb::FieldCodec.ForFloat(34);
        private readonly pbc::RepeatedField<float> graphGoldEarned_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> GraphGoldEarned {
          get { return graphGoldEarned_; }
        }

        /// <summary>Field number for the "graph_net_worth" field.</summary>
        public const int GraphNetWorthFieldNumber = 5;
        private static readonly pb::FieldCodec<float> _repeated_graphNetWorth_codec
            = pb::FieldCodec.ForFloat(42);
        private readonly pbc::RepeatedField<float> graphNetWorth_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> GraphNetWorth {
          get { return graphNetWorth_; }
        }

        /// <summary>Field number for the "cm_first_pick" field.</summary>
        public const int CmFirstPickFieldNumber = 6;
        private bool cmFirstPick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CmFirstPick {
          get { return cmFirstPick_; }
          set {
            cmFirstPick_ = value;
          }
        }

        /// <summary>Field number for the "cm_captain_player_id" field.</summary>
        public const int CmCaptainPlayerIdFieldNumber = 7;
        private uint cmCaptainPlayerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CmCaptainPlayerId {
          get { return cmCaptainPlayerId_; }
          set {
            cmCaptainPlayerId_ = value;
          }
        }

        /// <summary>Field number for the "cm_bans" field.</summary>
        public const int CmBansFieldNumber = 8;
        private static readonly pb::FieldCodec<uint> _repeated_cmBans_codec
            = pb::FieldCodec.ForUInt32(66);
        private readonly pbc::RepeatedField<uint> cmBans_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> CmBans {
          get { return cmBans_; }
        }

        /// <summary>Field number for the "cm_picks" field.</summary>
        public const int CmPicksFieldNumber = 9;
        private static readonly pb::FieldCodec<uint> _repeated_cmPicks_codec
            = pb::FieldCodec.ForUInt32(74);
        private readonly pbc::RepeatedField<uint> cmPicks_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> CmPicks {
          get { return cmPicks_; }
        }

        /// <summary>Field number for the "cm_penalty" field.</summary>
        public const int CmPenaltyFieldNumber = 10;
        private uint cmPenalty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CmPenalty {
          get { return cmPenalty_; }
          set {
            cmPenalty_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Team);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Team other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DotaTeam != other.DotaTeam) return false;
          if(!players_.Equals(other.players_)) return false;
          if(!graphExperience_.Equals(other.graphExperience_)) return false;
          if(!graphGoldEarned_.Equals(other.graphGoldEarned_)) return false;
          if(!graphNetWorth_.Equals(other.graphNetWorth_)) return false;
          if (CmFirstPick != other.CmFirstPick) return false;
          if (CmCaptainPlayerId != other.CmCaptainPlayerId) return false;
          if(!cmBans_.Equals(other.cmBans_)) return false;
          if(!cmPicks_.Equals(other.cmPicks_)) return false;
          if (CmPenalty != other.CmPenalty) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DotaTeam != 0) hash ^= DotaTeam.GetHashCode();
          hash ^= players_.GetHashCode();
          hash ^= graphExperience_.GetHashCode();
          hash ^= graphGoldEarned_.GetHashCode();
          hash ^= graphNetWorth_.GetHashCode();
          if (CmFirstPick != false) hash ^= CmFirstPick.GetHashCode();
          if (CmCaptainPlayerId != 0) hash ^= CmCaptainPlayerId.GetHashCode();
          hash ^= cmBans_.GetHashCode();
          hash ^= cmPicks_.GetHashCode();
          if (CmPenalty != 0) hash ^= CmPenalty.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DotaTeam != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(DotaTeam);
          }
          players_.WriteTo(output, _repeated_players_codec);
          graphExperience_.WriteTo(output, _repeated_graphExperience_codec);
          graphGoldEarned_.WriteTo(output, _repeated_graphGoldEarned_codec);
          graphNetWorth_.WriteTo(output, _repeated_graphNetWorth_codec);
          if (CmFirstPick != false) {
            output.WriteRawTag(48);
            output.WriteBool(CmFirstPick);
          }
          if (CmCaptainPlayerId != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(CmCaptainPlayerId);
          }
          cmBans_.WriteTo(output, _repeated_cmBans_codec);
          cmPicks_.WriteTo(output, _repeated_cmPicks_codec);
          if (CmPenalty != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(CmPenalty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DotaTeam != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DotaTeam);
          }
          size += players_.CalculateSize(_repeated_players_codec);
          size += graphExperience_.CalculateSize(_repeated_graphExperience_codec);
          size += graphGoldEarned_.CalculateSize(_repeated_graphGoldEarned_codec);
          size += graphNetWorth_.CalculateSize(_repeated_graphNetWorth_codec);
          if (CmFirstPick != false) {
            size += 1 + 1;
          }
          if (CmCaptainPlayerId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CmCaptainPlayerId);
          }
          size += cmBans_.CalculateSize(_repeated_cmBans_codec);
          size += cmPicks_.CalculateSize(_repeated_cmPicks_codec);
          if (CmPenalty != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CmPenalty);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Team other) {
          if (other == null) {
            return;
          }
          if (other.DotaTeam != 0) {
            DotaTeam = other.DotaTeam;
          }
          players_.Add(other.players_);
          graphExperience_.Add(other.graphExperience_);
          graphGoldEarned_.Add(other.graphGoldEarned_);
          graphNetWorth_.Add(other.graphNetWorth_);
          if (other.CmFirstPick != false) {
            CmFirstPick = other.CmFirstPick;
          }
          if (other.CmCaptainPlayerId != 0) {
            CmCaptainPlayerId = other.CmCaptainPlayerId;
          }
          cmBans_.Add(other.cmBans_);
          cmPicks_.Add(other.cmPicks_);
          if (other.CmPenalty != 0) {
            CmPenalty = other.CmPenalty;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DotaTeam = input.ReadUInt32();
                break;
              }
              case 18: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 26:
              case 29: {
                graphExperience_.AddEntriesFrom(input, _repeated_graphExperience_codec);
                break;
              }
              case 34:
              case 37: {
                graphGoldEarned_.AddEntriesFrom(input, _repeated_graphGoldEarned_codec);
                break;
              }
              case 42:
              case 45: {
                graphNetWorth_.AddEntriesFrom(input, _repeated_graphNetWorth_codec);
                break;
              }
              case 48: {
                CmFirstPick = input.ReadBool();
                break;
              }
              case 56: {
                CmCaptainPlayerId = input.ReadUInt32();
                break;
              }
              case 66:
              case 64: {
                cmBans_.AddEntriesFrom(input, _repeated_cmBans_codec);
                break;
              }
              case 74:
              case 72: {
                cmPicks_.AddEntriesFrom(input, _repeated_cmPicks_codec);
                break;
              }
              case 80: {
                CmPenalty = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Team message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PlayerKill : pb::IMessage<PlayerKill> {
            private static readonly pb::MessageParser<PlayerKill> _parser = new pb::MessageParser<PlayerKill>(() => new PlayerKill());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PlayerKill> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerKill() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerKill(PlayerKill other) : this() {
              victimSlot_ = other.victimSlot_;
              count_ = other.count_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerKill Clone() {
              return new PlayerKill(this);
            }

            /// <summary>Field number for the "victim_slot" field.</summary>
            public const int VictimSlotFieldNumber = 1;
            private uint victimSlot_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint VictimSlot {
              get { return victimSlot_; }
              set {
                victimSlot_ = value;
              }
            }

            /// <summary>Field number for the "count" field.</summary>
            public const int CountFieldNumber = 2;
            private uint count_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Count {
              get { return count_; }
              set {
                count_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PlayerKill);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PlayerKill other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (VictimSlot != other.VictimSlot) return false;
              if (Count != other.Count) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (VictimSlot != 0) hash ^= VictimSlot.GetHashCode();
              if (Count != 0) hash ^= Count.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (VictimSlot != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(VictimSlot);
              }
              if (Count != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Count);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (VictimSlot != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VictimSlot);
              }
              if (Count != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PlayerKill other) {
              if (other == null) {
                return;
              }
              if (other.VictimSlot != 0) {
                VictimSlot = other.VictimSlot;
              }
              if (other.Count != 0) {
                Count = other.Count;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    VictimSlot = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Count = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ItemPurchase : pb::IMessage<ItemPurchase> {
            private static readonly pb::MessageParser<ItemPurchase> _parser = new pb::MessageParser<ItemPurchase>(() => new ItemPurchase());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ItemPurchase> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ItemPurchase() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ItemPurchase(ItemPurchase other) : this() {
              itemId_ = other.itemId_;
              purchaseTime_ = other.purchaseTime_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ItemPurchase Clone() {
              return new ItemPurchase(this);
            }

            /// <summary>Field number for the "item_id" field.</summary>
            public const int ItemIdFieldNumber = 1;
            private uint itemId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ItemId {
              get { return itemId_; }
              set {
                itemId_ = value;
              }
            }

            /// <summary>Field number for the "purchase_time" field.</summary>
            public const int PurchaseTimeFieldNumber = 2;
            private int purchaseTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int PurchaseTime {
              get { return purchaseTime_; }
              set {
                purchaseTime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ItemPurchase);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ItemPurchase other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ItemId != other.ItemId) return false;
              if (PurchaseTime != other.PurchaseTime) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ItemId != 0) hash ^= ItemId.GetHashCode();
              if (PurchaseTime != 0) hash ^= PurchaseTime.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ItemId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(ItemId);
              }
              if (PurchaseTime != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(PurchaseTime);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ItemId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
              }
              if (PurchaseTime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurchaseTime);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ItemPurchase other) {
              if (other == null) {
                return;
              }
              if (other.ItemId != 0) {
                ItemId = other.ItemId;
              }
              if (other.PurchaseTime != 0) {
                PurchaseTime = other.PurchaseTime;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    ItemId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    PurchaseTime = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class InventorySnapshot : pb::IMessage<InventorySnapshot> {
            private static readonly pb::MessageParser<InventorySnapshot> _parser = new pb::MessageParser<InventorySnapshot>(() => new InventorySnapshot());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<InventorySnapshot> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventorySnapshot() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventorySnapshot(InventorySnapshot other) : this() {
              itemId_ = other.itemId_.Clone();
              gameTime_ = other.gameTime_;
              kills_ = other.kills_;
              deaths_ = other.deaths_;
              assists_ = other.assists_;
              level_ = other.level_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventorySnapshot Clone() {
              return new InventorySnapshot(this);
            }

            /// <summary>Field number for the "item_id" field.</summary>
            public const int ItemIdFieldNumber = 1;
            private static readonly pb::FieldCodec<uint> _repeated_itemId_codec
                = pb::FieldCodec.ForUInt32(10);
            private readonly pbc::RepeatedField<uint> itemId_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> ItemId {
              get { return itemId_; }
            }

            /// <summary>Field number for the "game_time" field.</summary>
            public const int GameTimeFieldNumber = 2;
            private int gameTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int GameTime {
              get { return gameTime_; }
              set {
                gameTime_ = value;
              }
            }

            /// <summary>Field number for the "kills" field.</summary>
            public const int KillsFieldNumber = 3;
            private uint kills_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Kills {
              get { return kills_; }
              set {
                kills_ = value;
              }
            }

            /// <summary>Field number for the "deaths" field.</summary>
            public const int DeathsFieldNumber = 4;
            private uint deaths_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Deaths {
              get { return deaths_; }
              set {
                deaths_ = value;
              }
            }

            /// <summary>Field number for the "assists" field.</summary>
            public const int AssistsFieldNumber = 5;
            private uint assists_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Assists {
              get { return assists_; }
              set {
                assists_ = value;
              }
            }

            /// <summary>Field number for the "level" field.</summary>
            public const int LevelFieldNumber = 6;
            private uint level_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Level {
              get { return level_; }
              set {
                level_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as InventorySnapshot);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(InventorySnapshot other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!itemId_.Equals(other.itemId_)) return false;
              if (GameTime != other.GameTime) return false;
              if (Kills != other.Kills) return false;
              if (Deaths != other.Deaths) return false;
              if (Assists != other.Assists) return false;
              if (Level != other.Level) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= itemId_.GetHashCode();
              if (GameTime != 0) hash ^= GameTime.GetHashCode();
              if (Kills != 0) hash ^= Kills.GetHashCode();
              if (Deaths != 0) hash ^= Deaths.GetHashCode();
              if (Assists != 0) hash ^= Assists.GetHashCode();
              if (Level != 0) hash ^= Level.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              itemId_.WriteTo(output, _repeated_itemId_codec);
              if (GameTime != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(GameTime);
              }
              if (Kills != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Kills);
              }
              if (Deaths != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(Deaths);
              }
              if (Assists != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(Assists);
              }
              if (Level != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(Level);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += itemId_.CalculateSize(_repeated_itemId_codec);
              if (GameTime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
              }
              if (Kills != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kills);
              }
              if (Deaths != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deaths);
              }
              if (Assists != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Assists);
              }
              if (Level != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(InventorySnapshot other) {
              if (other == null) {
                return;
              }
              itemId_.Add(other.itemId_);
              if (other.GameTime != 0) {
                GameTime = other.GameTime;
              }
              if (other.Kills != 0) {
                Kills = other.Kills;
              }
              if (other.Deaths != 0) {
                Deaths = other.Deaths;
              }
              if (other.Assists != 0) {
                Assists = other.Assists;
              }
              if (other.Level != 0) {
                Level = other.Level;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    itemId_.AddEntriesFrom(input, _repeated_itemId_codec);
                    break;
                  }
                  case 16: {
                    GameTime = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Kills = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    Deaths = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    Assists = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    Level = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class AutoStyleCriteria : pb::IMessage<AutoStyleCriteria> {
            private static readonly pb::MessageParser<AutoStyleCriteria> _parser = new pb::MessageParser<AutoStyleCriteria>(() => new AutoStyleCriteria());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<AutoStyleCriteria> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AutoStyleCriteria() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AutoStyleCriteria(AutoStyleCriteria other) : this() {
              nameToken_ = other.nameToken_;
              value_ = other.value_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AutoStyleCriteria Clone() {
              return new AutoStyleCriteria(this);
            }

            /// <summary>Field number for the "name_token" field.</summary>
            public const int NameTokenFieldNumber = 1;
            private uint nameToken_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint NameToken {
              get { return nameToken_; }
              set {
                nameToken_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private float value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as AutoStyleCriteria);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(AutoStyleCriteria other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (NameToken != other.NameToken) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (NameToken != 0) hash ^= NameToken.GetHashCode();
              if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (NameToken != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(NameToken);
              }
              if (Value != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Value);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (NameToken != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NameToken);
              }
              if (Value != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(AutoStyleCriteria other) {
              if (other == null) {
                return;
              }
              if (other.NameToken != 0) {
                NameToken = other.NameToken;
              }
              if (other.Value != 0F) {
                Value = other.Value;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    NameToken = input.ReadUInt32();
                    break;
                  }
                  case 21: {
                    Value = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class StrangeGemProgress : pb::IMessage<StrangeGemProgress> {
            private static readonly pb::MessageParser<StrangeGemProgress> _parser = new pb::MessageParser<StrangeGemProgress>(() => new StrangeGemProgress());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<StrangeGemProgress> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StrangeGemProgress() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StrangeGemProgress(StrangeGemProgress other) : this() {
              killEaterType_ = other.killEaterType_;
              gemItemDefIndex_ = other.gemItemDefIndex_;
              HeroId_ = other.HeroId_;
              startingValue_ = other.startingValue_;
              endingValue_ = other.endingValue_;
              ownerItemDefIndex_ = other.ownerItemDefIndex_;
              ownerItemId_ = other.ownerItemId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StrangeGemProgress Clone() {
              return new StrangeGemProgress(this);
            }

            /// <summary>Field number for the "kill_eater_type" field.</summary>
            public const int KillEaterTypeFieldNumber = 1;
            private uint killEaterType_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint KillEaterType {
              get { return killEaterType_; }
              set {
                killEaterType_ = value;
              }
            }

            /// <summary>Field number for the "gem_item_def_index" field.</summary>
            public const int GemItemDefIndexFieldNumber = 2;
            private uint gemItemDefIndex_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint GemItemDefIndex {
              get { return gemItemDefIndex_; }
              set {
                gemItemDefIndex_ = value;
              }
            }

            /// <summary>Field number for the "_hero_id" field.</summary>
            public const int HeroIdFieldNumber = 3;
            private uint HeroId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint HeroId {
              get { return HeroId_; }
              set {
                HeroId_ = value;
              }
            }

            /// <summary>Field number for the "starting_value" field.</summary>
            public const int StartingValueFieldNumber = 4;
            private uint startingValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint StartingValue {
              get { return startingValue_; }
              set {
                startingValue_ = value;
              }
            }

            /// <summary>Field number for the "ending_value" field.</summary>
            public const int EndingValueFieldNumber = 5;
            private uint endingValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EndingValue {
              get { return endingValue_; }
              set {
                endingValue_ = value;
              }
            }

            /// <summary>Field number for the "owner_item_def_index" field.</summary>
            public const int OwnerItemDefIndexFieldNumber = 6;
            private uint ownerItemDefIndex_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint OwnerItemDefIndex {
              get { return ownerItemDefIndex_; }
              set {
                ownerItemDefIndex_ = value;
              }
            }

            /// <summary>Field number for the "owner_item_id" field.</summary>
            public const int OwnerItemIdFieldNumber = 7;
            private ulong ownerItemId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong OwnerItemId {
              get { return ownerItemId_; }
              set {
                ownerItemId_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as StrangeGemProgress);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(StrangeGemProgress other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (KillEaterType != other.KillEaterType) return false;
              if (GemItemDefIndex != other.GemItemDefIndex) return false;
              if (HeroId != other.HeroId) return false;
              if (StartingValue != other.StartingValue) return false;
              if (EndingValue != other.EndingValue) return false;
              if (OwnerItemDefIndex != other.OwnerItemDefIndex) return false;
              if (OwnerItemId != other.OwnerItemId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (KillEaterType != 0) hash ^= KillEaterType.GetHashCode();
              if (GemItemDefIndex != 0) hash ^= GemItemDefIndex.GetHashCode();
              if (HeroId != 0) hash ^= HeroId.GetHashCode();
              if (StartingValue != 0) hash ^= StartingValue.GetHashCode();
              if (EndingValue != 0) hash ^= EndingValue.GetHashCode();
              if (OwnerItemDefIndex != 0) hash ^= OwnerItemDefIndex.GetHashCode();
              if (OwnerItemId != 0UL) hash ^= OwnerItemId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (KillEaterType != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(KillEaterType);
              }
              if (GemItemDefIndex != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(GemItemDefIndex);
              }
              if (HeroId != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(HeroId);
              }
              if (StartingValue != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(StartingValue);
              }
              if (EndingValue != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(EndingValue);
              }
              if (OwnerItemDefIndex != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(OwnerItemDefIndex);
              }
              if (OwnerItemId != 0UL) {
                output.WriteRawTag(56);
                output.WriteUInt64(OwnerItemId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (KillEaterType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillEaterType);
              }
              if (GemItemDefIndex != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GemItemDefIndex);
              }
              if (HeroId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
              }
              if (StartingValue != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingValue);
              }
              if (EndingValue != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndingValue);
              }
              if (OwnerItemDefIndex != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerItemDefIndex);
              }
              if (OwnerItemId != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OwnerItemId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(StrangeGemProgress other) {
              if (other == null) {
                return;
              }
              if (other.KillEaterType != 0) {
                KillEaterType = other.KillEaterType;
              }
              if (other.GemItemDefIndex != 0) {
                GemItemDefIndex = other.GemItemDefIndex;
              }
              if (other.HeroId != 0) {
                HeroId = other.HeroId;
              }
              if (other.StartingValue != 0) {
                StartingValue = other.StartingValue;
              }
              if (other.EndingValue != 0) {
                EndingValue = other.EndingValue;
              }
              if (other.OwnerItemDefIndex != 0) {
                OwnerItemDefIndex = other.OwnerItemDefIndex;
              }
              if (other.OwnerItemId != 0UL) {
                OwnerItemId = other.OwnerItemId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    KillEaterType = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    GemItemDefIndex = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    HeroId = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    StartingValue = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    EndingValue = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    OwnerItemDefIndex = input.ReadUInt32();
                    break;
                  }
                  case 56: {
                    OwnerItemId = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class VictoryPrediction : pb::IMessage<VictoryPrediction> {
            private static readonly pb::MessageParser<VictoryPrediction> _parser = new pb::MessageParser<VictoryPrediction>(() => new VictoryPrediction());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<VictoryPrediction> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VictoryPrediction() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VictoryPrediction(VictoryPrediction other) : this() {
              itemId_ = other.itemId_;
              itemDefIndex_ = other.itemDefIndex_;
              startingValue_ = other.startingValue_;
              isVictory_ = other.isVictory_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VictoryPrediction Clone() {
              return new VictoryPrediction(this);
            }

            /// <summary>Field number for the "item_id" field.</summary>
            public const int ItemIdFieldNumber = 1;
            private ulong itemId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong ItemId {
              get { return itemId_; }
              set {
                itemId_ = value;
              }
            }

            /// <summary>Field number for the "item_def_index" field.</summary>
            public const int ItemDefIndexFieldNumber = 2;
            private uint itemDefIndex_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ItemDefIndex {
              get { return itemDefIndex_; }
              set {
                itemDefIndex_ = value;
              }
            }

            /// <summary>Field number for the "starting_value" field.</summary>
            public const int StartingValueFieldNumber = 3;
            private uint startingValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint StartingValue {
              get { return startingValue_; }
              set {
                startingValue_ = value;
              }
            }

            /// <summary>Field number for the "is_victory" field.</summary>
            public const int IsVictoryFieldNumber = 4;
            private bool isVictory_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsVictory {
              get { return isVictory_; }
              set {
                isVictory_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as VictoryPrediction);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(VictoryPrediction other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ItemId != other.ItemId) return false;
              if (ItemDefIndex != other.ItemDefIndex) return false;
              if (StartingValue != other.StartingValue) return false;
              if (IsVictory != other.IsVictory) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ItemId != 0UL) hash ^= ItemId.GetHashCode();
              if (ItemDefIndex != 0) hash ^= ItemDefIndex.GetHashCode();
              if (StartingValue != 0) hash ^= StartingValue.GetHashCode();
              if (IsVictory != false) hash ^= IsVictory.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ItemId != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(ItemId);
              }
              if (ItemDefIndex != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(ItemDefIndex);
              }
              if (StartingValue != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(StartingValue);
              }
              if (IsVictory != false) {
                output.WriteRawTag(32);
                output.WriteBool(IsVictory);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ItemId != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
              }
              if (ItemDefIndex != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemDefIndex);
              }
              if (StartingValue != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingValue);
              }
              if (IsVictory != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(VictoryPrediction other) {
              if (other == null) {
                return;
              }
              if (other.ItemId != 0UL) {
                ItemId = other.ItemId;
              }
              if (other.ItemDefIndex != 0) {
                ItemDefIndex = other.ItemDefIndex;
              }
              if (other.StartingValue != 0) {
                StartingValue = other.StartingValue;
              }
              if (other.IsVictory != false) {
                IsVictory = other.IsVictory;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    ItemId = input.ReadUInt64();
                    break;
                  }
                  case 16: {
                    ItemDefIndex = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    StartingValue = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    IsVictory = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class SubChallenge : pb::IMessage<SubChallenge> {
            private static readonly pb::MessageParser<SubChallenge> _parser = new pb::MessageParser<SubChallenge>(() => new SubChallenge());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SubChallenge> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SubChallenge() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SubChallenge(SubChallenge other) : this() {
              slotId_ = other.slotId_;
              startValue_ = other.startValue_;
              endValue_ = other.endValue_;
              completed_ = other.completed_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SubChallenge Clone() {
              return new SubChallenge(this);
            }

            /// <summary>Field number for the "slot_id" field.</summary>
            public const int SlotIdFieldNumber = 1;
            private uint slotId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint SlotId {
              get { return slotId_; }
              set {
                slotId_ = value;
              }
            }

            /// <summary>Field number for the "start_value" field.</summary>
            public const int StartValueFieldNumber = 2;
            private uint startValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint StartValue {
              get { return startValue_; }
              set {
                startValue_ = value;
              }
            }

            /// <summary>Field number for the "end_value" field.</summary>
            public const int EndValueFieldNumber = 3;
            private uint endValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EndValue {
              get { return endValue_; }
              set {
                endValue_ = value;
              }
            }

            /// <summary>Field number for the "completed" field.</summary>
            public const int CompletedFieldNumber = 4;
            private bool completed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Completed {
              get { return completed_; }
              set {
                completed_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SubChallenge);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SubChallenge other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SlotId != other.SlotId) return false;
              if (StartValue != other.StartValue) return false;
              if (EndValue != other.EndValue) return false;
              if (Completed != other.Completed) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SlotId != 0) hash ^= SlotId.GetHashCode();
              if (StartValue != 0) hash ^= StartValue.GetHashCode();
              if (EndValue != 0) hash ^= EndValue.GetHashCode();
              if (Completed != false) hash ^= Completed.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SlotId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(SlotId);
              }
              if (StartValue != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(StartValue);
              }
              if (EndValue != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(EndValue);
              }
              if (Completed != false) {
                output.WriteRawTag(32);
                output.WriteBool(Completed);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SlotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
              }
              if (StartValue != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartValue);
              }
              if (EndValue != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndValue);
              }
              if (Completed != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SubChallenge other) {
              if (other == null) {
                return;
              }
              if (other.SlotId != 0) {
                SlotId = other.SlotId;
              }
              if (other.StartValue != 0) {
                StartValue = other.StartValue;
              }
              if (other.EndValue != 0) {
                EndValue = other.EndValue;
              }
              if (other.Completed != false) {
                Completed = other.Completed;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    SlotId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    StartValue = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    EndValue = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    Completed = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class EventData : pb::IMessage<EventData> {
            private static readonly pb::MessageParser<EventData> _parser = new pb::MessageParser<EventData>(() => new EventData());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<EventData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EventData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EventData(EventData other) : this() {
              eventId_ = other.eventId_;
              eventPoints_ = other.eventPoints_;
              challengeInstanceId_ = other.challengeInstanceId_;
              challengeQuestId_ = other.challengeQuestId_;
              challengeQuestChallengeId_ = other.challengeQuestChallengeId_;
              challengeCompleted_ = other.challengeCompleted_;
              challengeRankCompleted_ = other.challengeRankCompleted_;
              challengeRankPreviouslyCompleted_ = other.challengeRankPreviouslyCompleted_;
              eventOwned_ = other.eventOwned_;
              subChallengesWithProgress_ = other.subChallengesWithProgress_.Clone();
              wagerWinnings_ = other.wagerWinnings_;
              cavernChallengeActive_ = other.cavernChallengeActive_;
              cavernChallengeWinnings_ = other.cavernChallengeWinnings_;
              amountWagered_ = other.amountWagered_;
              teamWagerAmount_ = other.teamWagerAmount_;
              periodicPointAdjustments_ = other.periodicPointAdjustments_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EventData Clone() {
              return new EventData(this);
            }

            /// <summary>Field number for the "event_id" field.</summary>
            public const int EventIdFieldNumber = 1;
            private uint eventId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EventId {
              get { return eventId_; }
              set {
                eventId_ = value;
              }
            }

            /// <summary>Field number for the "event_points" field.</summary>
            public const int EventPointsFieldNumber = 2;
            private uint eventPoints_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EventPoints {
              get { return eventPoints_; }
              set {
                eventPoints_ = value;
              }
            }

            /// <summary>Field number for the "challenge_instance_id" field.</summary>
            public const int ChallengeInstanceIdFieldNumber = 3;
            private uint challengeInstanceId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ChallengeInstanceId {
              get { return challengeInstanceId_; }
              set {
                challengeInstanceId_ = value;
              }
            }

            /// <summary>Field number for the "challenge_quest_id" field.</summary>
            public const int ChallengeQuestIdFieldNumber = 4;
            private uint challengeQuestId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ChallengeQuestId {
              get { return challengeQuestId_; }
              set {
                challengeQuestId_ = value;
              }
            }

            /// <summary>Field number for the "challenge_quest_challenge_id" field.</summary>
            public const int ChallengeQuestChallengeIdFieldNumber = 5;
            private uint challengeQuestChallengeId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ChallengeQuestChallengeId {
              get { return challengeQuestChallengeId_; }
              set {
                challengeQuestChallengeId_ = value;
              }
            }

            /// <summary>Field number for the "challenge_completed" field.</summary>
            public const int ChallengeCompletedFieldNumber = 6;
            private bool challengeCompleted_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool ChallengeCompleted {
              get { return challengeCompleted_; }
              set {
                challengeCompleted_ = value;
              }
            }

            /// <summary>Field number for the "challenge_rank_completed" field.</summary>
            public const int ChallengeRankCompletedFieldNumber = 7;
            private uint challengeRankCompleted_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ChallengeRankCompleted {
              get { return challengeRankCompleted_; }
              set {
                challengeRankCompleted_ = value;
              }
            }

            /// <summary>Field number for the "challenge_rank_previously_completed" field.</summary>
            public const int ChallengeRankPreviouslyCompletedFieldNumber = 8;
            private uint challengeRankPreviouslyCompleted_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ChallengeRankPreviouslyCompleted {
              get { return challengeRankPreviouslyCompleted_; }
              set {
                challengeRankPreviouslyCompleted_ = value;
              }
            }

            /// <summary>Field number for the "event_owned" field.</summary>
            public const int EventOwnedFieldNumber = 9;
            private bool eventOwned_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool EventOwned {
              get { return eventOwned_; }
              set {
                eventOwned_ = value;
              }
            }

            /// <summary>Field number for the "sub_challenges_with_progress" field.</summary>
            public const int SubChallengesWithProgressFieldNumber = 10;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.SubChallenge> _repeated_subChallengesWithProgress_codec
                = pb::FieldCodec.ForMessage(82, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.SubChallenge.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.SubChallenge> subChallengesWithProgress_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.SubChallenge>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.SubChallenge> SubChallengesWithProgress {
              get { return subChallengesWithProgress_; }
            }

            /// <summary>Field number for the "wager_winnings" field.</summary>
            public const int WagerWinningsFieldNumber = 11;
            private uint wagerWinnings_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint WagerWinnings {
              get { return wagerWinnings_; }
              set {
                wagerWinnings_ = value;
              }
            }

            /// <summary>Field number for the "cavern_challenge_active" field.</summary>
            public const int CavernChallengeActiveFieldNumber = 12;
            private bool cavernChallengeActive_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool CavernChallengeActive {
              get { return cavernChallengeActive_; }
              set {
                cavernChallengeActive_ = value;
              }
            }

            /// <summary>Field number for the "cavern_challenge_winnings" field.</summary>
            public const int CavernChallengeWinningsFieldNumber = 13;
            private uint cavernChallengeWinnings_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint CavernChallengeWinnings {
              get { return cavernChallengeWinnings_; }
              set {
                cavernChallengeWinnings_ = value;
              }
            }

            /// <summary>Field number for the "amount_wagered" field.</summary>
            public const int AmountWageredFieldNumber = 14;
            private uint amountWagered_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AmountWagered {
              get { return amountWagered_; }
              set {
                amountWagered_ = value;
              }
            }

            /// <summary>Field number for the "team_wager_amount" field.</summary>
            public const int TeamWagerAmountFieldNumber = 15;
            private uint teamWagerAmount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TeamWagerAmount {
              get { return teamWagerAmount_; }
              set {
                teamWagerAmount_ = value;
              }
            }

            /// <summary>Field number for the "periodic_point_adjustments" field.</summary>
            public const int PeriodicPointAdjustmentsFieldNumber = 16;
            private uint periodicPointAdjustments_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PeriodicPointAdjustments {
              get { return periodicPointAdjustments_; }
              set {
                periodicPointAdjustments_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as EventData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(EventData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EventId != other.EventId) return false;
              if (EventPoints != other.EventPoints) return false;
              if (ChallengeInstanceId != other.ChallengeInstanceId) return false;
              if (ChallengeQuestId != other.ChallengeQuestId) return false;
              if (ChallengeQuestChallengeId != other.ChallengeQuestChallengeId) return false;
              if (ChallengeCompleted != other.ChallengeCompleted) return false;
              if (ChallengeRankCompleted != other.ChallengeRankCompleted) return false;
              if (ChallengeRankPreviouslyCompleted != other.ChallengeRankPreviouslyCompleted) return false;
              if (EventOwned != other.EventOwned) return false;
              if(!subChallengesWithProgress_.Equals(other.subChallengesWithProgress_)) return false;
              if (WagerWinnings != other.WagerWinnings) return false;
              if (CavernChallengeActive != other.CavernChallengeActive) return false;
              if (CavernChallengeWinnings != other.CavernChallengeWinnings) return false;
              if (AmountWagered != other.AmountWagered) return false;
              if (TeamWagerAmount != other.TeamWagerAmount) return false;
              if (PeriodicPointAdjustments != other.PeriodicPointAdjustments) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (EventId != 0) hash ^= EventId.GetHashCode();
              if (EventPoints != 0) hash ^= EventPoints.GetHashCode();
              if (ChallengeInstanceId != 0) hash ^= ChallengeInstanceId.GetHashCode();
              if (ChallengeQuestId != 0) hash ^= ChallengeQuestId.GetHashCode();
              if (ChallengeQuestChallengeId != 0) hash ^= ChallengeQuestChallengeId.GetHashCode();
              if (ChallengeCompleted != false) hash ^= ChallengeCompleted.GetHashCode();
              if (ChallengeRankCompleted != 0) hash ^= ChallengeRankCompleted.GetHashCode();
              if (ChallengeRankPreviouslyCompleted != 0) hash ^= ChallengeRankPreviouslyCompleted.GetHashCode();
              if (EventOwned != false) hash ^= EventOwned.GetHashCode();
              hash ^= subChallengesWithProgress_.GetHashCode();
              if (WagerWinnings != 0) hash ^= WagerWinnings.GetHashCode();
              if (CavernChallengeActive != false) hash ^= CavernChallengeActive.GetHashCode();
              if (CavernChallengeWinnings != 0) hash ^= CavernChallengeWinnings.GetHashCode();
              if (AmountWagered != 0) hash ^= AmountWagered.GetHashCode();
              if (TeamWagerAmount != 0) hash ^= TeamWagerAmount.GetHashCode();
              if (PeriodicPointAdjustments != 0) hash ^= PeriodicPointAdjustments.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (EventId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(EventId);
              }
              if (EventPoints != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(EventPoints);
              }
              if (ChallengeInstanceId != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(ChallengeInstanceId);
              }
              if (ChallengeQuestId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(ChallengeQuestId);
              }
              if (ChallengeQuestChallengeId != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(ChallengeQuestChallengeId);
              }
              if (ChallengeCompleted != false) {
                output.WriteRawTag(48);
                output.WriteBool(ChallengeCompleted);
              }
              if (ChallengeRankCompleted != 0) {
                output.WriteRawTag(56);
                output.WriteUInt32(ChallengeRankCompleted);
              }
              if (ChallengeRankPreviouslyCompleted != 0) {
                output.WriteRawTag(64);
                output.WriteUInt32(ChallengeRankPreviouslyCompleted);
              }
              if (EventOwned != false) {
                output.WriteRawTag(72);
                output.WriteBool(EventOwned);
              }
              subChallengesWithProgress_.WriteTo(output, _repeated_subChallengesWithProgress_codec);
              if (WagerWinnings != 0) {
                output.WriteRawTag(88);
                output.WriteUInt32(WagerWinnings);
              }
              if (CavernChallengeActive != false) {
                output.WriteRawTag(96);
                output.WriteBool(CavernChallengeActive);
              }
              if (CavernChallengeWinnings != 0) {
                output.WriteRawTag(104);
                output.WriteUInt32(CavernChallengeWinnings);
              }
              if (AmountWagered != 0) {
                output.WriteRawTag(112);
                output.WriteUInt32(AmountWagered);
              }
              if (TeamWagerAmount != 0) {
                output.WriteRawTag(120);
                output.WriteUInt32(TeamWagerAmount);
              }
              if (PeriodicPointAdjustments != 0) {
                output.WriteRawTag(128, 1);
                output.WriteUInt32(PeriodicPointAdjustments);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (EventId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
              }
              if (EventPoints != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventPoints);
              }
              if (ChallengeInstanceId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeInstanceId);
              }
              if (ChallengeQuestId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeQuestId);
              }
              if (ChallengeQuestChallengeId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeQuestChallengeId);
              }
              if (ChallengeCompleted != false) {
                size += 1 + 1;
              }
              if (ChallengeRankCompleted != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeRankCompleted);
              }
              if (ChallengeRankPreviouslyCompleted != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeRankPreviouslyCompleted);
              }
              if (EventOwned != false) {
                size += 1 + 1;
              }
              size += subChallengesWithProgress_.CalculateSize(_repeated_subChallengesWithProgress_codec);
              if (WagerWinnings != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WagerWinnings);
              }
              if (CavernChallengeActive != false) {
                size += 1 + 1;
              }
              if (CavernChallengeWinnings != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CavernChallengeWinnings);
              }
              if (AmountWagered != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AmountWagered);
              }
              if (TeamWagerAmount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamWagerAmount);
              }
              if (PeriodicPointAdjustments != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PeriodicPointAdjustments);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(EventData other) {
              if (other == null) {
                return;
              }
              if (other.EventId != 0) {
                EventId = other.EventId;
              }
              if (other.EventPoints != 0) {
                EventPoints = other.EventPoints;
              }
              if (other.ChallengeInstanceId != 0) {
                ChallengeInstanceId = other.ChallengeInstanceId;
              }
              if (other.ChallengeQuestId != 0) {
                ChallengeQuestId = other.ChallengeQuestId;
              }
              if (other.ChallengeQuestChallengeId != 0) {
                ChallengeQuestChallengeId = other.ChallengeQuestChallengeId;
              }
              if (other.ChallengeCompleted != false) {
                ChallengeCompleted = other.ChallengeCompleted;
              }
              if (other.ChallengeRankCompleted != 0) {
                ChallengeRankCompleted = other.ChallengeRankCompleted;
              }
              if (other.ChallengeRankPreviouslyCompleted != 0) {
                ChallengeRankPreviouslyCompleted = other.ChallengeRankPreviouslyCompleted;
              }
              if (other.EventOwned != false) {
                EventOwned = other.EventOwned;
              }
              subChallengesWithProgress_.Add(other.subChallengesWithProgress_);
              if (other.WagerWinnings != 0) {
                WagerWinnings = other.WagerWinnings;
              }
              if (other.CavernChallengeActive != false) {
                CavernChallengeActive = other.CavernChallengeActive;
              }
              if (other.CavernChallengeWinnings != 0) {
                CavernChallengeWinnings = other.CavernChallengeWinnings;
              }
              if (other.AmountWagered != 0) {
                AmountWagered = other.AmountWagered;
              }
              if (other.TeamWagerAmount != 0) {
                TeamWagerAmount = other.TeamWagerAmount;
              }
              if (other.PeriodicPointAdjustments != 0) {
                PeriodicPointAdjustments = other.PeriodicPointAdjustments;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    EventId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    EventPoints = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    ChallengeInstanceId = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    ChallengeQuestId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    ChallengeQuestChallengeId = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    ChallengeCompleted = input.ReadBool();
                    break;
                  }
                  case 56: {
                    ChallengeRankCompleted = input.ReadUInt32();
                    break;
                  }
                  case 64: {
                    ChallengeRankPreviouslyCompleted = input.ReadUInt32();
                    break;
                  }
                  case 72: {
                    EventOwned = input.ReadBool();
                    break;
                  }
                  case 82: {
                    subChallengesWithProgress_.AddEntriesFrom(input, _repeated_subChallengesWithProgress_codec);
                    break;
                  }
                  case 88: {
                    WagerWinnings = input.ReadUInt32();
                    break;
                  }
                  case 96: {
                    CavernChallengeActive = input.ReadBool();
                    break;
                  }
                  case 104: {
                    CavernChallengeWinnings = input.ReadUInt32();
                    break;
                  }
                  case 112: {
                    AmountWagered = input.ReadUInt32();
                    break;
                  }
                  case 120: {
                    TeamWagerAmount = input.ReadUInt32();
                    break;
                  }
                  case 128: {
                    PeriodicPointAdjustments = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Player : pb::IMessage<Player> {
            private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Player> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Descriptor.NestedTypes[8]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player(Player other) : this() {
              accountId_ = other.accountId_;
              abilityUpgrades_ = other.abilityUpgrades_.Clone();
              playerSlot_ = other.playerSlot_;
              equippedEconItems_ = other.equippedEconItems_.Clone();
              kills_ = other.kills_.Clone();
              items_ = other.items_.Clone();
              avgKillsX16_ = other.avgKillsX16_;
              avgDeathsX16_ = other.avgDeathsX16_;
              avgAssistsX16_ = other.avgAssistsX16_;
              avgGpmX16_ = other.avgGpmX16_;
              avgXpmX16_ = other.avgXpmX16_;
              bestKillsX16_ = other.bestKillsX16_;
              bestAssistsX16_ = other.bestAssistsX16_;
              bestGpmX16_ = other.bestGpmX16_;
              bestXpmX16_ = other.bestXpmX16_;
              winStreak_ = other.winStreak_;
              bestWinStreak_ = other.bestWinStreak_;
              fightScore_ = other.fightScore_;
              farmScore_ = other.farmScore_;
              supportScore_ = other.supportScore_;
              pushScore_ = other.pushScore_;
              levelUpTimes_ = other.levelUpTimes_.Clone();
              graphNetWorth_ = other.graphNetWorth_.Clone();
              inventorySnapshot_ = other.inventorySnapshot_.Clone();
              avgStatsCalibrated_ = other.avgStatsCalibrated_;
              autoStyleCriteria_ = other.autoStyleCriteria_.Clone();
              eventId_ = other.eventId_;
              eventPoints_ = other.eventPoints_;
              eventData_ = other.eventData_.Clone();
              strangeGemProgress_ = other.strangeGemProgress_.Clone();
              heroXp_ = other.heroXp_;
              campsStacked_ = other.campsStacked_;
              victoryPrediction_ = other.victoryPrediction_.Clone();
              laneSelectionFlags_ = other.laneSelectionFlags_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player Clone() {
              return new Player(this);
            }

            /// <summary>Field number for the "account_id" field.</summary>
            public const int AccountIdFieldNumber = 1;
            private uint accountId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AccountId {
              get { return accountId_; }
              set {
                accountId_ = value;
              }
            }

            /// <summary>Field number for the "ability_upgrades" field.</summary>
            public const int AbilityUpgradesFieldNumber = 2;
            private static readonly pb::FieldCodec<uint> _repeated_abilityUpgrades_codec
                = pb::FieldCodec.ForUInt32(18);
            private readonly pbc::RepeatedField<uint> abilityUpgrades_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> AbilityUpgrades {
              get { return abilityUpgrades_; }
            }

            /// <summary>Field number for the "player_slot" field.</summary>
            public const int PlayerSlotFieldNumber = 3;
            private uint playerSlot_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PlayerSlot {
              get { return playerSlot_; }
              set {
                playerSlot_ = value;
              }
            }

            /// <summary>Field number for the "equipped_econ_items" field.</summary>
            public const int EquippedEconItemsFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Proto.Dota.CSOEconItem> _repeated_equippedEconItems_codec
                = pb::FieldCodec.ForMessage(34, global::Proto.Dota.CSOEconItem.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CSOEconItem> equippedEconItems_ = new pbc::RepeatedField<global::Proto.Dota.CSOEconItem>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CSOEconItem> EquippedEconItems {
              get { return equippedEconItems_; }
            }

            /// <summary>Field number for the "kills" field.</summary>
            public const int KillsFieldNumber = 5;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.PlayerKill> _repeated_kills_codec
                = pb::FieldCodec.ForMessage(42, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.PlayerKill.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.PlayerKill> kills_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.PlayerKill>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.PlayerKill> Kills {
              get { return kills_; }
            }

            /// <summary>Field number for the "items" field.</summary>
            public const int ItemsFieldNumber = 6;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.ItemPurchase> _repeated_items_codec
                = pb::FieldCodec.ForMessage(50, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.ItemPurchase.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.ItemPurchase> items_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.ItemPurchase>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.ItemPurchase> Items {
              get { return items_; }
            }

            /// <summary>Field number for the "avg_kills_x16" field.</summary>
            public const int AvgKillsX16FieldNumber = 7;
            private uint avgKillsX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AvgKillsX16 {
              get { return avgKillsX16_; }
              set {
                avgKillsX16_ = value;
              }
            }

            /// <summary>Field number for the "avg_deaths_x16" field.</summary>
            public const int AvgDeathsX16FieldNumber = 8;
            private uint avgDeathsX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AvgDeathsX16 {
              get { return avgDeathsX16_; }
              set {
                avgDeathsX16_ = value;
              }
            }

            /// <summary>Field number for the "avg_assists_x16" field.</summary>
            public const int AvgAssistsX16FieldNumber = 9;
            private uint avgAssistsX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AvgAssistsX16 {
              get { return avgAssistsX16_; }
              set {
                avgAssistsX16_ = value;
              }
            }

            /// <summary>Field number for the "avg_gpm_x16" field.</summary>
            public const int AvgGpmX16FieldNumber = 10;
            private uint avgGpmX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AvgGpmX16 {
              get { return avgGpmX16_; }
              set {
                avgGpmX16_ = value;
              }
            }

            /// <summary>Field number for the "avg_xpm_x16" field.</summary>
            public const int AvgXpmX16FieldNumber = 11;
            private uint avgXpmX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AvgXpmX16 {
              get { return avgXpmX16_; }
              set {
                avgXpmX16_ = value;
              }
            }

            /// <summary>Field number for the "best_kills_x16" field.</summary>
            public const int BestKillsX16FieldNumber = 12;
            private uint bestKillsX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint BestKillsX16 {
              get { return bestKillsX16_; }
              set {
                bestKillsX16_ = value;
              }
            }

            /// <summary>Field number for the "best_assists_x16" field.</summary>
            public const int BestAssistsX16FieldNumber = 13;
            private uint bestAssistsX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint BestAssistsX16 {
              get { return bestAssistsX16_; }
              set {
                bestAssistsX16_ = value;
              }
            }

            /// <summary>Field number for the "best_gpm_x16" field.</summary>
            public const int BestGpmX16FieldNumber = 14;
            private uint bestGpmX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint BestGpmX16 {
              get { return bestGpmX16_; }
              set {
                bestGpmX16_ = value;
              }
            }

            /// <summary>Field number for the "best_xpm_x16" field.</summary>
            public const int BestXpmX16FieldNumber = 15;
            private uint bestXpmX16_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint BestXpmX16 {
              get { return bestXpmX16_; }
              set {
                bestXpmX16_ = value;
              }
            }

            /// <summary>Field number for the "win_streak" field.</summary>
            public const int WinStreakFieldNumber = 16;
            private uint winStreak_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint WinStreak {
              get { return winStreak_; }
              set {
                winStreak_ = value;
              }
            }

            /// <summary>Field number for the "best_win_streak" field.</summary>
            public const int BestWinStreakFieldNumber = 17;
            private uint bestWinStreak_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint BestWinStreak {
              get { return bestWinStreak_; }
              set {
                bestWinStreak_ = value;
              }
            }

            /// <summary>Field number for the "fight_score" field.</summary>
            public const int FightScoreFieldNumber = 18;
            private float fightScore_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float FightScore {
              get { return fightScore_; }
              set {
                fightScore_ = value;
              }
            }

            /// <summary>Field number for the "farm_score" field.</summary>
            public const int FarmScoreFieldNumber = 19;
            private float farmScore_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float FarmScore {
              get { return farmScore_; }
              set {
                farmScore_ = value;
              }
            }

            /// <summary>Field number for the "support_score" field.</summary>
            public const int SupportScoreFieldNumber = 20;
            private float supportScore_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float SupportScore {
              get { return supportScore_; }
              set {
                supportScore_ = value;
              }
            }

            /// <summary>Field number for the "push_score" field.</summary>
            public const int PushScoreFieldNumber = 21;
            private float pushScore_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float PushScore {
              get { return pushScore_; }
              set {
                pushScore_ = value;
              }
            }

            /// <summary>Field number for the "level_up_times" field.</summary>
            public const int LevelUpTimesFieldNumber = 22;
            private static readonly pb::FieldCodec<uint> _repeated_levelUpTimes_codec
                = pb::FieldCodec.ForUInt32(178);
            private readonly pbc::RepeatedField<uint> levelUpTimes_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> LevelUpTimes {
              get { return levelUpTimes_; }
            }

            /// <summary>Field number for the "graph_net_worth" field.</summary>
            public const int GraphNetWorthFieldNumber = 23;
            private static readonly pb::FieldCodec<float> _repeated_graphNetWorth_codec
                = pb::FieldCodec.ForFloat(186);
            private readonly pbc::RepeatedField<float> graphNetWorth_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> GraphNetWorth {
              get { return graphNetWorth_; }
            }

            /// <summary>Field number for the "inventory_snapshot" field.</summary>
            public const int InventorySnapshotFieldNumber = 24;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.InventorySnapshot> _repeated_inventorySnapshot_codec
                = pb::FieldCodec.ForMessage(194, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.InventorySnapshot.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.InventorySnapshot> inventorySnapshot_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.InventorySnapshot>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.InventorySnapshot> InventorySnapshot {
              get { return inventorySnapshot_; }
            }

            /// <summary>Field number for the "avg_stats_calibrated" field.</summary>
            public const int AvgStatsCalibratedFieldNumber = 25;
            private bool avgStatsCalibrated_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool AvgStatsCalibrated {
              get { return avgStatsCalibrated_; }
              set {
                avgStatsCalibrated_ = value;
              }
            }

            /// <summary>Field number for the "auto_style_criteria" field.</summary>
            public const int AutoStyleCriteriaFieldNumber = 26;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.AutoStyleCriteria> _repeated_autoStyleCriteria_codec
                = pb::FieldCodec.ForMessage(210, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.AutoStyleCriteria.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.AutoStyleCriteria> autoStyleCriteria_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.AutoStyleCriteria>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.AutoStyleCriteria> AutoStyleCriteria {
              get { return autoStyleCriteria_; }
            }

            /// <summary>Field number for the "event_id" field.</summary>
            public const int EventIdFieldNumber = 27;
            private uint eventId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EventId {
              get { return eventId_; }
              set {
                eventId_ = value;
              }
            }

            /// <summary>Field number for the "event_points" field.</summary>
            public const int EventPointsFieldNumber = 28;
            private uint eventPoints_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint EventPoints {
              get { return eventPoints_; }
              set {
                eventPoints_ = value;
              }
            }

            /// <summary>Field number for the "event_data" field.</summary>
            public const int EventDataFieldNumber = 29;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.EventData> _repeated_eventData_codec
                = pb::FieldCodec.ForMessage(234, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.EventData.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.EventData> eventData_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.EventData>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.EventData> EventData {
              get { return eventData_; }
            }

            /// <summary>Field number for the "strange_gem_progress" field.</summary>
            public const int StrangeGemProgressFieldNumber = 30;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.StrangeGemProgress> _repeated_strangeGemProgress_codec
                = pb::FieldCodec.ForMessage(242, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.StrangeGemProgress.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.StrangeGemProgress> strangeGemProgress_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.StrangeGemProgress>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.StrangeGemProgress> StrangeGemProgress {
              get { return strangeGemProgress_; }
            }

            /// <summary>Field number for the "hero_xp" field.</summary>
            public const int HeroXpFieldNumber = 31;
            private uint heroXp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint HeroXp {
              get { return heroXp_; }
              set {
                heroXp_ = value;
              }
            }

            /// <summary>Field number for the "camps_stacked" field.</summary>
            public const int CampsStackedFieldNumber = 32;
            private uint campsStacked_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint CampsStacked {
              get { return campsStacked_; }
              set {
                campsStacked_ = value;
              }
            }

            /// <summary>Field number for the "victory_prediction" field.</summary>
            public const int VictoryPredictionFieldNumber = 33;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.VictoryPrediction> _repeated_victoryPrediction_codec
                = pb::FieldCodec.ForMessage(266, global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.VictoryPrediction.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.VictoryPrediction> victoryPrediction_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.VictoryPrediction>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchMetadata.Types.Team.Types.VictoryPrediction> VictoryPrediction {
              get { return victoryPrediction_; }
            }

            /// <summary>Field number for the "lane_selection_flags" field.</summary>
            public const int LaneSelectionFlagsFieldNumber = 34;
            private uint laneSelectionFlags_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint LaneSelectionFlags {
              get { return laneSelectionFlags_; }
              set {
                laneSelectionFlags_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Player);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Player other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (AccountId != other.AccountId) return false;
              if(!abilityUpgrades_.Equals(other.abilityUpgrades_)) return false;
              if (PlayerSlot != other.PlayerSlot) return false;
              if(!equippedEconItems_.Equals(other.equippedEconItems_)) return false;
              if(!kills_.Equals(other.kills_)) return false;
              if(!items_.Equals(other.items_)) return false;
              if (AvgKillsX16 != other.AvgKillsX16) return false;
              if (AvgDeathsX16 != other.AvgDeathsX16) return false;
              if (AvgAssistsX16 != other.AvgAssistsX16) return false;
              if (AvgGpmX16 != other.AvgGpmX16) return false;
              if (AvgXpmX16 != other.AvgXpmX16) return false;
              if (BestKillsX16 != other.BestKillsX16) return false;
              if (BestAssistsX16 != other.BestAssistsX16) return false;
              if (BestGpmX16 != other.BestGpmX16) return false;
              if (BestXpmX16 != other.BestXpmX16) return false;
              if (WinStreak != other.WinStreak) return false;
              if (BestWinStreak != other.BestWinStreak) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FightScore, other.FightScore)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FarmScore, other.FarmScore)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SupportScore, other.SupportScore)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PushScore, other.PushScore)) return false;
              if(!levelUpTimes_.Equals(other.levelUpTimes_)) return false;
              if(!graphNetWorth_.Equals(other.graphNetWorth_)) return false;
              if(!inventorySnapshot_.Equals(other.inventorySnapshot_)) return false;
              if (AvgStatsCalibrated != other.AvgStatsCalibrated) return false;
              if(!autoStyleCriteria_.Equals(other.autoStyleCriteria_)) return false;
              if (EventId != other.EventId) return false;
              if (EventPoints != other.EventPoints) return false;
              if(!eventData_.Equals(other.eventData_)) return false;
              if(!strangeGemProgress_.Equals(other.strangeGemProgress_)) return false;
              if (HeroXp != other.HeroXp) return false;
              if (CampsStacked != other.CampsStacked) return false;
              if(!victoryPrediction_.Equals(other.victoryPrediction_)) return false;
              if (LaneSelectionFlags != other.LaneSelectionFlags) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (AccountId != 0) hash ^= AccountId.GetHashCode();
              hash ^= abilityUpgrades_.GetHashCode();
              if (PlayerSlot != 0) hash ^= PlayerSlot.GetHashCode();
              hash ^= equippedEconItems_.GetHashCode();
              hash ^= kills_.GetHashCode();
              hash ^= items_.GetHashCode();
              if (AvgKillsX16 != 0) hash ^= AvgKillsX16.GetHashCode();
              if (AvgDeathsX16 != 0) hash ^= AvgDeathsX16.GetHashCode();
              if (AvgAssistsX16 != 0) hash ^= AvgAssistsX16.GetHashCode();
              if (AvgGpmX16 != 0) hash ^= AvgGpmX16.GetHashCode();
              if (AvgXpmX16 != 0) hash ^= AvgXpmX16.GetHashCode();
              if (BestKillsX16 != 0) hash ^= BestKillsX16.GetHashCode();
              if (BestAssistsX16 != 0) hash ^= BestAssistsX16.GetHashCode();
              if (BestGpmX16 != 0) hash ^= BestGpmX16.GetHashCode();
              if (BestXpmX16 != 0) hash ^= BestXpmX16.GetHashCode();
              if (WinStreak != 0) hash ^= WinStreak.GetHashCode();
              if (BestWinStreak != 0) hash ^= BestWinStreak.GetHashCode();
              if (FightScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FightScore);
              if (FarmScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FarmScore);
              if (SupportScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SupportScore);
              if (PushScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PushScore);
              hash ^= levelUpTimes_.GetHashCode();
              hash ^= graphNetWorth_.GetHashCode();
              hash ^= inventorySnapshot_.GetHashCode();
              if (AvgStatsCalibrated != false) hash ^= AvgStatsCalibrated.GetHashCode();
              hash ^= autoStyleCriteria_.GetHashCode();
              if (EventId != 0) hash ^= EventId.GetHashCode();
              if (EventPoints != 0) hash ^= EventPoints.GetHashCode();
              hash ^= eventData_.GetHashCode();
              hash ^= strangeGemProgress_.GetHashCode();
              if (HeroXp != 0) hash ^= HeroXp.GetHashCode();
              if (CampsStacked != 0) hash ^= CampsStacked.GetHashCode();
              hash ^= victoryPrediction_.GetHashCode();
              if (LaneSelectionFlags != 0) hash ^= LaneSelectionFlags.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (AccountId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(AccountId);
              }
              abilityUpgrades_.WriteTo(output, _repeated_abilityUpgrades_codec);
              if (PlayerSlot != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(PlayerSlot);
              }
              equippedEconItems_.WriteTo(output, _repeated_equippedEconItems_codec);
              kills_.WriteTo(output, _repeated_kills_codec);
              items_.WriteTo(output, _repeated_items_codec);
              if (AvgKillsX16 != 0) {
                output.WriteRawTag(56);
                output.WriteUInt32(AvgKillsX16);
              }
              if (AvgDeathsX16 != 0) {
                output.WriteRawTag(64);
                output.WriteUInt32(AvgDeathsX16);
              }
              if (AvgAssistsX16 != 0) {
                output.WriteRawTag(72);
                output.WriteUInt32(AvgAssistsX16);
              }
              if (AvgGpmX16 != 0) {
                output.WriteRawTag(80);
                output.WriteUInt32(AvgGpmX16);
              }
              if (AvgXpmX16 != 0) {
                output.WriteRawTag(88);
                output.WriteUInt32(AvgXpmX16);
              }
              if (BestKillsX16 != 0) {
                output.WriteRawTag(96);
                output.WriteUInt32(BestKillsX16);
              }
              if (BestAssistsX16 != 0) {
                output.WriteRawTag(104);
                output.WriteUInt32(BestAssistsX16);
              }
              if (BestGpmX16 != 0) {
                output.WriteRawTag(112);
                output.WriteUInt32(BestGpmX16);
              }
              if (BestXpmX16 != 0) {
                output.WriteRawTag(120);
                output.WriteUInt32(BestXpmX16);
              }
              if (WinStreak != 0) {
                output.WriteRawTag(128, 1);
                output.WriteUInt32(WinStreak);
              }
              if (BestWinStreak != 0) {
                output.WriteRawTag(136, 1);
                output.WriteUInt32(BestWinStreak);
              }
              if (FightScore != 0F) {
                output.WriteRawTag(149, 1);
                output.WriteFloat(FightScore);
              }
              if (FarmScore != 0F) {
                output.WriteRawTag(157, 1);
                output.WriteFloat(FarmScore);
              }
              if (SupportScore != 0F) {
                output.WriteRawTag(165, 1);
                output.WriteFloat(SupportScore);
              }
              if (PushScore != 0F) {
                output.WriteRawTag(173, 1);
                output.WriteFloat(PushScore);
              }
              levelUpTimes_.WriteTo(output, _repeated_levelUpTimes_codec);
              graphNetWorth_.WriteTo(output, _repeated_graphNetWorth_codec);
              inventorySnapshot_.WriteTo(output, _repeated_inventorySnapshot_codec);
              if (AvgStatsCalibrated != false) {
                output.WriteRawTag(200, 1);
                output.WriteBool(AvgStatsCalibrated);
              }
              autoStyleCriteria_.WriteTo(output, _repeated_autoStyleCriteria_codec);
              if (EventId != 0) {
                output.WriteRawTag(216, 1);
                output.WriteUInt32(EventId);
              }
              if (EventPoints != 0) {
                output.WriteRawTag(224, 1);
                output.WriteUInt32(EventPoints);
              }
              eventData_.WriteTo(output, _repeated_eventData_codec);
              strangeGemProgress_.WriteTo(output, _repeated_strangeGemProgress_codec);
              if (HeroXp != 0) {
                output.WriteRawTag(248, 1);
                output.WriteUInt32(HeroXp);
              }
              if (CampsStacked != 0) {
                output.WriteRawTag(128, 2);
                output.WriteUInt32(CampsStacked);
              }
              victoryPrediction_.WriteTo(output, _repeated_victoryPrediction_codec);
              if (LaneSelectionFlags != 0) {
                output.WriteRawTag(144, 2);
                output.WriteUInt32(LaneSelectionFlags);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (AccountId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
              }
              size += abilityUpgrades_.CalculateSize(_repeated_abilityUpgrades_codec);
              if (PlayerSlot != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
              }
              size += equippedEconItems_.CalculateSize(_repeated_equippedEconItems_codec);
              size += kills_.CalculateSize(_repeated_kills_codec);
              size += items_.CalculateSize(_repeated_items_codec);
              if (AvgKillsX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgKillsX16);
              }
              if (AvgDeathsX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgDeathsX16);
              }
              if (AvgAssistsX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgAssistsX16);
              }
              if (AvgGpmX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgGpmX16);
              }
              if (AvgXpmX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvgXpmX16);
              }
              if (BestKillsX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestKillsX16);
              }
              if (BestAssistsX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestAssistsX16);
              }
              if (BestGpmX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestGpmX16);
              }
              if (BestXpmX16 != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestXpmX16);
              }
              if (WinStreak != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WinStreak);
              }
              if (BestWinStreak != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BestWinStreak);
              }
              if (FightScore != 0F) {
                size += 2 + 4;
              }
              if (FarmScore != 0F) {
                size += 2 + 4;
              }
              if (SupportScore != 0F) {
                size += 2 + 4;
              }
              if (PushScore != 0F) {
                size += 2 + 4;
              }
              size += levelUpTimes_.CalculateSize(_repeated_levelUpTimes_codec);
              size += graphNetWorth_.CalculateSize(_repeated_graphNetWorth_codec);
              size += inventorySnapshot_.CalculateSize(_repeated_inventorySnapshot_codec);
              if (AvgStatsCalibrated != false) {
                size += 2 + 1;
              }
              size += autoStyleCriteria_.CalculateSize(_repeated_autoStyleCriteria_codec);
              if (EventId != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
              }
              if (EventPoints != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventPoints);
              }
              size += eventData_.CalculateSize(_repeated_eventData_codec);
              size += strangeGemProgress_.CalculateSize(_repeated_strangeGemProgress_codec);
              if (HeroXp != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroXp);
              }
              if (CampsStacked != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CampsStacked);
              }
              size += victoryPrediction_.CalculateSize(_repeated_victoryPrediction_codec);
              if (LaneSelectionFlags != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LaneSelectionFlags);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Player other) {
              if (other == null) {
                return;
              }
              if (other.AccountId != 0) {
                AccountId = other.AccountId;
              }
              abilityUpgrades_.Add(other.abilityUpgrades_);
              if (other.PlayerSlot != 0) {
                PlayerSlot = other.PlayerSlot;
              }
              equippedEconItems_.Add(other.equippedEconItems_);
              kills_.Add(other.kills_);
              items_.Add(other.items_);
              if (other.AvgKillsX16 != 0) {
                AvgKillsX16 = other.AvgKillsX16;
              }
              if (other.AvgDeathsX16 != 0) {
                AvgDeathsX16 = other.AvgDeathsX16;
              }
              if (other.AvgAssistsX16 != 0) {
                AvgAssistsX16 = other.AvgAssistsX16;
              }
              if (other.AvgGpmX16 != 0) {
                AvgGpmX16 = other.AvgGpmX16;
              }
              if (other.AvgXpmX16 != 0) {
                AvgXpmX16 = other.AvgXpmX16;
              }
              if (other.BestKillsX16 != 0) {
                BestKillsX16 = other.BestKillsX16;
              }
              if (other.BestAssistsX16 != 0) {
                BestAssistsX16 = other.BestAssistsX16;
              }
              if (other.BestGpmX16 != 0) {
                BestGpmX16 = other.BestGpmX16;
              }
              if (other.BestXpmX16 != 0) {
                BestXpmX16 = other.BestXpmX16;
              }
              if (other.WinStreak != 0) {
                WinStreak = other.WinStreak;
              }
              if (other.BestWinStreak != 0) {
                BestWinStreak = other.BestWinStreak;
              }
              if (other.FightScore != 0F) {
                FightScore = other.FightScore;
              }
              if (other.FarmScore != 0F) {
                FarmScore = other.FarmScore;
              }
              if (other.SupportScore != 0F) {
                SupportScore = other.SupportScore;
              }
              if (other.PushScore != 0F) {
                PushScore = other.PushScore;
              }
              levelUpTimes_.Add(other.levelUpTimes_);
              graphNetWorth_.Add(other.graphNetWorth_);
              inventorySnapshot_.Add(other.inventorySnapshot_);
              if (other.AvgStatsCalibrated != false) {
                AvgStatsCalibrated = other.AvgStatsCalibrated;
              }
              autoStyleCriteria_.Add(other.autoStyleCriteria_);
              if (other.EventId != 0) {
                EventId = other.EventId;
              }
              if (other.EventPoints != 0) {
                EventPoints = other.EventPoints;
              }
              eventData_.Add(other.eventData_);
              strangeGemProgress_.Add(other.strangeGemProgress_);
              if (other.HeroXp != 0) {
                HeroXp = other.HeroXp;
              }
              if (other.CampsStacked != 0) {
                CampsStacked = other.CampsStacked;
              }
              victoryPrediction_.Add(other.victoryPrediction_);
              if (other.LaneSelectionFlags != 0) {
                LaneSelectionFlags = other.LaneSelectionFlags;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    AccountId = input.ReadUInt32();
                    break;
                  }
                  case 18:
                  case 16: {
                    abilityUpgrades_.AddEntriesFrom(input, _repeated_abilityUpgrades_codec);
                    break;
                  }
                  case 24: {
                    PlayerSlot = input.ReadUInt32();
                    break;
                  }
                  case 34: {
                    equippedEconItems_.AddEntriesFrom(input, _repeated_equippedEconItems_codec);
                    break;
                  }
                  case 42: {
                    kills_.AddEntriesFrom(input, _repeated_kills_codec);
                    break;
                  }
                  case 50: {
                    items_.AddEntriesFrom(input, _repeated_items_codec);
                    break;
                  }
                  case 56: {
                    AvgKillsX16 = input.ReadUInt32();
                    break;
                  }
                  case 64: {
                    AvgDeathsX16 = input.ReadUInt32();
                    break;
                  }
                  case 72: {
                    AvgAssistsX16 = input.ReadUInt32();
                    break;
                  }
                  case 80: {
                    AvgGpmX16 = input.ReadUInt32();
                    break;
                  }
                  case 88: {
                    AvgXpmX16 = input.ReadUInt32();
                    break;
                  }
                  case 96: {
                    BestKillsX16 = input.ReadUInt32();
                    break;
                  }
                  case 104: {
                    BestAssistsX16 = input.ReadUInt32();
                    break;
                  }
                  case 112: {
                    BestGpmX16 = input.ReadUInt32();
                    break;
                  }
                  case 120: {
                    BestXpmX16 = input.ReadUInt32();
                    break;
                  }
                  case 128: {
                    WinStreak = input.ReadUInt32();
                    break;
                  }
                  case 136: {
                    BestWinStreak = input.ReadUInt32();
                    break;
                  }
                  case 149: {
                    FightScore = input.ReadFloat();
                    break;
                  }
                  case 157: {
                    FarmScore = input.ReadFloat();
                    break;
                  }
                  case 165: {
                    SupportScore = input.ReadFloat();
                    break;
                  }
                  case 173: {
                    PushScore = input.ReadFloat();
                    break;
                  }
                  case 178:
                  case 176: {
                    levelUpTimes_.AddEntriesFrom(input, _repeated_levelUpTimes_codec);
                    break;
                  }
                  case 186:
                  case 189: {
                    graphNetWorth_.AddEntriesFrom(input, _repeated_graphNetWorth_codec);
                    break;
                  }
                  case 194: {
                    inventorySnapshot_.AddEntriesFrom(input, _repeated_inventorySnapshot_codec);
                    break;
                  }
                  case 200: {
                    AvgStatsCalibrated = input.ReadBool();
                    break;
                  }
                  case 210: {
                    autoStyleCriteria_.AddEntriesFrom(input, _repeated_autoStyleCriteria_codec);
                    break;
                  }
                  case 216: {
                    EventId = input.ReadUInt32();
                    break;
                  }
                  case 224: {
                    EventPoints = input.ReadUInt32();
                    break;
                  }
                  case 234: {
                    eventData_.AddEntriesFrom(input, _repeated_eventData_codec);
                    break;
                  }
                  case 242: {
                    strangeGemProgress_.AddEntriesFrom(input, _repeated_strangeGemProgress_codec);
                    break;
                  }
                  case 248: {
                    HeroXp = input.ReadUInt32();
                    break;
                  }
                  case 256: {
                    CampsStacked = input.ReadUInt32();
                    break;
                  }
                  case 266: {
                    victoryPrediction_.AddEntriesFrom(input, _repeated_victoryPrediction_codec);
                    break;
                  }
                  case 272: {
                    LaneSelectionFlags = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CDOTAMatchPrivateMetadata : pb::IMessage<CDOTAMatchPrivateMetadata> {
    private static readonly pb::MessageParser<CDOTAMatchPrivateMetadata> _parser = new pb::MessageParser<CDOTAMatchPrivateMetadata>(() => new CDOTAMatchPrivateMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAMatchPrivateMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.S2DotaMatchMetadataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchPrivateMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchPrivateMetadata(CDOTAMatchPrivateMetadata other) : this() {
      teams_ = other.teams_.Clone();
      graphWinProbability_ = other.graphWinProbability_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAMatchPrivateMetadata Clone() {
      return new CDOTAMatchPrivateMetadata(this);
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team> teams_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "graph_win_probability" field.</summary>
    public const int GraphWinProbabilityFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_graphWinProbability_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> graphWinProbability_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> GraphWinProbability {
      get { return graphWinProbability_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAMatchPrivateMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAMatchPrivateMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teams_.Equals(other.teams_)) return false;
      if(!graphWinProbability_.Equals(other.graphWinProbability_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teams_.GetHashCode();
      hash ^= graphWinProbability_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
      graphWinProbability_.WriteTo(output, _repeated_graphWinProbability_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      size += graphWinProbability_.CalculateSize(_repeated_graphWinProbability_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAMatchPrivateMetadata other) {
      if (other == null) {
        return;
      }
      teams_.Add(other.teams_);
      graphWinProbability_.Add(other.graphWinProbability_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 18:
          case 21: {
            graphWinProbability_.AddEntriesFrom(input, _repeated_graphWinProbability_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAMatchPrivateMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Team : pb::IMessage<Team> {
        private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Team> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team(Team other) : this() {
          dotaTeam_ = other.dotaTeam_;
          players_ = other.players_.Clone();
          buildings_ = other.buildings_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Team Clone() {
          return new Team(this);
        }

        /// <summary>Field number for the "dota_team" field.</summary>
        public const int DotaTeamFieldNumber = 1;
        private uint dotaTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DotaTeam {
          get { return dotaTeam_; }
          set {
            dotaTeam_ = value;
          }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player> _repeated_players_codec
            = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player> players_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player> Players {
          get { return players_; }
        }

        /// <summary>Field number for the "buildings" field.</summary>
        public const int BuildingsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Building> _repeated_buildings_codec
            = pb::FieldCodec.ForMessage(26, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Building.Parser);
        private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Building> buildings_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Building>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Building> Buildings {
          get { return buildings_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Team);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Team other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DotaTeam != other.DotaTeam) return false;
          if(!players_.Equals(other.players_)) return false;
          if(!buildings_.Equals(other.buildings_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DotaTeam != 0) hash ^= DotaTeam.GetHashCode();
          hash ^= players_.GetHashCode();
          hash ^= buildings_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DotaTeam != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(DotaTeam);
          }
          players_.WriteTo(output, _repeated_players_codec);
          buildings_.WriteTo(output, _repeated_buildings_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DotaTeam != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DotaTeam);
          }
          size += players_.CalculateSize(_repeated_players_codec);
          size += buildings_.CalculateSize(_repeated_buildings_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Team other) {
          if (other == null) {
            return;
          }
          if (other.DotaTeam != 0) {
            DotaTeam = other.DotaTeam;
          }
          players_.Add(other.players_);
          buildings_.Add(other.buildings_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DotaTeam = input.ReadUInt32();
                break;
              }
              case 18: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 26: {
                buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Team message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Player : pb::IMessage<Player> {
            private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Player> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player(Player other) : this() {
              accountId_ = other.accountId_;
              playerSlot_ = other.playerSlot_;
              positionStream_ = other.positionStream_;
              combatSegments_ = other.combatSegments_.Clone();
              damageUnitNames_ = other.damageUnitNames_.Clone();
              buffRecords_ = other.buffRecords_.Clone();
              graphKills_ = other.graphKills_.Clone();
              graphDeaths_ = other.graphDeaths_.Clone();
              graphAssists_ = other.graphAssists_.Clone();
              graphLasthits_ = other.graphLasthits_.Clone();
              graphDenies_ = other.graphDenies_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Player Clone() {
              return new Player(this);
            }

            /// <summary>Field number for the "account_id" field.</summary>
            public const int AccountIdFieldNumber = 1;
            private uint accountId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint AccountId {
              get { return accountId_; }
              set {
                accountId_ = value;
              }
            }

            /// <summary>Field number for the "player_slot" field.</summary>
            public const int PlayerSlotFieldNumber = 2;
            private uint playerSlot_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PlayerSlot {
              get { return playerSlot_; }
              set {
                playerSlot_ = value;
              }
            }

            /// <summary>Field number for the "position_stream" field.</summary>
            public const int PositionStreamFieldNumber = 3;
            private pb::ByteString positionStream_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString PositionStream {
              get { return positionStream_; }
              set {
                positionStream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "combat_segments" field.</summary>
            public const int CombatSegmentsFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment> _repeated_combatSegments_codec
                = pb::FieldCodec.ForMessage(34, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment> combatSegments_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment> CombatSegments {
              get { return combatSegments_; }
            }

            /// <summary>Field number for the "damage_unit_names" field.</summary>
            public const int DamageUnitNamesFieldNumber = 5;
            private static readonly pb::FieldCodec<string> _repeated_damageUnitNames_codec
                = pb::FieldCodec.ForString(42);
            private readonly pbc::RepeatedField<string> damageUnitNames_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> DamageUnitNames {
              get { return damageUnitNames_; }
            }

            /// <summary>Field number for the "buff_records" field.</summary>
            public const int BuffRecordsFieldNumber = 6;
            private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord> _repeated_buffRecords_codec
                = pb::FieldCodec.ForMessage(50, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Parser);
            private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord> buffRecords_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord> BuffRecords {
              get { return buffRecords_; }
            }

            /// <summary>Field number for the "graph_kills" field.</summary>
            public const int GraphKillsFieldNumber = 7;
            private static readonly pb::FieldCodec<float> _repeated_graphKills_codec
                = pb::FieldCodec.ForFloat(58);
            private readonly pbc::RepeatedField<float> graphKills_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> GraphKills {
              get { return graphKills_; }
            }

            /// <summary>Field number for the "graph_deaths" field.</summary>
            public const int GraphDeathsFieldNumber = 8;
            private static readonly pb::FieldCodec<float> _repeated_graphDeaths_codec
                = pb::FieldCodec.ForFloat(66);
            private readonly pbc::RepeatedField<float> graphDeaths_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> GraphDeaths {
              get { return graphDeaths_; }
            }

            /// <summary>Field number for the "graph_assists" field.</summary>
            public const int GraphAssistsFieldNumber = 9;
            private static readonly pb::FieldCodec<float> _repeated_graphAssists_codec
                = pb::FieldCodec.ForFloat(74);
            private readonly pbc::RepeatedField<float> graphAssists_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> GraphAssists {
              get { return graphAssists_; }
            }

            /// <summary>Field number for the "graph_lasthits" field.</summary>
            public const int GraphLasthitsFieldNumber = 10;
            private static readonly pb::FieldCodec<float> _repeated_graphLasthits_codec
                = pb::FieldCodec.ForFloat(82);
            private readonly pbc::RepeatedField<float> graphLasthits_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> GraphLasthits {
              get { return graphLasthits_; }
            }

            /// <summary>Field number for the "graph_denies" field.</summary>
            public const int GraphDeniesFieldNumber = 11;
            private static readonly pb::FieldCodec<float> _repeated_graphDenies_codec
                = pb::FieldCodec.ForFloat(90);
            private readonly pbc::RepeatedField<float> graphDenies_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> GraphDenies {
              get { return graphDenies_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Player);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Player other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (AccountId != other.AccountId) return false;
              if (PlayerSlot != other.PlayerSlot) return false;
              if (PositionStream != other.PositionStream) return false;
              if(!combatSegments_.Equals(other.combatSegments_)) return false;
              if(!damageUnitNames_.Equals(other.damageUnitNames_)) return false;
              if(!buffRecords_.Equals(other.buffRecords_)) return false;
              if(!graphKills_.Equals(other.graphKills_)) return false;
              if(!graphDeaths_.Equals(other.graphDeaths_)) return false;
              if(!graphAssists_.Equals(other.graphAssists_)) return false;
              if(!graphLasthits_.Equals(other.graphLasthits_)) return false;
              if(!graphDenies_.Equals(other.graphDenies_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (AccountId != 0) hash ^= AccountId.GetHashCode();
              if (PlayerSlot != 0) hash ^= PlayerSlot.GetHashCode();
              if (PositionStream.Length != 0) hash ^= PositionStream.GetHashCode();
              hash ^= combatSegments_.GetHashCode();
              hash ^= damageUnitNames_.GetHashCode();
              hash ^= buffRecords_.GetHashCode();
              hash ^= graphKills_.GetHashCode();
              hash ^= graphDeaths_.GetHashCode();
              hash ^= graphAssists_.GetHashCode();
              hash ^= graphLasthits_.GetHashCode();
              hash ^= graphDenies_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (AccountId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(AccountId);
              }
              if (PlayerSlot != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(PlayerSlot);
              }
              if (PositionStream.Length != 0) {
                output.WriteRawTag(26);
                output.WriteBytes(PositionStream);
              }
              combatSegments_.WriteTo(output, _repeated_combatSegments_codec);
              damageUnitNames_.WriteTo(output, _repeated_damageUnitNames_codec);
              buffRecords_.WriteTo(output, _repeated_buffRecords_codec);
              graphKills_.WriteTo(output, _repeated_graphKills_codec);
              graphDeaths_.WriteTo(output, _repeated_graphDeaths_codec);
              graphAssists_.WriteTo(output, _repeated_graphAssists_codec);
              graphLasthits_.WriteTo(output, _repeated_graphLasthits_codec);
              graphDenies_.WriteTo(output, _repeated_graphDenies_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (AccountId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
              }
              if (PlayerSlot != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSlot);
              }
              if (PositionStream.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PositionStream);
              }
              size += combatSegments_.CalculateSize(_repeated_combatSegments_codec);
              size += damageUnitNames_.CalculateSize(_repeated_damageUnitNames_codec);
              size += buffRecords_.CalculateSize(_repeated_buffRecords_codec);
              size += graphKills_.CalculateSize(_repeated_graphKills_codec);
              size += graphDeaths_.CalculateSize(_repeated_graphDeaths_codec);
              size += graphAssists_.CalculateSize(_repeated_graphAssists_codec);
              size += graphLasthits_.CalculateSize(_repeated_graphLasthits_codec);
              size += graphDenies_.CalculateSize(_repeated_graphDenies_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Player other) {
              if (other == null) {
                return;
              }
              if (other.AccountId != 0) {
                AccountId = other.AccountId;
              }
              if (other.PlayerSlot != 0) {
                PlayerSlot = other.PlayerSlot;
              }
              if (other.PositionStream.Length != 0) {
                PositionStream = other.PositionStream;
              }
              combatSegments_.Add(other.combatSegments_);
              damageUnitNames_.Add(other.damageUnitNames_);
              buffRecords_.Add(other.buffRecords_);
              graphKills_.Add(other.graphKills_);
              graphDeaths_.Add(other.graphDeaths_);
              graphAssists_.Add(other.graphAssists_);
              graphLasthits_.Add(other.graphLasthits_);
              graphDenies_.Add(other.graphDenies_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    AccountId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    PlayerSlot = input.ReadUInt32();
                    break;
                  }
                  case 26: {
                    PositionStream = input.ReadBytes();
                    break;
                  }
                  case 34: {
                    combatSegments_.AddEntriesFrom(input, _repeated_combatSegments_codec);
                    break;
                  }
                  case 42: {
                    damageUnitNames_.AddEntriesFrom(input, _repeated_damageUnitNames_codec);
                    break;
                  }
                  case 50: {
                    buffRecords_.AddEntriesFrom(input, _repeated_buffRecords_codec);
                    break;
                  }
                  case 58:
                  case 61: {
                    graphKills_.AddEntriesFrom(input, _repeated_graphKills_codec);
                    break;
                  }
                  case 66:
                  case 69: {
                    graphDeaths_.AddEntriesFrom(input, _repeated_graphDeaths_codec);
                    break;
                  }
                  case 74:
                  case 77: {
                    graphAssists_.AddEntriesFrom(input, _repeated_graphAssists_codec);
                    break;
                  }
                  case 82:
                  case 85: {
                    graphLasthits_.AddEntriesFrom(input, _repeated_graphLasthits_codec);
                    break;
                  }
                  case 90:
                  case 93: {
                    graphDenies_.AddEntriesFrom(input, _repeated_graphDenies_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Player message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class CombatSegment : pb::IMessage<CombatSegment> {
                private static readonly pb::MessageParser<CombatSegment> _parser = new pb::MessageParser<CombatSegment>(() => new CombatSegment());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<CombatSegment> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatSegment() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatSegment(CombatSegment other) : this() {
                  gameTime_ = other.gameTime_;
                  damageByAbility_ = other.damageByAbility_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatSegment Clone() {
                  return new CombatSegment(this);
                }

                /// <summary>Field number for the "game_time" field.</summary>
                public const int GameTimeFieldNumber = 1;
                private int gameTime_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int GameTime {
                  get { return gameTime_; }
                  set {
                    gameTime_ = value;
                  }
                }

                /// <summary>Field number for the "damage_by_ability" field.</summary>
                public const int DamageByAbilityFieldNumber = 2;
                private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility> _repeated_damageByAbility_codec
                    = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Parser);
                private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility> damageByAbility_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility> DamageByAbility {
                  get { return damageByAbility_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as CombatSegment);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(CombatSegment other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (GameTime != other.GameTime) return false;
                  if(!damageByAbility_.Equals(other.damageByAbility_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (GameTime != 0) hash ^= GameTime.GetHashCode();
                  hash ^= damageByAbility_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (GameTime != 0) {
                    output.WriteRawTag(8);
                    output.WriteInt32(GameTime);
                  }
                  damageByAbility_.WriteTo(output, _repeated_damageByAbility_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (GameTime != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
                  }
                  size += damageByAbility_.CalculateSize(_repeated_damageByAbility_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(CombatSegment other) {
                  if (other == null) {
                    return;
                  }
                  if (other.GameTime != 0) {
                    GameTime = other.GameTime;
                  }
                  damageByAbility_.Add(other.damageByAbility_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        GameTime = input.ReadInt32();
                        break;
                      }
                      case 18: {
                        damageByAbility_.AddEntriesFrom(input, _repeated_damageByAbility_codec);
                        break;
                      }
                    }
                  }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the CombatSegment message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  public sealed partial class DamageByAbility : pb::IMessage<DamageByAbility> {
                    private static readonly pb::MessageParser<DamageByAbility> _parser = new pb::MessageParser<DamageByAbility>(() => new DamageByAbility());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<DamageByAbility> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Descriptor.NestedTypes[0]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public DamageByAbility() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public DamageByAbility(DamageByAbility other) : this() {
                      sourceUnitIndex_ = other.sourceUnitIndex_;
                      abilityId_ = other.abilityId_;
                      byHeroTargets_ = other.byHeroTargets_.Clone();
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public DamageByAbility Clone() {
                      return new DamageByAbility(this);
                    }

                    /// <summary>Field number for the "source_unit_index" field.</summary>
                    public const int SourceUnitIndexFieldNumber = 3;
                    private uint sourceUnitIndex_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public uint SourceUnitIndex {
                      get { return sourceUnitIndex_; }
                      set {
                        sourceUnitIndex_ = value;
                      }
                    }

                    /// <summary>Field number for the "ability_id" field.</summary>
                    public const int AbilityIdFieldNumber = 1;
                    private uint abilityId_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public uint AbilityId {
                      get { return abilityId_; }
                      set {
                        abilityId_ = value;
                      }
                    }

                    /// <summary>Field number for the "by_hero_targets" field.</summary>
                    public const int ByHeroTargetsFieldNumber = 2;
                    private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Types.ByHeroTarget> _repeated_byHeroTargets_codec
                        = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Types.ByHeroTarget.Parser);
                    private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Types.ByHeroTarget> byHeroTargets_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Types.ByHeroTarget>();
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Types.ByHeroTarget> ByHeroTargets {
                      get { return byHeroTargets_; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as DamageByAbility);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(DamageByAbility other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if (SourceUnitIndex != other.SourceUnitIndex) return false;
                      if (AbilityId != other.AbilityId) return false;
                      if(!byHeroTargets_.Equals(other.byHeroTargets_)) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      if (SourceUnitIndex != 0) hash ^= SourceUnitIndex.GetHashCode();
                      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
                      hash ^= byHeroTargets_.GetHashCode();
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                      if (AbilityId != 0) {
                        output.WriteRawTag(8);
                        output.WriteUInt32(AbilityId);
                      }
                      byHeroTargets_.WriteTo(output, _repeated_byHeroTargets_codec);
                      if (SourceUnitIndex != 0) {
                        output.WriteRawTag(24);
                        output.WriteUInt32(SourceUnitIndex);
                      }
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      if (SourceUnitIndex != 0) {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceUnitIndex);
                      }
                      if (AbilityId != 0) {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
                      }
                      size += byHeroTargets_.CalculateSize(_repeated_byHeroTargets_codec);
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(DamageByAbility other) {
                      if (other == null) {
                        return;
                      }
                      if (other.SourceUnitIndex != 0) {
                        SourceUnitIndex = other.SourceUnitIndex;
                      }
                      if (other.AbilityId != 0) {
                        AbilityId = other.AbilityId;
                      }
                      byHeroTargets_.Add(other.byHeroTargets_);
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 8: {
                            AbilityId = input.ReadUInt32();
                            break;
                          }
                          case 18: {
                            byHeroTargets_.AddEntriesFrom(input, _repeated_byHeroTargets_codec);
                            break;
                          }
                          case 24: {
                            SourceUnitIndex = input.ReadUInt32();
                            break;
                          }
                        }
                      }
                    }

                    #region Nested types
                    /// <summary>Container for nested types declared in the DamageByAbility message type.</summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static partial class Types {
                      public sealed partial class ByHeroTarget : pb::IMessage<ByHeroTarget> {
                        private static readonly pb::MessageParser<ByHeroTarget> _parser = new pb::MessageParser<ByHeroTarget>(() => new ByHeroTarget());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<ByHeroTarget> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor {
                          get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.CombatSegment.Types.DamageByAbility.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor {
                          get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public ByHeroTarget() {
                          OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public ByHeroTarget(ByHeroTarget other) : this() {
                          heroId_ = other.heroId_;
                          damage_ = other.damage_;
                          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public ByHeroTarget Clone() {
                          return new ByHeroTarget(this);
                        }

                        /// <summary>Field number for the "hero_id" field.</summary>
                        public const int HeroIdFieldNumber = 1;
                        private uint heroId_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public uint HeroId {
                          get { return heroId_; }
                          set {
                            heroId_ = value;
                          }
                        }

                        /// <summary>Field number for the "damage" field.</summary>
                        public const int DamageFieldNumber = 2;
                        private uint damage_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public uint Damage {
                          get { return damage_; }
                          set {
                            damage_ = value;
                          }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other) {
                          return Equals(other as ByHeroTarget);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(ByHeroTarget other) {
                          if (ReferenceEquals(other, null)) {
                            return false;
                          }
                          if (ReferenceEquals(other, this)) {
                            return true;
                          }
                          if (HeroId != other.HeroId) return false;
                          if (Damage != other.Damage) return false;
                          return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode() {
                          int hash = 1;
                          if (HeroId != 0) hash ^= HeroId.GetHashCode();
                          if (Damage != 0) hash ^= Damage.GetHashCode();
                          if (_unknownFields != null) {
                            hash ^= _unknownFields.GetHashCode();
                          }
                          return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString() {
                          return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output) {
                          if (HeroId != 0) {
                            output.WriteRawTag(8);
                            output.WriteUInt32(HeroId);
                          }
                          if (Damage != 0) {
                            output.WriteRawTag(16);
                            output.WriteUInt32(Damage);
                          }
                          if (_unknownFields != null) {
                            _unknownFields.WriteTo(output);
                          }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize() {
                          int size = 0;
                          if (HeroId != 0) {
                            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
                          }
                          if (Damage != 0) {
                            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
                          }
                          if (_unknownFields != null) {
                            size += _unknownFields.CalculateSize();
                          }
                          return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(ByHeroTarget other) {
                          if (other == null) {
                            return;
                          }
                          if (other.HeroId != 0) {
                            HeroId = other.HeroId;
                          }
                          if (other.Damage != 0) {
                            Damage = other.Damage;
                          }
                          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input) {
                          uint tag;
                          while ((tag = input.ReadTag()) != 0) {
                            switch(tag) {
                              default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                              case 8: {
                                HeroId = input.ReadUInt32();
                                break;
                              }
                              case 16: {
                                Damage = input.ReadUInt32();
                                break;
                              }
                            }
                          }
                        }

                      }

                    }
                    #endregion

                  }

                }
                #endregion

              }

              public sealed partial class BuffRecord : pb::IMessage<BuffRecord> {
                private static readonly pb::MessageParser<BuffRecord> _parser = new pb::MessageParser<BuffRecord>(() => new BuffRecord());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<BuffRecord> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BuffRecord() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BuffRecord(BuffRecord other) : this() {
                  buffAbilityId_ = other.buffAbilityId_;
                  buffModifierName_ = other.buffModifierName_;
                  byHeroTargets_ = other.byHeroTargets_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BuffRecord Clone() {
                  return new BuffRecord(this);
                }

                /// <summary>Field number for the "buff_ability_id" field.</summary>
                public const int BuffAbilityIdFieldNumber = 1;
                private uint buffAbilityId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint BuffAbilityId {
                  get { return buffAbilityId_; }
                  set {
                    buffAbilityId_ = value;
                  }
                }

                /// <summary>Field number for the "buff_modifier_name" field.</summary>
                public const int BuffModifierNameFieldNumber = 3;
                private string buffModifierName_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string BuffModifierName {
                  get { return buffModifierName_; }
                  set {
                    buffModifierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "by_hero_targets" field.</summary>
                public const int ByHeroTargetsFieldNumber = 2;
                private static readonly pb::FieldCodec<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Types.ByHeroTarget> _repeated_byHeroTargets_codec
                    = pb::FieldCodec.ForMessage(18, global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Types.ByHeroTarget.Parser);
                private readonly pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Types.ByHeroTarget> byHeroTargets_ = new pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Types.ByHeroTarget>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Types.ByHeroTarget> ByHeroTargets {
                  get { return byHeroTargets_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as BuffRecord);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(BuffRecord other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (BuffAbilityId != other.BuffAbilityId) return false;
                  if (BuffModifierName != other.BuffModifierName) return false;
                  if(!byHeroTargets_.Equals(other.byHeroTargets_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (BuffAbilityId != 0) hash ^= BuffAbilityId.GetHashCode();
                  if (BuffModifierName.Length != 0) hash ^= BuffModifierName.GetHashCode();
                  hash ^= byHeroTargets_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (BuffAbilityId != 0) {
                    output.WriteRawTag(8);
                    output.WriteUInt32(BuffAbilityId);
                  }
                  byHeroTargets_.WriteTo(output, _repeated_byHeroTargets_codec);
                  if (BuffModifierName.Length != 0) {
                    output.WriteRawTag(26);
                    output.WriteString(BuffModifierName);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (BuffAbilityId != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffAbilityId);
                  }
                  if (BuffModifierName.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(BuffModifierName);
                  }
                  size += byHeroTargets_.CalculateSize(_repeated_byHeroTargets_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(BuffRecord other) {
                  if (other == null) {
                    return;
                  }
                  if (other.BuffAbilityId != 0) {
                    BuffAbilityId = other.BuffAbilityId;
                  }
                  if (other.BuffModifierName.Length != 0) {
                    BuffModifierName = other.BuffModifierName;
                  }
                  byHeroTargets_.Add(other.byHeroTargets_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        BuffAbilityId = input.ReadUInt32();
                        break;
                      }
                      case 18: {
                        byHeroTargets_.AddEntriesFrom(input, _repeated_byHeroTargets_codec);
                        break;
                      }
                      case 26: {
                        BuffModifierName = input.ReadString();
                        break;
                      }
                    }
                  }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the BuffRecord message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  public sealed partial class ByHeroTarget : pb::IMessage<ByHeroTarget> {
                    private static readonly pb::MessageParser<ByHeroTarget> _parser = new pb::MessageParser<ByHeroTarget>(() => new ByHeroTarget());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<ByHeroTarget> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Types.Player.Types.BuffRecord.Descriptor.NestedTypes[0]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ByHeroTarget() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ByHeroTarget(ByHeroTarget other) : this() {
                      heroId_ = other.heroId_;
                      elapsedDuration_ = other.elapsedDuration_;
                      isHidden_ = other.isHidden_;
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ByHeroTarget Clone() {
                      return new ByHeroTarget(this);
                    }

                    /// <summary>Field number for the "hero_id" field.</summary>
                    public const int HeroIdFieldNumber = 1;
                    private uint heroId_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public uint HeroId {
                      get { return heroId_; }
                      set {
                        heroId_ = value;
                      }
                    }

                    /// <summary>Field number for the "elapsed_duration" field.</summary>
                    public const int ElapsedDurationFieldNumber = 2;
                    private float elapsedDuration_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public float ElapsedDuration {
                      get { return elapsedDuration_; }
                      set {
                        elapsedDuration_ = value;
                      }
                    }

                    /// <summary>Field number for the "is_hidden" field.</summary>
                    public const int IsHiddenFieldNumber = 3;
                    private bool isHidden_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool IsHidden {
                      get { return isHidden_; }
                      set {
                        isHidden_ = value;
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as ByHeroTarget);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(ByHeroTarget other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if (HeroId != other.HeroId) return false;
                      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElapsedDuration, other.ElapsedDuration)) return false;
                      if (IsHidden != other.IsHidden) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      if (HeroId != 0) hash ^= HeroId.GetHashCode();
                      if (ElapsedDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElapsedDuration);
                      if (IsHidden != false) hash ^= IsHidden.GetHashCode();
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                      if (HeroId != 0) {
                        output.WriteRawTag(8);
                        output.WriteUInt32(HeroId);
                      }
                      if (ElapsedDuration != 0F) {
                        output.WriteRawTag(21);
                        output.WriteFloat(ElapsedDuration);
                      }
                      if (IsHidden != false) {
                        output.WriteRawTag(24);
                        output.WriteBool(IsHidden);
                      }
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      if (HeroId != 0) {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
                      }
                      if (ElapsedDuration != 0F) {
                        size += 1 + 4;
                      }
                      if (IsHidden != false) {
                        size += 1 + 1;
                      }
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(ByHeroTarget other) {
                      if (other == null) {
                        return;
                      }
                      if (other.HeroId != 0) {
                        HeroId = other.HeroId;
                      }
                      if (other.ElapsedDuration != 0F) {
                        ElapsedDuration = other.ElapsedDuration;
                      }
                      if (other.IsHidden != false) {
                        IsHidden = other.IsHidden;
                      }
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 8: {
                            HeroId = input.ReadUInt32();
                            break;
                          }
                          case 21: {
                            ElapsedDuration = input.ReadFloat();
                            break;
                          }
                          case 24: {
                            IsHidden = input.ReadBool();
                            break;
                          }
                        }
                      }
                    }

                  }

                }
                #endregion

              }

            }
            #endregion

          }

          public sealed partial class Building : pb::IMessage<Building> {
            private static readonly pb::MessageParser<Building> _parser = new pb::MessageParser<Building>(() => new Building());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Building> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Proto.Dota.CDOTAMatchPrivateMetadata.Types.Team.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Building() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Building(Building other) : this() {
              unitName_ = other.unitName_;
              positionQuantX_ = other.positionQuantX_;
              positionQuantY_ = other.positionQuantY_;
              deathTime_ = other.deathTime_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Building Clone() {
              return new Building(this);
            }

            /// <summary>Field number for the "unit_name" field.</summary>
            public const int UnitNameFieldNumber = 1;
            private string unitName_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string UnitName {
              get { return unitName_; }
              set {
                unitName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "position_quant_x" field.</summary>
            public const int PositionQuantXFieldNumber = 2;
            private uint positionQuantX_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PositionQuantX {
              get { return positionQuantX_; }
              set {
                positionQuantX_ = value;
              }
            }

            /// <summary>Field number for the "position_quant_y" field.</summary>
            public const int PositionQuantYFieldNumber = 3;
            private uint positionQuantY_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PositionQuantY {
              get { return positionQuantY_; }
              set {
                positionQuantY_ = value;
              }
            }

            /// <summary>Field number for the "death_time" field.</summary>
            public const int DeathTimeFieldNumber = 4;
            private float deathTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float DeathTime {
              get { return deathTime_; }
              set {
                deathTime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Building);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Building other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (UnitName != other.UnitName) return false;
              if (PositionQuantX != other.PositionQuantX) return false;
              if (PositionQuantY != other.PositionQuantY) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathTime, other.DeathTime)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (UnitName.Length != 0) hash ^= UnitName.GetHashCode();
              if (PositionQuantX != 0) hash ^= PositionQuantX.GetHashCode();
              if (PositionQuantY != 0) hash ^= PositionQuantY.GetHashCode();
              if (DeathTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathTime);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (UnitName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(UnitName);
              }
              if (PositionQuantX != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(PositionQuantX);
              }
              if (PositionQuantY != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(PositionQuantY);
              }
              if (DeathTime != 0F) {
                output.WriteRawTag(37);
                output.WriteFloat(DeathTime);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (UnitName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitName);
              }
              if (PositionQuantX != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionQuantX);
              }
              if (PositionQuantY != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionQuantY);
              }
              if (DeathTime != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Building other) {
              if (other == null) {
                return;
              }
              if (other.UnitName.Length != 0) {
                UnitName = other.UnitName;
              }
              if (other.PositionQuantX != 0) {
                PositionQuantX = other.PositionQuantX;
              }
              if (other.PositionQuantY != 0) {
                PositionQuantY = other.PositionQuantY;
              }
              if (other.DeathTime != 0F) {
                DeathTime = other.DeathTime;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    UnitName = input.ReadString();
                    break;
                  }
                  case 16: {
                    PositionQuantX = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    PositionQuantY = input.ReadUInt32();
                    break;
                  }
                  case 37: {
                    DeathTime = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
