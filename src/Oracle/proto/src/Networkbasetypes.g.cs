// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: networkbasetypes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Dota {

  /// <summary>Holder for reflection information generated from networkbasetypes.proto</summary>
  public static partial class NetworkbasetypesReflection {

    #region Descriptor
    /// <summary>File descriptor for networkbasetypes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkbasetypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZuZXR3b3JrYmFzZXR5cGVzLnByb3RvEg9nb29nbGUucHJvdG9idWYiLQoK",
            "Q01zZ1ZlY3RvchIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiIk",
            "CgxDTXNnVmVjdG9yMkQSCQoBeBgBIAEoAhIJCgF5GAIgASgCIi0KCkNNc2dR",
            "QW5nbGUSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiNgoIQ01z",
            "Z1JHQkESCQoBchgBIAEoBRIJCgFnGAIgASgFEgkKAWIYAyABKAUSCQoBYRgE",
            "IAEoBSKfAQoOQ01zZ1BsYXllckluZm8SDAoEbmFtZRgBIAEoCRIMCgR4dWlk",
            "GAIgASgGEg4KBnVzZXJpZBgDIAEoBRIPCgdzdGVhbWlkGAQgASgGEhIKCmZh",
            "a2VwbGF5ZXIYBSABKAgSDgoGaXNobHR2GAYgASgIEhMKC2N1c3RvbUZpbGVz",
            "GAcgAygHEhcKD2ZpbGVzRG93bmxvYWRlZBgIIAEoBSJiCgpDTXNnX0NWYXJz",
            "Ei8KBWN2YXJzGAEgAygLMiAuZ29vZ2xlLnByb3RvYnVmLkNNc2dfQ1ZhcnMu",
            "Q1ZhchojCgRDVmFyEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAkiDQoL",
            "Q05FVE1zZ19OT1AiJwoXQ05FVE1zZ19TcGxpdFNjcmVlblVzZXISDAoEc2xv",
            "dBgBIAEoBSJSChJDTkVUTXNnX0Rpc2Nvbm5lY3QSPAoGcmVhc29uGAIgASgO",
            "MiwuZ29vZ2xlLnByb3RvYnVmLkVOZXR3b3JrRGlzY29ubmVjdGlvblJlYXNv",
            "biJ8CgxDTkVUTXNnX0ZpbGUSEwoLdHJhbnNmZXJfaWQYASABKAUSEQoJZmls",
            "ZV9uYW1lGAIgASgJEhsKE2lzX3JlcGxheV9kZW1vX2ZpbGUYAyABKAgSDAoE",
            "ZGVueRgEIAEoCBIZChFpc19maWxlX3JlcXVlc3RlZBgFIAEoCCLiAQoMQ05F",
            "VE1zZ19UaWNrEgwKBHRpY2sYASABKA0SFgoOaG9zdF9mcmFtZXRpbWUYAiAB",
            "KA0SJAocaG9zdF9mcmFtZXRpbWVfc3RkX2RldmlhdGlvbhgDIAEoDRIcChRo",
            "b3N0X2NvbXB1dGF0aW9udGltZRgEIAEoDRIqCiJob3N0X2NvbXB1dGF0aW9u",
            "dGltZV9zdGRfZGV2aWF0aW9uGAUgASgNEikKIWhvc3RfZnJhbWVzdGFydHRp",
            "bWVfc3RkX2RldmlhdGlvbhgGIAEoDRIRCglob3N0X2xvc3MYByABKA0iJAoR",
            "Q05FVE1zZ19TdHJpbmdDbWQSDwoHY29tbWFuZBgBIAEoCSJBChFDTkVUTXNn",
            "X1NldENvblZhchIsCgdjb252YXJzGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkNNc2dfQ1ZhcnMimgEKE0NORVRNc2dfU2lnbm9uU3RhdGUSFAoMc2lnbm9u",
            "X3N0YXRlGAEgASgNEhMKC3NwYXduX2NvdW50GAIgASgNEhoKEm51bV9zZXJ2",
            "ZXJfcGxheWVycxgDIAEoDRIaChJwbGF5ZXJzX25ldHdvcmtpZHMYBCADKAkS",
            "EAoIbWFwX25hbWUYBSABKAkSDgoGYWRkb25zGAYgASgJIowCChFDU1ZDTXNn",
            "X0dhbWVFdmVudBISCgpldmVudF9uYW1lGAEgASgJEg8KB2V2ZW50aWQYAiAB",
            "KAUSNgoEa2V5cxgDIAMoCzIoLmdvb2dsZS5wcm90b2J1Zi5DU1ZDTXNnX0dh",
            "bWVFdmVudC5rZXlfdBqZAQoFa2V5X3QSDAoEdHlwZRgBIAEoBRISCgp2YWxf",
            "c3RyaW5nGAIgASgJEhEKCXZhbF9mbG9hdBgDIAEoAhIQCgh2YWxfbG9uZxgE",
            "IAEoBRIRCgl2YWxfc2hvcnQYBSABKAUSEAoIdmFsX2J5dGUYBiABKAUSEAoI",
            "dmFsX2Jvb2wYByABKAgSEgoKdmFsX3VpbnQ2NBgIIAEoBCKlAQoWQ1NWQ01z",
            "Z0xpc3RfR2FtZUV2ZW50cxI/CgZldmVudHMYASADKAsyLy5nb29nbGUucHJv",
            "dG9idWYuQ1NWQ01zZ0xpc3RfR2FtZUV2ZW50cy5ldmVudF90GkoKB2V2ZW50",
            "X3QSDAoEdGljaxgBIAEoBRIxCgVldmVudBgCIAEoCzIiLmdvb2dsZS5wcm90",
            "b2J1Zi5DU1ZDTXNnX0dhbWVFdmVudCI5ChNDU1ZDTXNnX1VzZXJNZXNzYWdl",
            "EhAKCG1zZ190eXBlGAEgASgFEhAKCG1zZ19kYXRhGAIgASgMIq8BChhDU1ZD",
            "TXNnTGlzdF9Vc2VyTWVzc2FnZXMSRQoIdXNlcm1zZ3MYASADKAsyMy5nb29n",
            "bGUucHJvdG9idWYuQ1NWQ01zZ0xpc3RfVXNlck1lc3NhZ2VzLnVzZXJtc2df",
            "dBpMCgl1c2VybXNnX3QSDAoEdGljaxgBIAEoBRIxCgNtc2cYAiABKAsyJC5n",
            "b29nbGUucHJvdG9idWYuQ1NWQ01zZ19Vc2VyTWVzc2FnZSKaBAoXQ05FVE1z",
            "Z19TcGF3bkdyb3VwX0xvYWQSEQoJd29ybGRuYW1lGAEgASgJEhYKDmVudGl0",
            "eWx1bXBuYW1lGAIgASgJEhgKEGVudGl0eWZpbHRlcm5hbWUYAyABKAkSGAoQ",
            "c3Bhd25ncm91cGhhbmRsZRgEIAEoDRIdChVzcGF3bmdyb3Vwb3duZXJoYW5k",
            "bGUYBSABKA0SNQoQd29ybGRfb2Zmc2V0X3BvcxgGIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5DTXNnVmVjdG9yEjcKEndvcmxkX29mZnNldF9hbmdsZRgHIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5DTXNnUUFuZ2xlEhoKEnNwYXduZ3JvdXBt",
            "YW5pZmVzdBgIIAEoDBINCgVmbGFncxgJIAEoDRIRCgl0aWNrY291bnQYCiAB",
            "KAUSGgoSbWFuaWZlc3RpbmNvbXBsZXRlGAsgASgIEhYKDmxvY2FsbmFtZWZp",
            "eHVwGAwgASgJEhcKD3BhcmVudG5hbWVmaXh1cBgNIAEoCRIcChRtYW5pZmVz",
            "dGxvYWRwcmlvcml0eRgOIAEoBRIUCgx3b3JsZGdyb3VwaWQYDyABKA0SGAoQ",
            "Y3JlYXRpb25zZXF1ZW5jZRgQIAEoDRIYChBzYXZlZ2FtZWZpbGVuYW1lGBEg",
            "ASgJEh4KFnNwYXduZ3JvdXBwYXJlbnRoYW5kbGUYEiABKA0idQohQ05FVE1z",
            "Z19TcGF3bkdyb3VwX01hbmlmZXN0VXBkYXRlEhgKEHNwYXduZ3JvdXBoYW5k",
            "bGUYASABKA0SGgoSc3Bhd25ncm91cG1hbmlmZXN0GAIgASgMEhoKEm1hbmlm",
            "ZXN0aW5jb21wbGV0ZRgDIAEoCCJrCiJDTkVUTXNnX1NwYXduR3JvdXBfU2V0",
            "Q3JlYXRpb25UaWNrEhgKEHNwYXduZ3JvdXBoYW5kbGUYASABKA0SEQoJdGlj",
            "a2NvdW50GAIgASgFEhgKEGNyZWF0aW9uc2VxdWVuY2UYAyABKA0iVwoZQ05F",
            "VE1zZ19TcGF3bkdyb3VwX1VubG9hZBIYChBzcGF3bmdyb3VwaGFuZGxlGAEg",
            "ASgNEg0KBWZsYWdzGAIgASgNEhEKCXRpY2tjb3VudBgDIAEoBSI8CiBDTkVU",
            "TXNnX1NwYXduR3JvdXBfTG9hZENvbXBsZXRlZBIYChBzcGF3bmdyb3VwaGFu",
            "ZGxlGAEgASgNIrQDCiBDU1ZDTXNnX0dhbWVTZXNzaW9uQ29uZmlndXJhdGlv",
            "bhIWCg5pc19tdWx0aXBsYXllchgBIAEoCBIXCg9pc19sb2Fkc2F2ZWdhbWUY",
            "AiABKAgSGQoRaXNfYmFja2dyb3VuZF9tYXAYAyABKAgSEwoLaXNfaGVhZGxl",
            "c3MYBCABKAgSGAoQbWluX2NsaWVudF9saW1pdBgFIAEoDRIYChBtYXhfY2xp",
            "ZW50X2xpbWl0GAYgASgNEhMKC21heF9jbGllbnRzGAcgASgNEhUKDXRpY2tf",
            "aW50ZXJ2YWwYCCABKAcSEAoIaG9zdG5hbWUYCSABKAkSFAoMc2F2ZWdhbWVu",
            "YW1lGAogASgJEhIKCnMxX21hcG5hbWUYCyABKAkSEAoIZ2FtZW1vZGUYDCAB",
            "KAkSGQoRc2VydmVyX2lwX2FkZHJlc3MYDSABKAkSDAoEZGF0YRgOIAEoDBIU",
            "Cgxpc19sb2NhbG9ubHkYDyABKAgSFQoNaXNfdHJhbnNpdGlvbhgQIAEoCBIV",
            "Cg1wcmV2aW91c2xldmVsGBEgASgJEhQKDGxhbmRtYXJrbmFtZRgSIAEoCSIi",
            "CiBDTkVUTXNnX1JlbGlhYmxlTWVzc2FnZUVuZE1hcmtlciI6ChhDTkVUTXNn",
            "X1BsYXllckF2YXRhckRhdGESEQoJYWNjb3VudGlkGAEgASgNEgsKA3JnYhgC",
            "IAEoDCr4AgoMTkVUX01lc3NhZ2VzEgsKB25ldF9OT1AQABISCg5uZXRfRGlz",
            "Y29ubmVjdBABEgwKCG5ldF9GaWxlEAISFwoTbmV0X1NwbGl0U2NyZWVuVXNl",
            "chADEgwKCG5ldF9UaWNrEAQSEQoNbmV0X1N0cmluZ0NtZBAFEhEKDW5ldF9T",
            "ZXRDb25WYXIQBhITCg9uZXRfU2lnbm9uU3RhdGUQBxIXChNuZXRfU3Bhd25H",
            "cm91cF9Mb2FkEAgSIQodbmV0X1NwYXduR3JvdXBfTWFuaWZlc3RVcGRhdGUQ",
            "CRIiCh5uZXRfU3Bhd25Hcm91cF9TZXRDcmVhdGlvblRpY2sQCxIZChVuZXRf",
            "U3Bhd25Hcm91cF9VbmxvYWQQDBIgChxuZXRfU3Bhd25Hcm91cF9Mb2FkQ29t",
            "cGxldGVkEA0SIAocbmV0X1JlbGlhYmxlTWVzc2FnZUVuZE1hcmtlchAOEhgK",
            "FG5ldF9QbGF5ZXJBdmF0YXJEYXRhEGQq0gEKC1NJR05PTlNUQVRFEhQKEFNJ",
            "R05PTlNUQVRFX05PTkUQABIZChVTSUdOT05TVEFURV9DSEFMTEVOR0UQARIZ",
            "ChVTSUdOT05TVEFURV9DT05ORUNURUQQAhITCg9TSUdOT05TVEFURV9ORVcQ",
            "AxIYChRTSUdOT05TVEFURV9QUkVTUEFXThAEEhUKEVNJR05PTlNUQVRFX1NQ",
            "QVdOEAUSFAoQU0lHTk9OU1RBVEVfRlVMTBAGEhsKF1NJR05PTlNUQVRFX0NI",
            "QU5HRUxFVkVMEAcqhAMKEVNwYXduR3JvdXBGbGFnc190EhcKE1NQQVdOX0dS",
            "T1VQX1VOS05PV04QABInCiNTUEFXTl9HUk9VUF9MT0FEX0VOVElUSUVTX0ZS",
            "T01fU0FWRRABEiMKH1NQQVdOX0dST1VQX0RPTlRfU1BBV05fRU5USVRJRVMQ",
            "AhIhCh1TUEFXTl9HUk9VUF9TWU5DSFJPTk9VU19TUEFXThAEEiYKIlNQQVdO",
            "X0dST1VQX0lTX0lOSVRJQUxfU1BBV05fR1JPVVAQCBIrCidTUEFXTl9HUk9V",
            "UF9DUkVBVEVfQ0xJRU5UX09OTFlfRU5USVRJRVMQEBIdChlTUEFXTl9HUk9V",
            "UF9TQVZFX0VOVElUSUVTECASIgoeU1BBV05fR1JPVVBfQkxPQ0tfVU5USUxf",
            "TE9BREVEEEASJAofU1BBV05fR1JPVVBfTE9BRF9TVFJFQU1JTkdfREFUQRCA",
            "ARInCiJTUEFXTl9HUk9VUF9DUkVBVEVfTkVXX1NDRU5FX1dPUkxEEIACKpcR",
            "ChtFTmV0d29ya0Rpc2Nvbm5lY3Rpb25SZWFzb24SHgoaTkVUV09SS19ESVND",
            "T05ORUNUX0lOVkFMSUQQABIfChtORVRXT1JLX0RJU0NPTk5FQ1RfU0hVVERP",
            "V04QARIpCiVORVRXT1JLX0RJU0NPTk5FQ1RfRElTQ09OTkVDVF9CWV9VU0VS",
            "EAISKwonTkVUV09SS19ESVNDT05ORUNUX0RJU0NPTk5FQ1RfQllfU0VSVkVS",
            "EAMSGwoXTkVUV09SS19ESVNDT05ORUNUX0xPU1QQBBIfChtORVRXT1JLX0RJ",
            "U0NPTk5FQ1RfT1ZFUkZMT1cQBRIjCh9ORVRXT1JLX0RJU0NPTk5FQ1RfU1RF",
            "QU1fQkFOTkVEEAYSIgoeTkVUV09SS19ESVNDT05ORUNUX1NURUFNX0lOVVNF",
            "EAcSIwofTkVUV09SS19ESVNDT05ORUNUX1NURUFNX1RJQ0tFVBAIEiIKHk5F",
            "VFdPUktfRElTQ09OTkVDVF9TVEVBTV9MT0dPThAJEioKJk5FVFdPUktfRElT",
            "Q09OTkVDVF9TVEVBTV9BVVRIQ0FOQ0VMTEVEEAoSLAooTkVUV09SS19ESVND",
            "T05ORUNUX1NURUFNX0FVVEhBTFJFQURZVVNFRBALEigKJE5FVFdPUktfRElT",
            "Q09OTkVDVF9TVEVBTV9BVVRISU5WQUxJRBAMEigKJE5FVFdPUktfRElTQ09O",
            "TkVDVF9TVEVBTV9WQUNCQU5TVEFURRANEjAKLE5FVFdPUktfRElTQ09OTkVD",
            "VF9TVEVBTV9MT0dHRURfSU5fRUxTRVdIRVJFEA4SLworTkVUV09SS19ESVND",
            "T05ORUNUX1NURUFNX1ZBQ19DSEVDS19USU1FRE9VVBAPEiQKIE5FVFdPUktf",
            "RElTQ09OTkVDVF9TVEVBTV9EUk9QUEVEEBASJgoiTkVUV09SS19ESVNDT05O",
            "RUNUX1NURUFNX09XTkVSU0hJUBAREioKJk5FVFdPUktfRElTQ09OTkVDVF9T",
            "RVJWRVJJTkZPX09WRVJGTE9XEBISJwojTkVUV09SS19ESVNDT05ORUNUX1RJ",
            "Q0tNU0dfT1ZFUkZMT1cQExIuCipORVRXT1JLX0RJU0NPTk5FQ1RfU1RSSU5H",
            "VEFCTEVNU0dfT1ZFUkZMT1cQFBIrCidORVRXT1JLX0RJU0NPTk5FQ1RfREVM",
            "VEFFTlRNU0dfT1ZFUkZMT1cQFRIqCiZORVRXT1JLX0RJU0NPTk5FQ1RfVEVN",
            "UEVOVE1TR19PVkVSRkxPVxAWEikKJU5FVFdPUktfRElTQ09OTkVDVF9TT1VO",
            "RFNNU0dfT1ZFUkZMT1cQFxInCiNORVRXT1JLX0RJU0NPTk5FQ1RfU05BUFNI",
            "T1RPVkVSRkxPVxAYEiQKIE5FVFdPUktfRElTQ09OTkVDVF9TTkFQU0hPVEVS",
            "Uk9SEBkSJwojTkVUV09SS19ESVNDT05ORUNUX1JFTElBQkxFT1ZFUkZMT1cQ",
            "GhIjCh9ORVRXT1JLX0RJU0NPTk5FQ1RfQkFEREVMVEFUSUNLEBsSIwofTkVU",
            "V09SS19ESVNDT05ORUNUX05PTU9SRVNQTElUUxAcEh8KG05FVFdPUktfRElT",
            "Q09OTkVDVF9USU1FRE9VVBAdEiMKH05FVFdPUktfRElTQ09OTkVDVF9ESVND",
            "T05ORUNURUQQHhIjCh9ORVRXT1JLX0RJU0NPTk5FQ1RfTEVBVklOR1NQTElU",
            "EB8SKwonTkVUV09SS19ESVNDT05ORUNUX0RJRkZFUkVOVENMQVNTVEFCTEVT",
            "ECASJwojTkVUV09SS19ESVNDT05ORUNUX0JBRFJFTEFZUEFTU1dPUkQQIRIr",
            "CidORVRXT1JLX0RJU0NPTk5FQ1RfQkFEU1BFQ1RBVE9SUEFTU1dPUkQQIhIl",
            "CiFORVRXT1JLX0RJU0NPTk5FQ1RfSExUVlJFU1RSSUNURUQQIxIjCh9ORVRX",
            "T1JLX0RJU0NPTk5FQ1RfTk9TUEVDVEFUT1JTECQSJgoiTkVUV09SS19ESVND",
            "T05ORUNUX0hMVFZVTkFWQUlMQUJMRRAlEh8KG05FVFdPUktfRElTQ09OTkVD",
            "VF9ITFRWU1RPUBAmEh0KGU5FVFdPUktfRElTQ09OTkVDVF9LSUNLRUQQJxIf",
            "ChtORVRXT1JLX0RJU0NPTk5FQ1RfQkFOQURERUQQKBIjCh9ORVRXT1JLX0RJ",
            "U0NPTk5FQ1RfS0lDS0JBTkFEREVEECkSIQodTkVUV09SS19ESVNDT05ORUNU",
            "X0hMVFZESVJFQ1QQKhItCilORVRXT1JLX0RJU0NPTk5FQ1RfUFVSRVNFUlZF",
            "Ul9DTElFTlRFWFRSQRArEioKJk5FVFdPUktfRElTQ09OTkVDVF9QVVJFU0VS",
            "VkVSX01JU01BVENIECwSHgoaTkVUV09SS19ESVNDT05ORUNUX1VTRVJDTUQQ",
            "LRInCiNORVRXT1JLX0RJU0NPTk5FQ1RfUkVKRUNURURfQllfR0FNRRAuEioK",
            "Jk5FVFdPUktfRElTQ09OTkVDVF9NRVNTQUdFX1BBUlNFX0VSUk9SEC8SLAoo",
            "TkVUV09SS19ESVNDT05ORUNUX0lOVkFMSURfTUVTU0FHRV9FUlJPUhAwEioK",
            "Jk5FVFdPUktfRElTQ09OTkVDVF9CQURfU0VSVkVSX1BBU1NXT1JEEDESMQot",
            "TkVUV09SS19ESVNDT05ORUNUX0RJUkVDVF9DT05ORUNUX1JFU0VSVkFUSU9O",
            "EDISKQolTkVUV09SS19ESVNDT05ORUNUX0NPTk5FQ1RJT05fRkFJTFVSRRAz",
            "Ei0KKU5FVFdPUktfRElTQ09OTkVDVF9OT19QRUVSX0dST1VQX0hBTkRMRVJT",
            "EDQSIwofTkVUV09SS19ESVNDT05ORUNUX1JFQ09OTkVDVElPThA1QhCAAQCq",
            "AgpQcm90by5Eb3RhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Dota.NET_Messages), typeof(global::Proto.Dota.SIGNONSTATE), typeof(global::Proto.Dota.SpawnGroupFlags_t), typeof(global::Proto.Dota.ENetworkDisconnectionReason), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgVector), global::Proto.Dota.CMsgVector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgVector2D), global::Proto.Dota.CMsgVector2D.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgQAngle), global::Proto.Dota.CMsgQAngle.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgRGBA), global::Proto.Dota.CMsgRGBA.Parser, new[]{ "R", "G", "B", "A" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsgPlayerInfo), global::Proto.Dota.CMsgPlayerInfo.Parser, new[]{ "Name", "Xuid", "Userid", "Steamid", "Fakeplayer", "Ishltv", "CustomFiles", "FilesDownloaded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsg_CVars), global::Proto.Dota.CMsg_CVars.Parser, new[]{ "Cvars" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CMsg_CVars.Types.CVar), global::Proto.Dota.CMsg_CVars.Types.CVar.Parser, new[]{ "Name", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_NOP), global::Proto.Dota.CNETMsg_NOP.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SplitScreenUser), global::Proto.Dota.CNETMsg_SplitScreenUser.Parser, new[]{ "Slot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_Disconnect), global::Proto.Dota.CNETMsg_Disconnect.Parser, new[]{ "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_File), global::Proto.Dota.CNETMsg_File.Parser, new[]{ "TransferId", "FileName", "IsReplayDemoFile", "Deny", "IsFileRequested" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_Tick), global::Proto.Dota.CNETMsg_Tick.Parser, new[]{ "Tick", "HostFrametime", "HostFrametimeStdDeviation", "HostComputationtime", "HostComputationtimeStdDeviation", "HostFramestarttimeStdDeviation", "HostLoss" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_StringCmd), global::Proto.Dota.CNETMsg_StringCmd.Parser, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SetConVar), global::Proto.Dota.CNETMsg_SetConVar.Parser, new[]{ "Convars" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SignonState), global::Proto.Dota.CNETMsg_SignonState.Parser, new[]{ "SignonState", "SpawnCount", "NumServerPlayers", "PlayersNetworkids", "MapName", "Addons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_GameEvent), global::Proto.Dota.CSVCMsg_GameEvent.Parser, new[]{ "EventName", "Eventid", "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_GameEvent.Types.key_t), global::Proto.Dota.CSVCMsg_GameEvent.Types.key_t.Parser, new[]{ "Type", "ValString", "ValFloat", "ValLong", "ValShort", "ValByte", "ValBool", "ValUint64" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsgList_GameEvents), global::Proto.Dota.CSVCMsgList_GameEvents.Parser, new[]{ "Events" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsgList_GameEvents.Types.event_t), global::Proto.Dota.CSVCMsgList_GameEvents.Types.event_t.Parser, new[]{ "Tick", "Event" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_UserMessage), global::Proto.Dota.CSVCMsg_UserMessage.Parser, new[]{ "MsgType", "MsgData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsgList_UserMessages), global::Proto.Dota.CSVCMsgList_UserMessages.Parser, new[]{ "Usermsgs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsgList_UserMessages.Types.usermsg_t), global::Proto.Dota.CSVCMsgList_UserMessages.Types.usermsg_t.Parser, new[]{ "Tick", "Msg" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SpawnGroup_Load), global::Proto.Dota.CNETMsg_SpawnGroup_Load.Parser, new[]{ "Worldname", "Entitylumpname", "Entityfiltername", "Spawngrouphandle", "Spawngroupownerhandle", "WorldOffsetPos", "WorldOffsetAngle", "Spawngroupmanifest", "Flags", "Tickcount", "Manifestincomplete", "Localnamefixup", "Parentnamefixup", "Manifestloadpriority", "Worldgroupid", "Creationsequence", "Savegamefilename", "Spawngroupparenthandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SpawnGroup_ManifestUpdate), global::Proto.Dota.CNETMsg_SpawnGroup_ManifestUpdate.Parser, new[]{ "Spawngrouphandle", "Spawngroupmanifest", "Manifestincomplete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SpawnGroup_SetCreationTick), global::Proto.Dota.CNETMsg_SpawnGroup_SetCreationTick.Parser, new[]{ "Spawngrouphandle", "Tickcount", "Creationsequence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SpawnGroup_Unload), global::Proto.Dota.CNETMsg_SpawnGroup_Unload.Parser, new[]{ "Spawngrouphandle", "Flags", "Tickcount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_SpawnGroup_LoadCompleted), global::Proto.Dota.CNETMsg_SpawnGroup_LoadCompleted.Parser, new[]{ "Spawngrouphandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CSVCMsg_GameSessionConfiguration), global::Proto.Dota.CSVCMsg_GameSessionConfiguration.Parser, new[]{ "IsMultiplayer", "IsLoadsavegame", "IsBackgroundMap", "IsHeadless", "MinClientLimit", "MaxClientLimit", "MaxClients", "TickInterval", "Hostname", "Savegamename", "S1Mapname", "Gamemode", "ServerIpAddress", "Data", "IsLocalonly", "IsTransition", "Previouslevel", "Landmarkname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_ReliableMessageEndMarker), global::Proto.Dota.CNETMsg_ReliableMessageEndMarker.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Dota.CNETMsg_PlayerAvatarData), global::Proto.Dota.CNETMsg_PlayerAvatarData.Parser, new[]{ "Accountid", "Rgb" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum NET_Messages {
    [pbr::OriginalName("net_NOP")] NetNop = 0,
    [pbr::OriginalName("net_Disconnect")] NetDisconnect = 1,
    [pbr::OriginalName("net_File")] NetFile = 2,
    [pbr::OriginalName("net_SplitScreenUser")] NetSplitScreenUser = 3,
    [pbr::OriginalName("net_Tick")] NetTick = 4,
    [pbr::OriginalName("net_StringCmd")] NetStringCmd = 5,
    [pbr::OriginalName("net_SetConVar")] NetSetConVar = 6,
    [pbr::OriginalName("net_SignonState")] NetSignonState = 7,
    [pbr::OriginalName("net_SpawnGroup_Load")] NetSpawnGroupLoad = 8,
    [pbr::OriginalName("net_SpawnGroup_ManifestUpdate")] NetSpawnGroupManifestUpdate = 9,
    [pbr::OriginalName("net_SpawnGroup_SetCreationTick")] NetSpawnGroupSetCreationTick = 11,
    [pbr::OriginalName("net_SpawnGroup_Unload")] NetSpawnGroupUnload = 12,
    [pbr::OriginalName("net_SpawnGroup_LoadCompleted")] NetSpawnGroupLoadCompleted = 13,
    [pbr::OriginalName("net_ReliableMessageEndMarker")] NetReliableMessageEndMarker = 14,
    [pbr::OriginalName("net_PlayerAvatarData")] NetPlayerAvatarData = 100,
  }

  public enum SIGNONSTATE {
    [pbr::OriginalName("SIGNONSTATE_NONE")] None = 0,
    [pbr::OriginalName("SIGNONSTATE_CHALLENGE")] Challenge = 1,
    [pbr::OriginalName("SIGNONSTATE_CONNECTED")] Connected = 2,
    [pbr::OriginalName("SIGNONSTATE_NEW")] New = 3,
    [pbr::OriginalName("SIGNONSTATE_PRESPAWN")] Prespawn = 4,
    [pbr::OriginalName("SIGNONSTATE_SPAWN")] Spawn = 5,
    [pbr::OriginalName("SIGNONSTATE_FULL")] Full = 6,
    [pbr::OriginalName("SIGNONSTATE_CHANGELEVEL")] Changelevel = 7,
  }

  public enum SpawnGroupFlags_t {
    [pbr::OriginalName("SPAWN_GROUP_UNKNOWN")] SpawnGroupUnknown = 0,
    [pbr::OriginalName("SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE")] SpawnGroupLoadEntitiesFromSave = 1,
    [pbr::OriginalName("SPAWN_GROUP_DONT_SPAWN_ENTITIES")] SpawnGroupDontSpawnEntities = 2,
    [pbr::OriginalName("SPAWN_GROUP_SYNCHRONOUS_SPAWN")] SpawnGroupSynchronousSpawn = 4,
    [pbr::OriginalName("SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP")] SpawnGroupIsInitialSpawnGroup = 8,
    [pbr::OriginalName("SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES")] SpawnGroupCreateClientOnlyEntities = 16,
    [pbr::OriginalName("SPAWN_GROUP_SAVE_ENTITIES")] SpawnGroupSaveEntities = 32,
    [pbr::OriginalName("SPAWN_GROUP_BLOCK_UNTIL_LOADED")] SpawnGroupBlockUntilLoaded = 64,
    [pbr::OriginalName("SPAWN_GROUP_LOAD_STREAMING_DATA")] SpawnGroupLoadStreamingData = 128,
    [pbr::OriginalName("SPAWN_GROUP_CREATE_NEW_SCENE_WORLD")] SpawnGroupCreateNewSceneWorld = 256,
  }

  public enum ENetworkDisconnectionReason {
    [pbr::OriginalName("NETWORK_DISCONNECT_INVALID")] NetworkDisconnectInvalid = 0,
    [pbr::OriginalName("NETWORK_DISCONNECT_SHUTDOWN")] NetworkDisconnectShutdown = 1,
    [pbr::OriginalName("NETWORK_DISCONNECT_DISCONNECT_BY_USER")] NetworkDisconnectDisconnectByUser = 2,
    [pbr::OriginalName("NETWORK_DISCONNECT_DISCONNECT_BY_SERVER")] NetworkDisconnectDisconnectByServer = 3,
    [pbr::OriginalName("NETWORK_DISCONNECT_LOST")] NetworkDisconnectLost = 4,
    [pbr::OriginalName("NETWORK_DISCONNECT_OVERFLOW")] NetworkDisconnectOverflow = 5,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_BANNED")] NetworkDisconnectSteamBanned = 6,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_INUSE")] NetworkDisconnectSteamInuse = 7,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_TICKET")] NetworkDisconnectSteamTicket = 8,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_LOGON")] NetworkDisconnectSteamLogon = 9,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_AUTHCANCELLED")] NetworkDisconnectSteamAuthcancelled = 10,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_AUTHALREADYUSED")] NetworkDisconnectSteamAuthalreadyused = 11,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_AUTHINVALID")] NetworkDisconnectSteamAuthinvalid = 12,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_VACBANSTATE")] NetworkDisconnectSteamVacbanstate = 13,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_LOGGED_IN_ELSEWHERE")] NetworkDisconnectSteamLoggedInElsewhere = 14,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_VAC_CHECK_TIMEDOUT")] NetworkDisconnectSteamVacCheckTimedout = 15,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_DROPPED")] NetworkDisconnectSteamDropped = 16,
    [pbr::OriginalName("NETWORK_DISCONNECT_STEAM_OWNERSHIP")] NetworkDisconnectSteamOwnership = 17,
    [pbr::OriginalName("NETWORK_DISCONNECT_SERVERINFO_OVERFLOW")] NetworkDisconnectServerinfoOverflow = 18,
    [pbr::OriginalName("NETWORK_DISCONNECT_TICKMSG_OVERFLOW")] NetworkDisconnectTickmsgOverflow = 19,
    [pbr::OriginalName("NETWORK_DISCONNECT_STRINGTABLEMSG_OVERFLOW")] NetworkDisconnectStringtablemsgOverflow = 20,
    [pbr::OriginalName("NETWORK_DISCONNECT_DELTAENTMSG_OVERFLOW")] NetworkDisconnectDeltaentmsgOverflow = 21,
    [pbr::OriginalName("NETWORK_DISCONNECT_TEMPENTMSG_OVERFLOW")] NetworkDisconnectTempentmsgOverflow = 22,
    [pbr::OriginalName("NETWORK_DISCONNECT_SOUNDSMSG_OVERFLOW")] NetworkDisconnectSoundsmsgOverflow = 23,
    [pbr::OriginalName("NETWORK_DISCONNECT_SNAPSHOTOVERFLOW")] NetworkDisconnectSnapshotoverflow = 24,
    [pbr::OriginalName("NETWORK_DISCONNECT_SNAPSHOTERROR")] NetworkDisconnectSnapshoterror = 25,
    [pbr::OriginalName("NETWORK_DISCONNECT_RELIABLEOVERFLOW")] NetworkDisconnectReliableoverflow = 26,
    [pbr::OriginalName("NETWORK_DISCONNECT_BADDELTATICK")] NetworkDisconnectBaddeltatick = 27,
    [pbr::OriginalName("NETWORK_DISCONNECT_NOMORESPLITS")] NetworkDisconnectNomoresplits = 28,
    [pbr::OriginalName("NETWORK_DISCONNECT_TIMEDOUT")] NetworkDisconnectTimedout = 29,
    [pbr::OriginalName("NETWORK_DISCONNECT_DISCONNECTED")] NetworkDisconnectDisconnected = 30,
    [pbr::OriginalName("NETWORK_DISCONNECT_LEAVINGSPLIT")] NetworkDisconnectLeavingsplit = 31,
    [pbr::OriginalName("NETWORK_DISCONNECT_DIFFERENTCLASSTABLES")] NetworkDisconnectDifferentclasstables = 32,
    [pbr::OriginalName("NETWORK_DISCONNECT_BADRELAYPASSWORD")] NetworkDisconnectBadrelaypassword = 33,
    [pbr::OriginalName("NETWORK_DISCONNECT_BADSPECTATORPASSWORD")] NetworkDisconnectBadspectatorpassword = 34,
    [pbr::OriginalName("NETWORK_DISCONNECT_HLTVRESTRICTED")] NetworkDisconnectHltvrestricted = 35,
    [pbr::OriginalName("NETWORK_DISCONNECT_NOSPECTATORS")] NetworkDisconnectNospectators = 36,
    [pbr::OriginalName("NETWORK_DISCONNECT_HLTVUNAVAILABLE")] NetworkDisconnectHltvunavailable = 37,
    [pbr::OriginalName("NETWORK_DISCONNECT_HLTVSTOP")] NetworkDisconnectHltvstop = 38,
    [pbr::OriginalName("NETWORK_DISCONNECT_KICKED")] NetworkDisconnectKicked = 39,
    [pbr::OriginalName("NETWORK_DISCONNECT_BANADDED")] NetworkDisconnectBanadded = 40,
    [pbr::OriginalName("NETWORK_DISCONNECT_KICKBANADDED")] NetworkDisconnectKickbanadded = 41,
    [pbr::OriginalName("NETWORK_DISCONNECT_HLTVDIRECT")] NetworkDisconnectHltvdirect = 42,
    [pbr::OriginalName("NETWORK_DISCONNECT_PURESERVER_CLIENTEXTRA")] NetworkDisconnectPureserverClientextra = 43,
    [pbr::OriginalName("NETWORK_DISCONNECT_PURESERVER_MISMATCH")] NetworkDisconnectPureserverMismatch = 44,
    [pbr::OriginalName("NETWORK_DISCONNECT_USERCMD")] NetworkDisconnectUsercmd = 45,
    [pbr::OriginalName("NETWORK_DISCONNECT_REJECTED_BY_GAME")] NetworkDisconnectRejectedByGame = 46,
    [pbr::OriginalName("NETWORK_DISCONNECT_MESSAGE_PARSE_ERROR")] NetworkDisconnectMessageParseError = 47,
    [pbr::OriginalName("NETWORK_DISCONNECT_INVALID_MESSAGE_ERROR")] NetworkDisconnectInvalidMessageError = 48,
    [pbr::OriginalName("NETWORK_DISCONNECT_BAD_SERVER_PASSWORD")] NetworkDisconnectBadServerPassword = 49,
    [pbr::OriginalName("NETWORK_DISCONNECT_DIRECT_CONNECT_RESERVATION")] NetworkDisconnectDirectConnectReservation = 50,
    [pbr::OriginalName("NETWORK_DISCONNECT_CONNECTION_FAILURE")] NetworkDisconnectConnectionFailure = 51,
    [pbr::OriginalName("NETWORK_DISCONNECT_NO_PEER_GROUP_HANDLERS")] NetworkDisconnectNoPeerGroupHandlers = 52,
    [pbr::OriginalName("NETWORK_DISCONNECT_RECONNECTION")] NetworkDisconnectReconnection = 53,
  }

  #endregion

  #region Messages
  public sealed partial class CMsgVector : pb::IMessage<CMsgVector> {
    private static readonly pb::MessageParser<CMsgVector> _parser = new pb::MessageParser<CMsgVector>(() => new CMsgVector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVector(CMsgVector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVector Clone() {
      return new CMsgVector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgVector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgVector2D : pb::IMessage<CMsgVector2D> {
    private static readonly pb::MessageParser<CMsgVector2D> _parser = new pb::MessageParser<CMsgVector2D>(() => new CMsgVector2D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgVector2D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVector2D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVector2D(CMsgVector2D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgVector2D Clone() {
      return new CMsgVector2D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgVector2D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgVector2D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgVector2D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgQAngle : pb::IMessage<CMsgQAngle> {
    private static readonly pb::MessageParser<CMsgQAngle> _parser = new pb::MessageParser<CMsgQAngle>(() => new CMsgQAngle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgQAngle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgQAngle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgQAngle(CMsgQAngle other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgQAngle Clone() {
      return new CMsgQAngle(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgQAngle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgQAngle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgQAngle other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgRGBA : pb::IMessage<CMsgRGBA> {
    private static readonly pb::MessageParser<CMsgRGBA> _parser = new pb::MessageParser<CMsgRGBA>(() => new CMsgRGBA());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgRGBA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRGBA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRGBA(CMsgRGBA other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgRGBA Clone() {
      return new CMsgRGBA(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private int r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private int g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgRGBA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgRGBA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      if (A != other.A) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (A != 0) hash ^= A.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
      if (A != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgRGBA other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.A != 0) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            R = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
          case 32: {
            A = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsgPlayerInfo : pb::IMessage<CMsgPlayerInfo> {
    private static readonly pb::MessageParser<CMsgPlayerInfo> _parser = new pb::MessageParser<CMsgPlayerInfo>(() => new CMsgPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerInfo(CMsgPlayerInfo other) : this() {
      name_ = other.name_;
      xuid_ = other.xuid_;
      userid_ = other.userid_;
      steamid_ = other.steamid_;
      fakeplayer_ = other.fakeplayer_;
      ishltv_ = other.ishltv_;
      customFiles_ = other.customFiles_.Clone();
      filesDownloaded_ = other.filesDownloaded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgPlayerInfo Clone() {
      return new CMsgPlayerInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xuid" field.</summary>
    public const int XuidFieldNumber = 2;
    private ulong xuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Xuid {
      get { return xuid_; }
      set {
        xuid_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 3;
    private int userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "steamid" field.</summary>
    public const int SteamidFieldNumber = 4;
    private ulong steamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Steamid {
      get { return steamid_; }
      set {
        steamid_ = value;
      }
    }

    /// <summary>Field number for the "fakeplayer" field.</summary>
    public const int FakeplayerFieldNumber = 5;
    private bool fakeplayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fakeplayer {
      get { return fakeplayer_; }
      set {
        fakeplayer_ = value;
      }
    }

    /// <summary>Field number for the "ishltv" field.</summary>
    public const int IshltvFieldNumber = 6;
    private bool ishltv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ishltv {
      get { return ishltv_; }
      set {
        ishltv_ = value;
      }
    }

    /// <summary>Field number for the "customFiles" field.</summary>
    public const int CustomFilesFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_customFiles_codec
        = pb::FieldCodec.ForFixed32(58);
    private readonly pbc::RepeatedField<uint> customFiles_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CustomFiles {
      get { return customFiles_; }
    }

    /// <summary>Field number for the "filesDownloaded" field.</summary>
    public const int FilesDownloadedFieldNumber = 8;
    private int filesDownloaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FilesDownloaded {
      get { return filesDownloaded_; }
      set {
        filesDownloaded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Xuid != other.Xuid) return false;
      if (Userid != other.Userid) return false;
      if (Steamid != other.Steamid) return false;
      if (Fakeplayer != other.Fakeplayer) return false;
      if (Ishltv != other.Ishltv) return false;
      if(!customFiles_.Equals(other.customFiles_)) return false;
      if (FilesDownloaded != other.FilesDownloaded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Xuid != 0UL) hash ^= Xuid.GetHashCode();
      if (Userid != 0) hash ^= Userid.GetHashCode();
      if (Steamid != 0UL) hash ^= Steamid.GetHashCode();
      if (Fakeplayer != false) hash ^= Fakeplayer.GetHashCode();
      if (Ishltv != false) hash ^= Ishltv.GetHashCode();
      hash ^= customFiles_.GetHashCode();
      if (FilesDownloaded != 0) hash ^= FilesDownloaded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Xuid != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(Xuid);
      }
      if (Userid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Userid);
      }
      if (Steamid != 0UL) {
        output.WriteRawTag(33);
        output.WriteFixed64(Steamid);
      }
      if (Fakeplayer != false) {
        output.WriteRawTag(40);
        output.WriteBool(Fakeplayer);
      }
      if (Ishltv != false) {
        output.WriteRawTag(48);
        output.WriteBool(Ishltv);
      }
      customFiles_.WriteTo(output, _repeated_customFiles_codec);
      if (FilesDownloaded != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FilesDownloaded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Xuid != 0UL) {
        size += 1 + 8;
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      if (Steamid != 0UL) {
        size += 1 + 8;
      }
      if (Fakeplayer != false) {
        size += 1 + 1;
      }
      if (Ishltv != false) {
        size += 1 + 1;
      }
      size += customFiles_.CalculateSize(_repeated_customFiles_codec);
      if (FilesDownloaded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FilesDownloaded);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Xuid != 0UL) {
        Xuid = other.Xuid;
      }
      if (other.Userid != 0) {
        Userid = other.Userid;
      }
      if (other.Steamid != 0UL) {
        Steamid = other.Steamid;
      }
      if (other.Fakeplayer != false) {
        Fakeplayer = other.Fakeplayer;
      }
      if (other.Ishltv != false) {
        Ishltv = other.Ishltv;
      }
      customFiles_.Add(other.customFiles_);
      if (other.FilesDownloaded != 0) {
        FilesDownloaded = other.FilesDownloaded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            Xuid = input.ReadFixed64();
            break;
          }
          case 24: {
            Userid = input.ReadInt32();
            break;
          }
          case 33: {
            Steamid = input.ReadFixed64();
            break;
          }
          case 40: {
            Fakeplayer = input.ReadBool();
            break;
          }
          case 48: {
            Ishltv = input.ReadBool();
            break;
          }
          case 58:
          case 61: {
            customFiles_.AddEntriesFrom(input, _repeated_customFiles_codec);
            break;
          }
          case 64: {
            FilesDownloaded = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMsg_CVars : pb::IMessage<CMsg_CVars> {
    private static readonly pb::MessageParser<CMsg_CVars> _parser = new pb::MessageParser<CMsg_CVars>(() => new CMsg_CVars());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsg_CVars> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsg_CVars() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsg_CVars(CMsg_CVars other) : this() {
      cvars_ = other.cvars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsg_CVars Clone() {
      return new CMsg_CVars(this);
    }

    /// <summary>Field number for the "cvars" field.</summary>
    public const int CvarsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CMsg_CVars.Types.CVar> _repeated_cvars_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CMsg_CVars.Types.CVar.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CMsg_CVars.Types.CVar> cvars_ = new pbc::RepeatedField<global::Proto.Dota.CMsg_CVars.Types.CVar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CMsg_CVars.Types.CVar> Cvars {
      get { return cvars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsg_CVars);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsg_CVars other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cvars_.Equals(other.cvars_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cvars_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cvars_.WriteTo(output, _repeated_cvars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cvars_.CalculateSize(_repeated_cvars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsg_CVars other) {
      if (other == null) {
        return;
      }
      cvars_.Add(other.cvars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cvars_.AddEntriesFrom(input, _repeated_cvars_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CMsg_CVars message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CVar : pb::IMessage<CVar> {
        private static readonly pb::MessageParser<CVar> _parser = new pb::MessageParser<CVar>(() => new CVar());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CVar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CMsg_CVars.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CVar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CVar(CVar other) : this() {
          name_ = other.name_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CVar Clone() {
          return new CVar(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private string value_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CVar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CVar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CVar other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CNETMsg_NOP : pb::IMessage<CNETMsg_NOP> {
    private static readonly pb::MessageParser<CNETMsg_NOP> _parser = new pb::MessageParser<CNETMsg_NOP>(() => new CNETMsg_NOP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_NOP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_NOP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_NOP(CNETMsg_NOP other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_NOP Clone() {
      return new CNETMsg_NOP(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_NOP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_NOP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_NOP other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CNETMsg_SplitScreenUser : pb::IMessage<CNETMsg_SplitScreenUser> {
    private static readonly pb::MessageParser<CNETMsg_SplitScreenUser> _parser = new pb::MessageParser<CNETMsg_SplitScreenUser>(() => new CNETMsg_SplitScreenUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SplitScreenUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SplitScreenUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SplitScreenUser(CNETMsg_SplitScreenUser other) : this() {
      slot_ = other.slot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SplitScreenUser Clone() {
      return new CNETMsg_SplitScreenUser(this);
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SplitScreenUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SplitScreenUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slot != other.Slot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SplitScreenUser other) {
      if (other == null) {
        return;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Slot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_Disconnect : pb::IMessage<CNETMsg_Disconnect> {
    private static readonly pb::MessageParser<CNETMsg_Disconnect> _parser = new pb::MessageParser<CNETMsg_Disconnect>(() => new CNETMsg_Disconnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_Disconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_Disconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_Disconnect(CNETMsg_Disconnect other) : this() {
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_Disconnect Clone() {
      return new CNETMsg_Disconnect(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private global::Proto.Dota.ENetworkDisconnectionReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.ENetworkDisconnectionReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_Disconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_Disconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_Disconnect other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            reason_ = (global::Proto.Dota.ENetworkDisconnectionReason) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_File : pb::IMessage<CNETMsg_File> {
    private static readonly pb::MessageParser<CNETMsg_File> _parser = new pb::MessageParser<CNETMsg_File>(() => new CNETMsg_File());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_File> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_File() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_File(CNETMsg_File other) : this() {
      transferId_ = other.transferId_;
      fileName_ = other.fileName_;
      isReplayDemoFile_ = other.isReplayDemoFile_;
      deny_ = other.deny_;
      isFileRequested_ = other.isFileRequested_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_File Clone() {
      return new CNETMsg_File(this);
    }

    /// <summary>Field number for the "transfer_id" field.</summary>
    public const int TransferIdFieldNumber = 1;
    private int transferId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransferId {
      get { return transferId_; }
      set {
        transferId_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_replay_demo_file" field.</summary>
    public const int IsReplayDemoFileFieldNumber = 3;
    private bool isReplayDemoFile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReplayDemoFile {
      get { return isReplayDemoFile_; }
      set {
        isReplayDemoFile_ = value;
      }
    }

    /// <summary>Field number for the "deny" field.</summary>
    public const int DenyFieldNumber = 4;
    private bool deny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deny {
      get { return deny_; }
      set {
        deny_ = value;
      }
    }

    /// <summary>Field number for the "is_file_requested" field.</summary>
    public const int IsFileRequestedFieldNumber = 5;
    private bool isFileRequested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFileRequested {
      get { return isFileRequested_; }
      set {
        isFileRequested_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_File);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_File other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransferId != other.TransferId) return false;
      if (FileName != other.FileName) return false;
      if (IsReplayDemoFile != other.IsReplayDemoFile) return false;
      if (Deny != other.Deny) return false;
      if (IsFileRequested != other.IsFileRequested) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransferId != 0) hash ^= TransferId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (IsReplayDemoFile != false) hash ^= IsReplayDemoFile.GetHashCode();
      if (Deny != false) hash ^= Deny.GetHashCode();
      if (IsFileRequested != false) hash ^= IsFileRequested.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransferId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TransferId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (IsReplayDemoFile != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReplayDemoFile);
      }
      if (Deny != false) {
        output.WriteRawTag(32);
        output.WriteBool(Deny);
      }
      if (IsFileRequested != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFileRequested);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransferId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransferId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (IsReplayDemoFile != false) {
        size += 1 + 1;
      }
      if (Deny != false) {
        size += 1 + 1;
      }
      if (IsFileRequested != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_File other) {
      if (other == null) {
        return;
      }
      if (other.TransferId != 0) {
        TransferId = other.TransferId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.IsReplayDemoFile != false) {
        IsReplayDemoFile = other.IsReplayDemoFile;
      }
      if (other.Deny != false) {
        Deny = other.Deny;
      }
      if (other.IsFileRequested != false) {
        IsFileRequested = other.IsFileRequested;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransferId = input.ReadInt32();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 24: {
            IsReplayDemoFile = input.ReadBool();
            break;
          }
          case 32: {
            Deny = input.ReadBool();
            break;
          }
          case 40: {
            IsFileRequested = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_Tick : pb::IMessage<CNETMsg_Tick> {
    private static readonly pb::MessageParser<CNETMsg_Tick> _parser = new pb::MessageParser<CNETMsg_Tick>(() => new CNETMsg_Tick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_Tick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_Tick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_Tick(CNETMsg_Tick other) : this() {
      tick_ = other.tick_;
      hostFrametime_ = other.hostFrametime_;
      hostFrametimeStdDeviation_ = other.hostFrametimeStdDeviation_;
      hostComputationtime_ = other.hostComputationtime_;
      hostComputationtimeStdDeviation_ = other.hostComputationtimeStdDeviation_;
      hostFramestarttimeStdDeviation_ = other.hostFramestarttimeStdDeviation_;
      hostLoss_ = other.hostLoss_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_Tick Clone() {
      return new CNETMsg_Tick(this);
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private uint tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "host_frametime" field.</summary>
    public const int HostFrametimeFieldNumber = 2;
    private uint hostFrametime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HostFrametime {
      get { return hostFrametime_; }
      set {
        hostFrametime_ = value;
      }
    }

    /// <summary>Field number for the "host_frametime_std_deviation" field.</summary>
    public const int HostFrametimeStdDeviationFieldNumber = 3;
    private uint hostFrametimeStdDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HostFrametimeStdDeviation {
      get { return hostFrametimeStdDeviation_; }
      set {
        hostFrametimeStdDeviation_ = value;
      }
    }

    /// <summary>Field number for the "host_computationtime" field.</summary>
    public const int HostComputationtimeFieldNumber = 4;
    private uint hostComputationtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HostComputationtime {
      get { return hostComputationtime_; }
      set {
        hostComputationtime_ = value;
      }
    }

    /// <summary>Field number for the "host_computationtime_std_deviation" field.</summary>
    public const int HostComputationtimeStdDeviationFieldNumber = 5;
    private uint hostComputationtimeStdDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HostComputationtimeStdDeviation {
      get { return hostComputationtimeStdDeviation_; }
      set {
        hostComputationtimeStdDeviation_ = value;
      }
    }

    /// <summary>Field number for the "host_framestarttime_std_deviation" field.</summary>
    public const int HostFramestarttimeStdDeviationFieldNumber = 6;
    private uint hostFramestarttimeStdDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HostFramestarttimeStdDeviation {
      get { return hostFramestarttimeStdDeviation_; }
      set {
        hostFramestarttimeStdDeviation_ = value;
      }
    }

    /// <summary>Field number for the "host_loss" field.</summary>
    public const int HostLossFieldNumber = 7;
    private uint hostLoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HostLoss {
      get { return hostLoss_; }
      set {
        hostLoss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_Tick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_Tick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tick != other.Tick) return false;
      if (HostFrametime != other.HostFrametime) return false;
      if (HostFrametimeStdDeviation != other.HostFrametimeStdDeviation) return false;
      if (HostComputationtime != other.HostComputationtime) return false;
      if (HostComputationtimeStdDeviation != other.HostComputationtimeStdDeviation) return false;
      if (HostFramestarttimeStdDeviation != other.HostFramestarttimeStdDeviation) return false;
      if (HostLoss != other.HostLoss) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (HostFrametime != 0) hash ^= HostFrametime.GetHashCode();
      if (HostFrametimeStdDeviation != 0) hash ^= HostFrametimeStdDeviation.GetHashCode();
      if (HostComputationtime != 0) hash ^= HostComputationtime.GetHashCode();
      if (HostComputationtimeStdDeviation != 0) hash ^= HostComputationtimeStdDeviation.GetHashCode();
      if (HostFramestarttimeStdDeviation != 0) hash ^= HostFramestarttimeStdDeviation.GetHashCode();
      if (HostLoss != 0) hash ^= HostLoss.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tick);
      }
      if (HostFrametime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HostFrametime);
      }
      if (HostFrametimeStdDeviation != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HostFrametimeStdDeviation);
      }
      if (HostComputationtime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HostComputationtime);
      }
      if (HostComputationtimeStdDeviation != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HostComputationtimeStdDeviation);
      }
      if (HostFramestarttimeStdDeviation != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HostFramestarttimeStdDeviation);
      }
      if (HostLoss != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HostLoss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tick);
      }
      if (HostFrametime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostFrametime);
      }
      if (HostFrametimeStdDeviation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostFrametimeStdDeviation);
      }
      if (HostComputationtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostComputationtime);
      }
      if (HostComputationtimeStdDeviation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostComputationtimeStdDeviation);
      }
      if (HostFramestarttimeStdDeviation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostFramestarttimeStdDeviation);
      }
      if (HostLoss != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostLoss);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_Tick other) {
      if (other == null) {
        return;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      if (other.HostFrametime != 0) {
        HostFrametime = other.HostFrametime;
      }
      if (other.HostFrametimeStdDeviation != 0) {
        HostFrametimeStdDeviation = other.HostFrametimeStdDeviation;
      }
      if (other.HostComputationtime != 0) {
        HostComputationtime = other.HostComputationtime;
      }
      if (other.HostComputationtimeStdDeviation != 0) {
        HostComputationtimeStdDeviation = other.HostComputationtimeStdDeviation;
      }
      if (other.HostFramestarttimeStdDeviation != 0) {
        HostFramestarttimeStdDeviation = other.HostFramestarttimeStdDeviation;
      }
      if (other.HostLoss != 0) {
        HostLoss = other.HostLoss;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tick = input.ReadUInt32();
            break;
          }
          case 16: {
            HostFrametime = input.ReadUInt32();
            break;
          }
          case 24: {
            HostFrametimeStdDeviation = input.ReadUInt32();
            break;
          }
          case 32: {
            HostComputationtime = input.ReadUInt32();
            break;
          }
          case 40: {
            HostComputationtimeStdDeviation = input.ReadUInt32();
            break;
          }
          case 48: {
            HostFramestarttimeStdDeviation = input.ReadUInt32();
            break;
          }
          case 56: {
            HostLoss = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_StringCmd : pb::IMessage<CNETMsg_StringCmd> {
    private static readonly pb::MessageParser<CNETMsg_StringCmd> _parser = new pb::MessageParser<CNETMsg_StringCmd>(() => new CNETMsg_StringCmd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_StringCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_StringCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_StringCmd(CNETMsg_StringCmd other) : this() {
      command_ = other.command_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_StringCmd Clone() {
      return new CNETMsg_StringCmd(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_StringCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_StringCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Command);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_StringCmd other) {
      if (other == null) {
        return;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Command = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_SetConVar : pb::IMessage<CNETMsg_SetConVar> {
    private static readonly pb::MessageParser<CNETMsg_SetConVar> _parser = new pb::MessageParser<CNETMsg_SetConVar>(() => new CNETMsg_SetConVar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SetConVar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SetConVar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SetConVar(CNETMsg_SetConVar other) : this() {
      convars_ = other.convars_ != null ? other.convars_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SetConVar Clone() {
      return new CNETMsg_SetConVar(this);
    }

    /// <summary>Field number for the "convars" field.</summary>
    public const int ConvarsFieldNumber = 1;
    private global::Proto.Dota.CMsg_CVars convars_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsg_CVars Convars {
      get { return convars_; }
      set {
        convars_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SetConVar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SetConVar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Convars, other.Convars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (convars_ != null) hash ^= Convars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (convars_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Convars);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (convars_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Convars);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SetConVar other) {
      if (other == null) {
        return;
      }
      if (other.convars_ != null) {
        if (convars_ == null) {
          convars_ = new global::Proto.Dota.CMsg_CVars();
        }
        Convars.MergeFrom(other.Convars);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (convars_ == null) {
              convars_ = new global::Proto.Dota.CMsg_CVars();
            }
            input.ReadMessage(convars_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_SignonState : pb::IMessage<CNETMsg_SignonState> {
    private static readonly pb::MessageParser<CNETMsg_SignonState> _parser = new pb::MessageParser<CNETMsg_SignonState>(() => new CNETMsg_SignonState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SignonState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SignonState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SignonState(CNETMsg_SignonState other) : this() {
      signonState_ = other.signonState_;
      spawnCount_ = other.spawnCount_;
      numServerPlayers_ = other.numServerPlayers_;
      playersNetworkids_ = other.playersNetworkids_.Clone();
      mapName_ = other.mapName_;
      addons_ = other.addons_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SignonState Clone() {
      return new CNETMsg_SignonState(this);
    }

    /// <summary>Field number for the "signon_state" field.</summary>
    public const int SignonStateFieldNumber = 1;
    private uint signonState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignonState {
      get { return signonState_; }
      set {
        signonState_ = value;
      }
    }

    /// <summary>Field number for the "spawn_count" field.</summary>
    public const int SpawnCountFieldNumber = 2;
    private uint spawnCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnCount {
      get { return spawnCount_; }
      set {
        spawnCount_ = value;
      }
    }

    /// <summary>Field number for the "num_server_players" field.</summary>
    public const int NumServerPlayersFieldNumber = 3;
    private uint numServerPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumServerPlayers {
      get { return numServerPlayers_; }
      set {
        numServerPlayers_ = value;
      }
    }

    /// <summary>Field number for the "players_networkids" field.</summary>
    public const int PlayersNetworkidsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_playersNetworkids_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> playersNetworkids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayersNetworkids {
      get { return playersNetworkids_; }
    }

    /// <summary>Field number for the "map_name" field.</summary>
    public const int MapNameFieldNumber = 5;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addons" field.</summary>
    public const int AddonsFieldNumber = 6;
    private string addons_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addons {
      get { return addons_; }
      set {
        addons_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SignonState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SignonState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignonState != other.SignonState) return false;
      if (SpawnCount != other.SpawnCount) return false;
      if (NumServerPlayers != other.NumServerPlayers) return false;
      if(!playersNetworkids_.Equals(other.playersNetworkids_)) return false;
      if (MapName != other.MapName) return false;
      if (Addons != other.Addons) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignonState != 0) hash ^= SignonState.GetHashCode();
      if (SpawnCount != 0) hash ^= SpawnCount.GetHashCode();
      if (NumServerPlayers != 0) hash ^= NumServerPlayers.GetHashCode();
      hash ^= playersNetworkids_.GetHashCode();
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (Addons.Length != 0) hash ^= Addons.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignonState != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SignonState);
      }
      if (SpawnCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SpawnCount);
      }
      if (NumServerPlayers != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumServerPlayers);
      }
      playersNetworkids_.WriteTo(output, _repeated_playersNetworkids_codec);
      if (MapName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MapName);
      }
      if (Addons.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Addons);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignonState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignonState);
      }
      if (SpawnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnCount);
      }
      if (NumServerPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumServerPlayers);
      }
      size += playersNetworkids_.CalculateSize(_repeated_playersNetworkids_codec);
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (Addons.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addons);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SignonState other) {
      if (other == null) {
        return;
      }
      if (other.SignonState != 0) {
        SignonState = other.SignonState;
      }
      if (other.SpawnCount != 0) {
        SpawnCount = other.SpawnCount;
      }
      if (other.NumServerPlayers != 0) {
        NumServerPlayers = other.NumServerPlayers;
      }
      playersNetworkids_.Add(other.playersNetworkids_);
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.Addons.Length != 0) {
        Addons = other.Addons;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SignonState = input.ReadUInt32();
            break;
          }
          case 16: {
            SpawnCount = input.ReadUInt32();
            break;
          }
          case 24: {
            NumServerPlayers = input.ReadUInt32();
            break;
          }
          case 34: {
            playersNetworkids_.AddEntriesFrom(input, _repeated_playersNetworkids_codec);
            break;
          }
          case 42: {
            MapName = input.ReadString();
            break;
          }
          case 50: {
            Addons = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_GameEvent : pb::IMessage<CSVCMsg_GameEvent> {
    private static readonly pb::MessageParser<CSVCMsg_GameEvent> _parser = new pb::MessageParser<CSVCMsg_GameEvent>(() => new CSVCMsg_GameEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_GameEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameEvent(CSVCMsg_GameEvent other) : this() {
      eventName_ = other.eventName_;
      eventid_ = other.eventid_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameEvent Clone() {
      return new CSVCMsg_GameEvent(this);
    }

    /// <summary>Field number for the "event_name" field.</summary>
    public const int EventNameFieldNumber = 1;
    private string eventName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventName {
      get { return eventName_; }
      set {
        eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventid" field.</summary>
    public const int EventidFieldNumber = 2;
    private int eventid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eventid {
      get { return eventid_; }
      set {
        eventid_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.Dota.CSVCMsg_GameEvent.Types.key_t> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.Dota.CSVCMsg_GameEvent.Types.key_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEvent.Types.key_t> keys_ = new pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEvent.Types.key_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CSVCMsg_GameEvent.Types.key_t> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_GameEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_GameEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventName != other.EventName) return false;
      if (Eventid != other.Eventid) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventName.Length != 0) hash ^= EventName.GetHashCode();
      if (Eventid != 0) hash ^= Eventid.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventName);
      }
      if (Eventid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Eventid);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventName);
      }
      if (Eventid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eventid);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_GameEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventName.Length != 0) {
        EventName = other.EventName;
      }
      if (other.Eventid != 0) {
        Eventid = other.Eventid;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventName = input.ReadString();
            break;
          }
          case 16: {
            Eventid = input.ReadInt32();
            break;
          }
          case 26: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CSVCMsg_GameEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class key_t : pb::IMessage<key_t> {
        private static readonly pb::MessageParser<key_t> _parser = new pb::MessageParser<key_t>(() => new key_t());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<key_t> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CSVCMsg_GameEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public key_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public key_t(key_t other) : this() {
          type_ = other.type_;
          valString_ = other.valString_;
          valFloat_ = other.valFloat_;
          valLong_ = other.valLong_;
          valShort_ = other.valShort_;
          valByte_ = other.valByte_;
          valBool_ = other.valBool_;
          valUint64_ = other.valUint64_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public key_t Clone() {
          return new key_t(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "val_string" field.</summary>
        public const int ValStringFieldNumber = 2;
        private string valString_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ValString {
          get { return valString_; }
          set {
            valString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "val_float" field.</summary>
        public const int ValFloatFieldNumber = 3;
        private float valFloat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ValFloat {
          get { return valFloat_; }
          set {
            valFloat_ = value;
          }
        }

        /// <summary>Field number for the "val_long" field.</summary>
        public const int ValLongFieldNumber = 4;
        private int valLong_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ValLong {
          get { return valLong_; }
          set {
            valLong_ = value;
          }
        }

        /// <summary>Field number for the "val_short" field.</summary>
        public const int ValShortFieldNumber = 5;
        private int valShort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ValShort {
          get { return valShort_; }
          set {
            valShort_ = value;
          }
        }

        /// <summary>Field number for the "val_byte" field.</summary>
        public const int ValByteFieldNumber = 6;
        private int valByte_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ValByte {
          get { return valByte_; }
          set {
            valByte_ = value;
          }
        }

        /// <summary>Field number for the "val_bool" field.</summary>
        public const int ValBoolFieldNumber = 7;
        private bool valBool_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ValBool {
          get { return valBool_; }
          set {
            valBool_ = value;
          }
        }

        /// <summary>Field number for the "val_uint64" field.</summary>
        public const int ValUint64FieldNumber = 8;
        private ulong valUint64_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ValUint64 {
          get { return valUint64_; }
          set {
            valUint64_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as key_t);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(key_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (ValString != other.ValString) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ValFloat, other.ValFloat)) return false;
          if (ValLong != other.ValLong) return false;
          if (ValShort != other.ValShort) return false;
          if (ValByte != other.ValByte) return false;
          if (ValBool != other.ValBool) return false;
          if (ValUint64 != other.ValUint64) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (ValString.Length != 0) hash ^= ValString.GetHashCode();
          if (ValFloat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ValFloat);
          if (ValLong != 0) hash ^= ValLong.GetHashCode();
          if (ValShort != 0) hash ^= ValShort.GetHashCode();
          if (ValByte != 0) hash ^= ValByte.GetHashCode();
          if (ValBool != false) hash ^= ValBool.GetHashCode();
          if (ValUint64 != 0UL) hash ^= ValUint64.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Type);
          }
          if (ValString.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ValString);
          }
          if (ValFloat != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ValFloat);
          }
          if (ValLong != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ValLong);
          }
          if (ValShort != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(ValShort);
          }
          if (ValByte != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ValByte);
          }
          if (ValBool != false) {
            output.WriteRawTag(56);
            output.WriteBool(ValBool);
          }
          if (ValUint64 != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(ValUint64);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (ValString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ValString);
          }
          if (ValFloat != 0F) {
            size += 1 + 4;
          }
          if (ValLong != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValLong);
          }
          if (ValShort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValShort);
          }
          if (ValByte != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValByte);
          }
          if (ValBool != false) {
            size += 1 + 1;
          }
          if (ValUint64 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ValUint64);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(key_t other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.ValString.Length != 0) {
            ValString = other.ValString;
          }
          if (other.ValFloat != 0F) {
            ValFloat = other.ValFloat;
          }
          if (other.ValLong != 0) {
            ValLong = other.ValLong;
          }
          if (other.ValShort != 0) {
            ValShort = other.ValShort;
          }
          if (other.ValByte != 0) {
            ValByte = other.ValByte;
          }
          if (other.ValBool != false) {
            ValBool = other.ValBool;
          }
          if (other.ValUint64 != 0UL) {
            ValUint64 = other.ValUint64;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = input.ReadInt32();
                break;
              }
              case 18: {
                ValString = input.ReadString();
                break;
              }
              case 29: {
                ValFloat = input.ReadFloat();
                break;
              }
              case 32: {
                ValLong = input.ReadInt32();
                break;
              }
              case 40: {
                ValShort = input.ReadInt32();
                break;
              }
              case 48: {
                ValByte = input.ReadInt32();
                break;
              }
              case 56: {
                ValBool = input.ReadBool();
                break;
              }
              case 64: {
                ValUint64 = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CSVCMsgList_GameEvents : pb::IMessage<CSVCMsgList_GameEvents> {
    private static readonly pb::MessageParser<CSVCMsgList_GameEvents> _parser = new pb::MessageParser<CSVCMsgList_GameEvents>(() => new CSVCMsgList_GameEvents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsgList_GameEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsgList_GameEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsgList_GameEvents(CSVCMsgList_GameEvents other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsgList_GameEvents Clone() {
      return new CSVCMsgList_GameEvents(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CSVCMsgList_GameEvents.Types.event_t> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CSVCMsgList_GameEvents.Types.event_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CSVCMsgList_GameEvents.Types.event_t> events_ = new pbc::RepeatedField<global::Proto.Dota.CSVCMsgList_GameEvents.Types.event_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CSVCMsgList_GameEvents.Types.event_t> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsgList_GameEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsgList_GameEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsgList_GameEvents other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CSVCMsgList_GameEvents message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class event_t : pb::IMessage<event_t> {
        private static readonly pb::MessageParser<event_t> _parser = new pb::MessageParser<event_t>(() => new event_t());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<event_t> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CSVCMsgList_GameEvents.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public event_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public event_t(event_t other) : this() {
          tick_ = other.tick_;
          event_ = other.event_ != null ? other.event_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public event_t Clone() {
          return new event_t(this);
        }

        /// <summary>Field number for the "tick" field.</summary>
        public const int TickFieldNumber = 1;
        private int tick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Tick {
          get { return tick_; }
          set {
            tick_ = value;
          }
        }

        /// <summary>Field number for the "event" field.</summary>
        public const int EventFieldNumber = 2;
        private global::Proto.Dota.CSVCMsg_GameEvent event_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CSVCMsg_GameEvent Event {
          get { return event_; }
          set {
            event_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as event_t);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(event_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Tick != other.Tick) return false;
          if (!object.Equals(Event, other.Event)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Tick != 0) hash ^= Tick.GetHashCode();
          if (event_ != null) hash ^= Event.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Tick != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Tick);
          }
          if (event_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Event);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Tick != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
          }
          if (event_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(event_t other) {
          if (other == null) {
            return;
          }
          if (other.Tick != 0) {
            Tick = other.Tick;
          }
          if (other.event_ != null) {
            if (event_ == null) {
              event_ = new global::Proto.Dota.CSVCMsg_GameEvent();
            }
            Event.MergeFrom(other.Event);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Tick = input.ReadInt32();
                break;
              }
              case 18: {
                if (event_ == null) {
                  event_ = new global::Proto.Dota.CSVCMsg_GameEvent();
                }
                input.ReadMessage(event_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CSVCMsg_UserMessage : pb::IMessage<CSVCMsg_UserMessage> {
    private static readonly pb::MessageParser<CSVCMsg_UserMessage> _parser = new pb::MessageParser<CSVCMsg_UserMessage>(() => new CSVCMsg_UserMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_UserMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_UserMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_UserMessage(CSVCMsg_UserMessage other) : this() {
      msgType_ = other.msgType_;
      msgData_ = other.msgData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_UserMessage Clone() {
      return new CSVCMsg_UserMessage(this);
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private int msgType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int MsgDataFieldNumber = 2;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MsgData {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_UserMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_UserMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (MsgData != other.MsgData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MsgType);
      }
      if (MsgData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MsgData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
      }
      if (MsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_UserMessage other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.MsgData.Length != 0) {
        MsgData = other.MsgData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgType = input.ReadInt32();
            break;
          }
          case 18: {
            MsgData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsgList_UserMessages : pb::IMessage<CSVCMsgList_UserMessages> {
    private static readonly pb::MessageParser<CSVCMsgList_UserMessages> _parser = new pb::MessageParser<CSVCMsgList_UserMessages>(() => new CSVCMsgList_UserMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsgList_UserMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsgList_UserMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsgList_UserMessages(CSVCMsgList_UserMessages other) : this() {
      usermsgs_ = other.usermsgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsgList_UserMessages Clone() {
      return new CSVCMsgList_UserMessages(this);
    }

    /// <summary>Field number for the "usermsgs" field.</summary>
    public const int UsermsgsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Dota.CSVCMsgList_UserMessages.Types.usermsg_t> _repeated_usermsgs_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Dota.CSVCMsgList_UserMessages.Types.usermsg_t.Parser);
    private readonly pbc::RepeatedField<global::Proto.Dota.CSVCMsgList_UserMessages.Types.usermsg_t> usermsgs_ = new pbc::RepeatedField<global::Proto.Dota.CSVCMsgList_UserMessages.Types.usermsg_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Dota.CSVCMsgList_UserMessages.Types.usermsg_t> Usermsgs {
      get { return usermsgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsgList_UserMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsgList_UserMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!usermsgs_.Equals(other.usermsgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= usermsgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      usermsgs_.WriteTo(output, _repeated_usermsgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += usermsgs_.CalculateSize(_repeated_usermsgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsgList_UserMessages other) {
      if (other == null) {
        return;
      }
      usermsgs_.Add(other.usermsgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            usermsgs_.AddEntriesFrom(input, _repeated_usermsgs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CSVCMsgList_UserMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class usermsg_t : pb::IMessage<usermsg_t> {
        private static readonly pb::MessageParser<usermsg_t> _parser = new pb::MessageParser<usermsg_t>(() => new usermsg_t());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<usermsg_t> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.Dota.CSVCMsgList_UserMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public usermsg_t() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public usermsg_t(usermsg_t other) : this() {
          tick_ = other.tick_;
          msg_ = other.msg_ != null ? other.msg_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public usermsg_t Clone() {
          return new usermsg_t(this);
        }

        /// <summary>Field number for the "tick" field.</summary>
        public const int TickFieldNumber = 1;
        private int tick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Tick {
          get { return tick_; }
          set {
            tick_ = value;
          }
        }

        /// <summary>Field number for the "msg" field.</summary>
        public const int MsgFieldNumber = 2;
        private global::Proto.Dota.CSVCMsg_UserMessage msg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.Dota.CSVCMsg_UserMessage Msg {
          get { return msg_; }
          set {
            msg_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as usermsg_t);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(usermsg_t other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Tick != other.Tick) return false;
          if (!object.Equals(Msg, other.Msg)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Tick != 0) hash ^= Tick.GetHashCode();
          if (msg_ != null) hash ^= Msg.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Tick != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Tick);
          }
          if (msg_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Msg);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Tick != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
          }
          if (msg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(usermsg_t other) {
          if (other == null) {
            return;
          }
          if (other.Tick != 0) {
            Tick = other.Tick;
          }
          if (other.msg_ != null) {
            if (msg_ == null) {
              msg_ = new global::Proto.Dota.CSVCMsg_UserMessage();
            }
            Msg.MergeFrom(other.Msg);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Tick = input.ReadInt32();
                break;
              }
              case 18: {
                if (msg_ == null) {
                  msg_ = new global::Proto.Dota.CSVCMsg_UserMessage();
                }
                input.ReadMessage(msg_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CNETMsg_SpawnGroup_Load : pb::IMessage<CNETMsg_SpawnGroup_Load> {
    private static readonly pb::MessageParser<CNETMsg_SpawnGroup_Load> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_Load>(() => new CNETMsg_SpawnGroup_Load());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SpawnGroup_Load> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_Load() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_Load(CNETMsg_SpawnGroup_Load other) : this() {
      worldname_ = other.worldname_;
      entitylumpname_ = other.entitylumpname_;
      entityfiltername_ = other.entityfiltername_;
      spawngrouphandle_ = other.spawngrouphandle_;
      spawngroupownerhandle_ = other.spawngroupownerhandle_;
      worldOffsetPos_ = other.worldOffsetPos_ != null ? other.worldOffsetPos_.Clone() : null;
      worldOffsetAngle_ = other.worldOffsetAngle_ != null ? other.worldOffsetAngle_.Clone() : null;
      spawngroupmanifest_ = other.spawngroupmanifest_;
      flags_ = other.flags_;
      tickcount_ = other.tickcount_;
      manifestincomplete_ = other.manifestincomplete_;
      localnamefixup_ = other.localnamefixup_;
      parentnamefixup_ = other.parentnamefixup_;
      manifestloadpriority_ = other.manifestloadpriority_;
      worldgroupid_ = other.worldgroupid_;
      creationsequence_ = other.creationsequence_;
      savegamefilename_ = other.savegamefilename_;
      spawngroupparenthandle_ = other.spawngroupparenthandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_Load Clone() {
      return new CNETMsg_SpawnGroup_Load(this);
    }

    /// <summary>Field number for the "worldname" field.</summary>
    public const int WorldnameFieldNumber = 1;
    private string worldname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Worldname {
      get { return worldname_; }
      set {
        worldname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entitylumpname" field.</summary>
    public const int EntitylumpnameFieldNumber = 2;
    private string entitylumpname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entitylumpname {
      get { return entitylumpname_; }
      set {
        entitylumpname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entityfiltername" field.</summary>
    public const int EntityfilternameFieldNumber = 3;
    private string entityfiltername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entityfiltername {
      get { return entityfiltername_; }
      set {
        entityfiltername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spawngrouphandle" field.</summary>
    public const int SpawngrouphandleFieldNumber = 4;
    private uint spawngrouphandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawngrouphandle {
      get { return spawngrouphandle_; }
      set {
        spawngrouphandle_ = value;
      }
    }

    /// <summary>Field number for the "spawngroupownerhandle" field.</summary>
    public const int SpawngroupownerhandleFieldNumber = 5;
    private uint spawngroupownerhandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawngroupownerhandle {
      get { return spawngroupownerhandle_; }
      set {
        spawngroupownerhandle_ = value;
      }
    }

    /// <summary>Field number for the "world_offset_pos" field.</summary>
    public const int WorldOffsetPosFieldNumber = 6;
    private global::Proto.Dota.CMsgVector worldOffsetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgVector WorldOffsetPos {
      get { return worldOffsetPos_; }
      set {
        worldOffsetPos_ = value;
      }
    }

    /// <summary>Field number for the "world_offset_angle" field.</summary>
    public const int WorldOffsetAngleFieldNumber = 7;
    private global::Proto.Dota.CMsgQAngle worldOffsetAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Dota.CMsgQAngle WorldOffsetAngle {
      get { return worldOffsetAngle_; }
      set {
        worldOffsetAngle_ = value;
      }
    }

    /// <summary>Field number for the "spawngroupmanifest" field.</summary>
    public const int SpawngroupmanifestFieldNumber = 8;
    private pb::ByteString spawngroupmanifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Spawngroupmanifest {
      get { return spawngroupmanifest_; }
      set {
        spawngroupmanifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 9;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "tickcount" field.</summary>
    public const int TickcountFieldNumber = 10;
    private int tickcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tickcount {
      get { return tickcount_; }
      set {
        tickcount_ = value;
      }
    }

    /// <summary>Field number for the "manifestincomplete" field.</summary>
    public const int ManifestincompleteFieldNumber = 11;
    private bool manifestincomplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Manifestincomplete {
      get { return manifestincomplete_; }
      set {
        manifestincomplete_ = value;
      }
    }

    /// <summary>Field number for the "localnamefixup" field.</summary>
    public const int LocalnamefixupFieldNumber = 12;
    private string localnamefixup_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Localnamefixup {
      get { return localnamefixup_; }
      set {
        localnamefixup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentnamefixup" field.</summary>
    public const int ParentnamefixupFieldNumber = 13;
    private string parentnamefixup_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parentnamefixup {
      get { return parentnamefixup_; }
      set {
        parentnamefixup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manifestloadpriority" field.</summary>
    public const int ManifestloadpriorityFieldNumber = 14;
    private int manifestloadpriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Manifestloadpriority {
      get { return manifestloadpriority_; }
      set {
        manifestloadpriority_ = value;
      }
    }

    /// <summary>Field number for the "worldgroupid" field.</summary>
    public const int WorldgroupidFieldNumber = 15;
    private uint worldgroupid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Worldgroupid {
      get { return worldgroupid_; }
      set {
        worldgroupid_ = value;
      }
    }

    /// <summary>Field number for the "creationsequence" field.</summary>
    public const int CreationsequenceFieldNumber = 16;
    private uint creationsequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Creationsequence {
      get { return creationsequence_; }
      set {
        creationsequence_ = value;
      }
    }

    /// <summary>Field number for the "savegamefilename" field.</summary>
    public const int SavegamefilenameFieldNumber = 17;
    private string savegamefilename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Savegamefilename {
      get { return savegamefilename_; }
      set {
        savegamefilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spawngroupparenthandle" field.</summary>
    public const int SpawngroupparenthandleFieldNumber = 18;
    private uint spawngroupparenthandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawngroupparenthandle {
      get { return spawngroupparenthandle_; }
      set {
        spawngroupparenthandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SpawnGroup_Load);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SpawnGroup_Load other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Worldname != other.Worldname) return false;
      if (Entitylumpname != other.Entitylumpname) return false;
      if (Entityfiltername != other.Entityfiltername) return false;
      if (Spawngrouphandle != other.Spawngrouphandle) return false;
      if (Spawngroupownerhandle != other.Spawngroupownerhandle) return false;
      if (!object.Equals(WorldOffsetPos, other.WorldOffsetPos)) return false;
      if (!object.Equals(WorldOffsetAngle, other.WorldOffsetAngle)) return false;
      if (Spawngroupmanifest != other.Spawngroupmanifest) return false;
      if (Flags != other.Flags) return false;
      if (Tickcount != other.Tickcount) return false;
      if (Manifestincomplete != other.Manifestincomplete) return false;
      if (Localnamefixup != other.Localnamefixup) return false;
      if (Parentnamefixup != other.Parentnamefixup) return false;
      if (Manifestloadpriority != other.Manifestloadpriority) return false;
      if (Worldgroupid != other.Worldgroupid) return false;
      if (Creationsequence != other.Creationsequence) return false;
      if (Savegamefilename != other.Savegamefilename) return false;
      if (Spawngroupparenthandle != other.Spawngroupparenthandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Worldname.Length != 0) hash ^= Worldname.GetHashCode();
      if (Entitylumpname.Length != 0) hash ^= Entitylumpname.GetHashCode();
      if (Entityfiltername.Length != 0) hash ^= Entityfiltername.GetHashCode();
      if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
      if (Spawngroupownerhandle != 0) hash ^= Spawngroupownerhandle.GetHashCode();
      if (worldOffsetPos_ != null) hash ^= WorldOffsetPos.GetHashCode();
      if (worldOffsetAngle_ != null) hash ^= WorldOffsetAngle.GetHashCode();
      if (Spawngroupmanifest.Length != 0) hash ^= Spawngroupmanifest.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Tickcount != 0) hash ^= Tickcount.GetHashCode();
      if (Manifestincomplete != false) hash ^= Manifestincomplete.GetHashCode();
      if (Localnamefixup.Length != 0) hash ^= Localnamefixup.GetHashCode();
      if (Parentnamefixup.Length != 0) hash ^= Parentnamefixup.GetHashCode();
      if (Manifestloadpriority != 0) hash ^= Manifestloadpriority.GetHashCode();
      if (Worldgroupid != 0) hash ^= Worldgroupid.GetHashCode();
      if (Creationsequence != 0) hash ^= Creationsequence.GetHashCode();
      if (Savegamefilename.Length != 0) hash ^= Savegamefilename.GetHashCode();
      if (Spawngroupparenthandle != 0) hash ^= Spawngroupparenthandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Worldname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Worldname);
      }
      if (Entitylumpname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Entitylumpname);
      }
      if (Entityfiltername.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Entityfiltername);
      }
      if (Spawngrouphandle != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Spawngrouphandle);
      }
      if (Spawngroupownerhandle != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Spawngroupownerhandle);
      }
      if (worldOffsetPos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WorldOffsetPos);
      }
      if (worldOffsetAngle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WorldOffsetAngle);
      }
      if (Spawngroupmanifest.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Spawngroupmanifest);
      }
      if (Flags != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Flags);
      }
      if (Tickcount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Tickcount);
      }
      if (Manifestincomplete != false) {
        output.WriteRawTag(88);
        output.WriteBool(Manifestincomplete);
      }
      if (Localnamefixup.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Localnamefixup);
      }
      if (Parentnamefixup.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Parentnamefixup);
      }
      if (Manifestloadpriority != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Manifestloadpriority);
      }
      if (Worldgroupid != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Worldgroupid);
      }
      if (Creationsequence != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Creationsequence);
      }
      if (Savegamefilename.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Savegamefilename);
      }
      if (Spawngroupparenthandle != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Spawngroupparenthandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Worldname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Worldname);
      }
      if (Entitylumpname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entitylumpname);
      }
      if (Entityfiltername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entityfiltername);
      }
      if (Spawngrouphandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
      }
      if (Spawngroupownerhandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngroupownerhandle);
      }
      if (worldOffsetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldOffsetPos);
      }
      if (worldOffsetAngle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldOffsetAngle);
      }
      if (Spawngroupmanifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Spawngroupmanifest);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (Tickcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tickcount);
      }
      if (Manifestincomplete != false) {
        size += 1 + 1;
      }
      if (Localnamefixup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Localnamefixup);
      }
      if (Parentnamefixup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parentnamefixup);
      }
      if (Manifestloadpriority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Manifestloadpriority);
      }
      if (Worldgroupid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Worldgroupid);
      }
      if (Creationsequence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Creationsequence);
      }
      if (Savegamefilename.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Savegamefilename);
      }
      if (Spawngroupparenthandle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Spawngroupparenthandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SpawnGroup_Load other) {
      if (other == null) {
        return;
      }
      if (other.Worldname.Length != 0) {
        Worldname = other.Worldname;
      }
      if (other.Entitylumpname.Length != 0) {
        Entitylumpname = other.Entitylumpname;
      }
      if (other.Entityfiltername.Length != 0) {
        Entityfiltername = other.Entityfiltername;
      }
      if (other.Spawngrouphandle != 0) {
        Spawngrouphandle = other.Spawngrouphandle;
      }
      if (other.Spawngroupownerhandle != 0) {
        Spawngroupownerhandle = other.Spawngroupownerhandle;
      }
      if (other.worldOffsetPos_ != null) {
        if (worldOffsetPos_ == null) {
          worldOffsetPos_ = new global::Proto.Dota.CMsgVector();
        }
        WorldOffsetPos.MergeFrom(other.WorldOffsetPos);
      }
      if (other.worldOffsetAngle_ != null) {
        if (worldOffsetAngle_ == null) {
          worldOffsetAngle_ = new global::Proto.Dota.CMsgQAngle();
        }
        WorldOffsetAngle.MergeFrom(other.WorldOffsetAngle);
      }
      if (other.Spawngroupmanifest.Length != 0) {
        Spawngroupmanifest = other.Spawngroupmanifest;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Tickcount != 0) {
        Tickcount = other.Tickcount;
      }
      if (other.Manifestincomplete != false) {
        Manifestincomplete = other.Manifestincomplete;
      }
      if (other.Localnamefixup.Length != 0) {
        Localnamefixup = other.Localnamefixup;
      }
      if (other.Parentnamefixup.Length != 0) {
        Parentnamefixup = other.Parentnamefixup;
      }
      if (other.Manifestloadpriority != 0) {
        Manifestloadpriority = other.Manifestloadpriority;
      }
      if (other.Worldgroupid != 0) {
        Worldgroupid = other.Worldgroupid;
      }
      if (other.Creationsequence != 0) {
        Creationsequence = other.Creationsequence;
      }
      if (other.Savegamefilename.Length != 0) {
        Savegamefilename = other.Savegamefilename;
      }
      if (other.Spawngroupparenthandle != 0) {
        Spawngroupparenthandle = other.Spawngroupparenthandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Worldname = input.ReadString();
            break;
          }
          case 18: {
            Entitylumpname = input.ReadString();
            break;
          }
          case 26: {
            Entityfiltername = input.ReadString();
            break;
          }
          case 32: {
            Spawngrouphandle = input.ReadUInt32();
            break;
          }
          case 40: {
            Spawngroupownerhandle = input.ReadUInt32();
            break;
          }
          case 50: {
            if (worldOffsetPos_ == null) {
              worldOffsetPos_ = new global::Proto.Dota.CMsgVector();
            }
            input.ReadMessage(worldOffsetPos_);
            break;
          }
          case 58: {
            if (worldOffsetAngle_ == null) {
              worldOffsetAngle_ = new global::Proto.Dota.CMsgQAngle();
            }
            input.ReadMessage(worldOffsetAngle_);
            break;
          }
          case 66: {
            Spawngroupmanifest = input.ReadBytes();
            break;
          }
          case 72: {
            Flags = input.ReadUInt32();
            break;
          }
          case 80: {
            Tickcount = input.ReadInt32();
            break;
          }
          case 88: {
            Manifestincomplete = input.ReadBool();
            break;
          }
          case 98: {
            Localnamefixup = input.ReadString();
            break;
          }
          case 106: {
            Parentnamefixup = input.ReadString();
            break;
          }
          case 112: {
            Manifestloadpriority = input.ReadInt32();
            break;
          }
          case 120: {
            Worldgroupid = input.ReadUInt32();
            break;
          }
          case 128: {
            Creationsequence = input.ReadUInt32();
            break;
          }
          case 138: {
            Savegamefilename = input.ReadString();
            break;
          }
          case 144: {
            Spawngroupparenthandle = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_SpawnGroup_ManifestUpdate : pb::IMessage<CNETMsg_SpawnGroup_ManifestUpdate> {
    private static readonly pb::MessageParser<CNETMsg_SpawnGroup_ManifestUpdate> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_ManifestUpdate>(() => new CNETMsg_SpawnGroup_ManifestUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SpawnGroup_ManifestUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_ManifestUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_ManifestUpdate(CNETMsg_SpawnGroup_ManifestUpdate other) : this() {
      spawngrouphandle_ = other.spawngrouphandle_;
      spawngroupmanifest_ = other.spawngroupmanifest_;
      manifestincomplete_ = other.manifestincomplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_ManifestUpdate Clone() {
      return new CNETMsg_SpawnGroup_ManifestUpdate(this);
    }

    /// <summary>Field number for the "spawngrouphandle" field.</summary>
    public const int SpawngrouphandleFieldNumber = 1;
    private uint spawngrouphandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawngrouphandle {
      get { return spawngrouphandle_; }
      set {
        spawngrouphandle_ = value;
      }
    }

    /// <summary>Field number for the "spawngroupmanifest" field.</summary>
    public const int SpawngroupmanifestFieldNumber = 2;
    private pb::ByteString spawngroupmanifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Spawngroupmanifest {
      get { return spawngroupmanifest_; }
      set {
        spawngroupmanifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manifestincomplete" field.</summary>
    public const int ManifestincompleteFieldNumber = 3;
    private bool manifestincomplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Manifestincomplete {
      get { return manifestincomplete_; }
      set {
        manifestincomplete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SpawnGroup_ManifestUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SpawnGroup_ManifestUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Spawngrouphandle != other.Spawngrouphandle) return false;
      if (Spawngroupmanifest != other.Spawngroupmanifest) return false;
      if (Manifestincomplete != other.Manifestincomplete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
      if (Spawngroupmanifest.Length != 0) hash ^= Spawngroupmanifest.GetHashCode();
      if (Manifestincomplete != false) hash ^= Manifestincomplete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Spawngrouphandle != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Spawngrouphandle);
      }
      if (Spawngroupmanifest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Spawngroupmanifest);
      }
      if (Manifestincomplete != false) {
        output.WriteRawTag(24);
        output.WriteBool(Manifestincomplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Spawngrouphandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
      }
      if (Spawngroupmanifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Spawngroupmanifest);
      }
      if (Manifestincomplete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SpawnGroup_ManifestUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Spawngrouphandle != 0) {
        Spawngrouphandle = other.Spawngrouphandle;
      }
      if (other.Spawngroupmanifest.Length != 0) {
        Spawngroupmanifest = other.Spawngroupmanifest;
      }
      if (other.Manifestincomplete != false) {
        Manifestincomplete = other.Manifestincomplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Spawngrouphandle = input.ReadUInt32();
            break;
          }
          case 18: {
            Spawngroupmanifest = input.ReadBytes();
            break;
          }
          case 24: {
            Manifestincomplete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_SpawnGroup_SetCreationTick : pb::IMessage<CNETMsg_SpawnGroup_SetCreationTick> {
    private static readonly pb::MessageParser<CNETMsg_SpawnGroup_SetCreationTick> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_SetCreationTick>(() => new CNETMsg_SpawnGroup_SetCreationTick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SpawnGroup_SetCreationTick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_SetCreationTick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_SetCreationTick(CNETMsg_SpawnGroup_SetCreationTick other) : this() {
      spawngrouphandle_ = other.spawngrouphandle_;
      tickcount_ = other.tickcount_;
      creationsequence_ = other.creationsequence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_SetCreationTick Clone() {
      return new CNETMsg_SpawnGroup_SetCreationTick(this);
    }

    /// <summary>Field number for the "spawngrouphandle" field.</summary>
    public const int SpawngrouphandleFieldNumber = 1;
    private uint spawngrouphandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawngrouphandle {
      get { return spawngrouphandle_; }
      set {
        spawngrouphandle_ = value;
      }
    }

    /// <summary>Field number for the "tickcount" field.</summary>
    public const int TickcountFieldNumber = 2;
    private int tickcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tickcount {
      get { return tickcount_; }
      set {
        tickcount_ = value;
      }
    }

    /// <summary>Field number for the "creationsequence" field.</summary>
    public const int CreationsequenceFieldNumber = 3;
    private uint creationsequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Creationsequence {
      get { return creationsequence_; }
      set {
        creationsequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SpawnGroup_SetCreationTick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SpawnGroup_SetCreationTick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Spawngrouphandle != other.Spawngrouphandle) return false;
      if (Tickcount != other.Tickcount) return false;
      if (Creationsequence != other.Creationsequence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
      if (Tickcount != 0) hash ^= Tickcount.GetHashCode();
      if (Creationsequence != 0) hash ^= Creationsequence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Spawngrouphandle != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Spawngrouphandle);
      }
      if (Tickcount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tickcount);
      }
      if (Creationsequence != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Creationsequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Spawngrouphandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
      }
      if (Tickcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tickcount);
      }
      if (Creationsequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Creationsequence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SpawnGroup_SetCreationTick other) {
      if (other == null) {
        return;
      }
      if (other.Spawngrouphandle != 0) {
        Spawngrouphandle = other.Spawngrouphandle;
      }
      if (other.Tickcount != 0) {
        Tickcount = other.Tickcount;
      }
      if (other.Creationsequence != 0) {
        Creationsequence = other.Creationsequence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Spawngrouphandle = input.ReadUInt32();
            break;
          }
          case 16: {
            Tickcount = input.ReadInt32();
            break;
          }
          case 24: {
            Creationsequence = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_SpawnGroup_Unload : pb::IMessage<CNETMsg_SpawnGroup_Unload> {
    private static readonly pb::MessageParser<CNETMsg_SpawnGroup_Unload> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_Unload>(() => new CNETMsg_SpawnGroup_Unload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SpawnGroup_Unload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_Unload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_Unload(CNETMsg_SpawnGroup_Unload other) : this() {
      spawngrouphandle_ = other.spawngrouphandle_;
      flags_ = other.flags_;
      tickcount_ = other.tickcount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_Unload Clone() {
      return new CNETMsg_SpawnGroup_Unload(this);
    }

    /// <summary>Field number for the "spawngrouphandle" field.</summary>
    public const int SpawngrouphandleFieldNumber = 1;
    private uint spawngrouphandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawngrouphandle {
      get { return spawngrouphandle_; }
      set {
        spawngrouphandle_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 2;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "tickcount" field.</summary>
    public const int TickcountFieldNumber = 3;
    private int tickcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tickcount {
      get { return tickcount_; }
      set {
        tickcount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SpawnGroup_Unload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SpawnGroup_Unload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Spawngrouphandle != other.Spawngrouphandle) return false;
      if (Flags != other.Flags) return false;
      if (Tickcount != other.Tickcount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Tickcount != 0) hash ^= Tickcount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Spawngrouphandle != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Spawngrouphandle);
      }
      if (Flags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flags);
      }
      if (Tickcount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tickcount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Spawngrouphandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (Tickcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tickcount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SpawnGroup_Unload other) {
      if (other == null) {
        return;
      }
      if (other.Spawngrouphandle != 0) {
        Spawngrouphandle = other.Spawngrouphandle;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Tickcount != 0) {
        Tickcount = other.Tickcount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Spawngrouphandle = input.ReadUInt32();
            break;
          }
          case 16: {
            Flags = input.ReadUInt32();
            break;
          }
          case 24: {
            Tickcount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_SpawnGroup_LoadCompleted : pb::IMessage<CNETMsg_SpawnGroup_LoadCompleted> {
    private static readonly pb::MessageParser<CNETMsg_SpawnGroup_LoadCompleted> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_LoadCompleted>(() => new CNETMsg_SpawnGroup_LoadCompleted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_SpawnGroup_LoadCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_LoadCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_LoadCompleted(CNETMsg_SpawnGroup_LoadCompleted other) : this() {
      spawngrouphandle_ = other.spawngrouphandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_SpawnGroup_LoadCompleted Clone() {
      return new CNETMsg_SpawnGroup_LoadCompleted(this);
    }

    /// <summary>Field number for the "spawngrouphandle" field.</summary>
    public const int SpawngrouphandleFieldNumber = 1;
    private uint spawngrouphandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawngrouphandle {
      get { return spawngrouphandle_; }
      set {
        spawngrouphandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_SpawnGroup_LoadCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_SpawnGroup_LoadCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Spawngrouphandle != other.Spawngrouphandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Spawngrouphandle != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Spawngrouphandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Spawngrouphandle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_SpawnGroup_LoadCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Spawngrouphandle != 0) {
        Spawngrouphandle = other.Spawngrouphandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Spawngrouphandle = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSVCMsg_GameSessionConfiguration : pb::IMessage<CSVCMsg_GameSessionConfiguration> {
    private static readonly pb::MessageParser<CSVCMsg_GameSessionConfiguration> _parser = new pb::MessageParser<CSVCMsg_GameSessionConfiguration>(() => new CSVCMsg_GameSessionConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVCMsg_GameSessionConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameSessionConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameSessionConfiguration(CSVCMsg_GameSessionConfiguration other) : this() {
      isMultiplayer_ = other.isMultiplayer_;
      isLoadsavegame_ = other.isLoadsavegame_;
      isBackgroundMap_ = other.isBackgroundMap_;
      isHeadless_ = other.isHeadless_;
      minClientLimit_ = other.minClientLimit_;
      maxClientLimit_ = other.maxClientLimit_;
      maxClients_ = other.maxClients_;
      tickInterval_ = other.tickInterval_;
      hostname_ = other.hostname_;
      savegamename_ = other.savegamename_;
      s1Mapname_ = other.s1Mapname_;
      gamemode_ = other.gamemode_;
      serverIpAddress_ = other.serverIpAddress_;
      data_ = other.data_;
      isLocalonly_ = other.isLocalonly_;
      isTransition_ = other.isTransition_;
      previouslevel_ = other.previouslevel_;
      landmarkname_ = other.landmarkname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVCMsg_GameSessionConfiguration Clone() {
      return new CSVCMsg_GameSessionConfiguration(this);
    }

    /// <summary>Field number for the "is_multiplayer" field.</summary>
    public const int IsMultiplayerFieldNumber = 1;
    private bool isMultiplayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMultiplayer {
      get { return isMultiplayer_; }
      set {
        isMultiplayer_ = value;
      }
    }

    /// <summary>Field number for the "is_loadsavegame" field.</summary>
    public const int IsLoadsavegameFieldNumber = 2;
    private bool isLoadsavegame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoadsavegame {
      get { return isLoadsavegame_; }
      set {
        isLoadsavegame_ = value;
      }
    }

    /// <summary>Field number for the "is_background_map" field.</summary>
    public const int IsBackgroundMapFieldNumber = 3;
    private bool isBackgroundMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBackgroundMap {
      get { return isBackgroundMap_; }
      set {
        isBackgroundMap_ = value;
      }
    }

    /// <summary>Field number for the "is_headless" field.</summary>
    public const int IsHeadlessFieldNumber = 4;
    private bool isHeadless_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeadless {
      get { return isHeadless_; }
      set {
        isHeadless_ = value;
      }
    }

    /// <summary>Field number for the "min_client_limit" field.</summary>
    public const int MinClientLimitFieldNumber = 5;
    private uint minClientLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinClientLimit {
      get { return minClientLimit_; }
      set {
        minClientLimit_ = value;
      }
    }

    /// <summary>Field number for the "max_client_limit" field.</summary>
    public const int MaxClientLimitFieldNumber = 6;
    private uint maxClientLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxClientLimit {
      get { return maxClientLimit_; }
      set {
        maxClientLimit_ = value;
      }
    }

    /// <summary>Field number for the "max_clients" field.</summary>
    public const int MaxClientsFieldNumber = 7;
    private uint maxClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxClients {
      get { return maxClients_; }
      set {
        maxClients_ = value;
      }
    }

    /// <summary>Field number for the "tick_interval" field.</summary>
    public const int TickIntervalFieldNumber = 8;
    private uint tickInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TickInterval {
      get { return tickInterval_; }
      set {
        tickInterval_ = value;
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 9;
    private string hostname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "savegamename" field.</summary>
    public const int SavegamenameFieldNumber = 10;
    private string savegamename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Savegamename {
      get { return savegamename_; }
      set {
        savegamename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "s1_mapname" field.</summary>
    public const int S1MapnameFieldNumber = 11;
    private string s1Mapname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string S1Mapname {
      get { return s1Mapname_; }
      set {
        s1Mapname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gamemode" field.</summary>
    public const int GamemodeFieldNumber = 12;
    private string gamemode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gamemode {
      get { return gamemode_; }
      set {
        gamemode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_ip_address" field.</summary>
    public const int ServerIpAddressFieldNumber = 13;
    private string serverIpAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIpAddress {
      get { return serverIpAddress_; }
      set {
        serverIpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 14;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_localonly" field.</summary>
    public const int IsLocalonlyFieldNumber = 15;
    private bool isLocalonly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocalonly {
      get { return isLocalonly_; }
      set {
        isLocalonly_ = value;
      }
    }

    /// <summary>Field number for the "is_transition" field.</summary>
    public const int IsTransitionFieldNumber = 16;
    private bool isTransition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTransition {
      get { return isTransition_; }
      set {
        isTransition_ = value;
      }
    }

    /// <summary>Field number for the "previouslevel" field.</summary>
    public const int PreviouslevelFieldNumber = 17;
    private string previouslevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Previouslevel {
      get { return previouslevel_; }
      set {
        previouslevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "landmarkname" field.</summary>
    public const int LandmarknameFieldNumber = 18;
    private string landmarkname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Landmarkname {
      get { return landmarkname_; }
      set {
        landmarkname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVCMsg_GameSessionConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVCMsg_GameSessionConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsMultiplayer != other.IsMultiplayer) return false;
      if (IsLoadsavegame != other.IsLoadsavegame) return false;
      if (IsBackgroundMap != other.IsBackgroundMap) return false;
      if (IsHeadless != other.IsHeadless) return false;
      if (MinClientLimit != other.MinClientLimit) return false;
      if (MaxClientLimit != other.MaxClientLimit) return false;
      if (MaxClients != other.MaxClients) return false;
      if (TickInterval != other.TickInterval) return false;
      if (Hostname != other.Hostname) return false;
      if (Savegamename != other.Savegamename) return false;
      if (S1Mapname != other.S1Mapname) return false;
      if (Gamemode != other.Gamemode) return false;
      if (ServerIpAddress != other.ServerIpAddress) return false;
      if (Data != other.Data) return false;
      if (IsLocalonly != other.IsLocalonly) return false;
      if (IsTransition != other.IsTransition) return false;
      if (Previouslevel != other.Previouslevel) return false;
      if (Landmarkname != other.Landmarkname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsMultiplayer != false) hash ^= IsMultiplayer.GetHashCode();
      if (IsLoadsavegame != false) hash ^= IsLoadsavegame.GetHashCode();
      if (IsBackgroundMap != false) hash ^= IsBackgroundMap.GetHashCode();
      if (IsHeadless != false) hash ^= IsHeadless.GetHashCode();
      if (MinClientLimit != 0) hash ^= MinClientLimit.GetHashCode();
      if (MaxClientLimit != 0) hash ^= MaxClientLimit.GetHashCode();
      if (MaxClients != 0) hash ^= MaxClients.GetHashCode();
      if (TickInterval != 0) hash ^= TickInterval.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (Savegamename.Length != 0) hash ^= Savegamename.GetHashCode();
      if (S1Mapname.Length != 0) hash ^= S1Mapname.GetHashCode();
      if (Gamemode.Length != 0) hash ^= Gamemode.GetHashCode();
      if (ServerIpAddress.Length != 0) hash ^= ServerIpAddress.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (IsLocalonly != false) hash ^= IsLocalonly.GetHashCode();
      if (IsTransition != false) hash ^= IsTransition.GetHashCode();
      if (Previouslevel.Length != 0) hash ^= Previouslevel.GetHashCode();
      if (Landmarkname.Length != 0) hash ^= Landmarkname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsMultiplayer != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsMultiplayer);
      }
      if (IsLoadsavegame != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLoadsavegame);
      }
      if (IsBackgroundMap != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBackgroundMap);
      }
      if (IsHeadless != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsHeadless);
      }
      if (MinClientLimit != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MinClientLimit);
      }
      if (MaxClientLimit != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxClientLimit);
      }
      if (MaxClients != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaxClients);
      }
      if (TickInterval != 0) {
        output.WriteRawTag(69);
        output.WriteFixed32(TickInterval);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Hostname);
      }
      if (Savegamename.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Savegamename);
      }
      if (S1Mapname.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(S1Mapname);
      }
      if (Gamemode.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Gamemode);
      }
      if (ServerIpAddress.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ServerIpAddress);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(Data);
      }
      if (IsLocalonly != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsLocalonly);
      }
      if (IsTransition != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsTransition);
      }
      if (Previouslevel.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Previouslevel);
      }
      if (Landmarkname.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Landmarkname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsMultiplayer != false) {
        size += 1 + 1;
      }
      if (IsLoadsavegame != false) {
        size += 1 + 1;
      }
      if (IsBackgroundMap != false) {
        size += 1 + 1;
      }
      if (IsHeadless != false) {
        size += 1 + 1;
      }
      if (MinClientLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinClientLimit);
      }
      if (MaxClientLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxClientLimit);
      }
      if (MaxClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxClients);
      }
      if (TickInterval != 0) {
        size += 1 + 4;
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (Savegamename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Savegamename);
      }
      if (S1Mapname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(S1Mapname);
      }
      if (Gamemode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gamemode);
      }
      if (ServerIpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIpAddress);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (IsLocalonly != false) {
        size += 1 + 1;
      }
      if (IsTransition != false) {
        size += 2 + 1;
      }
      if (Previouslevel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Previouslevel);
      }
      if (Landmarkname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Landmarkname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVCMsg_GameSessionConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.IsMultiplayer != false) {
        IsMultiplayer = other.IsMultiplayer;
      }
      if (other.IsLoadsavegame != false) {
        IsLoadsavegame = other.IsLoadsavegame;
      }
      if (other.IsBackgroundMap != false) {
        IsBackgroundMap = other.IsBackgroundMap;
      }
      if (other.IsHeadless != false) {
        IsHeadless = other.IsHeadless;
      }
      if (other.MinClientLimit != 0) {
        MinClientLimit = other.MinClientLimit;
      }
      if (other.MaxClientLimit != 0) {
        MaxClientLimit = other.MaxClientLimit;
      }
      if (other.MaxClients != 0) {
        MaxClients = other.MaxClients;
      }
      if (other.TickInterval != 0) {
        TickInterval = other.TickInterval;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.Savegamename.Length != 0) {
        Savegamename = other.Savegamename;
      }
      if (other.S1Mapname.Length != 0) {
        S1Mapname = other.S1Mapname;
      }
      if (other.Gamemode.Length != 0) {
        Gamemode = other.Gamemode;
      }
      if (other.ServerIpAddress.Length != 0) {
        ServerIpAddress = other.ServerIpAddress;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.IsLocalonly != false) {
        IsLocalonly = other.IsLocalonly;
      }
      if (other.IsTransition != false) {
        IsTransition = other.IsTransition;
      }
      if (other.Previouslevel.Length != 0) {
        Previouslevel = other.Previouslevel;
      }
      if (other.Landmarkname.Length != 0) {
        Landmarkname = other.Landmarkname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsMultiplayer = input.ReadBool();
            break;
          }
          case 16: {
            IsLoadsavegame = input.ReadBool();
            break;
          }
          case 24: {
            IsBackgroundMap = input.ReadBool();
            break;
          }
          case 32: {
            IsHeadless = input.ReadBool();
            break;
          }
          case 40: {
            MinClientLimit = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxClientLimit = input.ReadUInt32();
            break;
          }
          case 56: {
            MaxClients = input.ReadUInt32();
            break;
          }
          case 69: {
            TickInterval = input.ReadFixed32();
            break;
          }
          case 74: {
            Hostname = input.ReadString();
            break;
          }
          case 82: {
            Savegamename = input.ReadString();
            break;
          }
          case 90: {
            S1Mapname = input.ReadString();
            break;
          }
          case 98: {
            Gamemode = input.ReadString();
            break;
          }
          case 106: {
            ServerIpAddress = input.ReadString();
            break;
          }
          case 114: {
            Data = input.ReadBytes();
            break;
          }
          case 120: {
            IsLocalonly = input.ReadBool();
            break;
          }
          case 128: {
            IsTransition = input.ReadBool();
            break;
          }
          case 138: {
            Previouslevel = input.ReadString();
            break;
          }
          case 146: {
            Landmarkname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CNETMsg_ReliableMessageEndMarker : pb::IMessage<CNETMsg_ReliableMessageEndMarker> {
    private static readonly pb::MessageParser<CNETMsg_ReliableMessageEndMarker> _parser = new pb::MessageParser<CNETMsg_ReliableMessageEndMarker>(() => new CNETMsg_ReliableMessageEndMarker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_ReliableMessageEndMarker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_ReliableMessageEndMarker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_ReliableMessageEndMarker(CNETMsg_ReliableMessageEndMarker other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_ReliableMessageEndMarker Clone() {
      return new CNETMsg_ReliableMessageEndMarker(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_ReliableMessageEndMarker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_ReliableMessageEndMarker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_ReliableMessageEndMarker other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CNETMsg_PlayerAvatarData : pb::IMessage<CNETMsg_PlayerAvatarData> {
    private static readonly pb::MessageParser<CNETMsg_PlayerAvatarData> _parser = new pb::MessageParser<CNETMsg_PlayerAvatarData>(() => new CNETMsg_PlayerAvatarData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNETMsg_PlayerAvatarData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Dota.NetworkbasetypesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_PlayerAvatarData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_PlayerAvatarData(CNETMsg_PlayerAvatarData other) : this() {
      accountid_ = other.accountid_;
      rgb_ = other.rgb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNETMsg_PlayerAvatarData Clone() {
      return new CNETMsg_PlayerAvatarData(this);
    }

    /// <summary>Field number for the "accountid" field.</summary>
    public const int AccountidFieldNumber = 1;
    private uint accountid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Accountid {
      get { return accountid_; }
      set {
        accountid_ = value;
      }
    }

    /// <summary>Field number for the "rgb" field.</summary>
    public const int RgbFieldNumber = 2;
    private pb::ByteString rgb_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Rgb {
      get { return rgb_; }
      set {
        rgb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNETMsg_PlayerAvatarData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNETMsg_PlayerAvatarData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accountid != other.Accountid) return false;
      if (Rgb != other.Rgb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accountid != 0) hash ^= Accountid.GetHashCode();
      if (Rgb.Length != 0) hash ^= Rgb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accountid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Accountid);
      }
      if (Rgb.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Rgb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accountid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Accountid);
      }
      if (Rgb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Rgb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNETMsg_PlayerAvatarData other) {
      if (other == null) {
        return;
      }
      if (other.Accountid != 0) {
        Accountid = other.Accountid;
      }
      if (other.Rgb.Length != 0) {
        Rgb = other.Rgb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accountid = input.ReadUInt32();
            break;
          }
          case 18: {
            Rgb = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
