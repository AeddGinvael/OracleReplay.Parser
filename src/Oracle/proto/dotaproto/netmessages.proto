syntax = "proto3";
package google.protobuf;
option csharp_namespace = "Proto.Dota";

import "networkbasetypes.proto";

option cc_generic_services = false;

enum VoiceDataFormat_t {
	VOICEDATA_FORMAT_STEAM = 0;
	VOICEDATA_FORMAT_ENGINE = 1;
}

enum RequestPause_t {
	RP_PAUSE = 0;
	RP_UNPAUSE = 1;
	RP_TOGGLEPAUSE = 2;
}

message CCLCMsg_ClientInfo {
	  fixed32 send_table_crc = 1;
	  uint32 server_count = 2;
	  bool is_hltv = 3;
	  bool is_replay = 4;
	  uint32 friends_id = 5;
	  string friends_name = 6;
}

message CCLCMsg_Move {
	  uint32 num_backup_commands = 1;
	  uint32 num_new_commands = 2;
	  bytes data = 3;
	  uint32 command_number = 4;
	  uint32 num_commands = 5;
}

message CMsgVoiceAudio {
	  VoiceDataFormat_t format = 1;
	  bytes voice_data = 2;
	  int32 sequence_bytes = 3;
	  uint32 section_number = 4;
	  uint32 sample_rate = 5;
	  uint32 uncompressed_sample_offset = 6;
}

message CCLCMsg_VoiceData {
	  CMsgVoiceAudio audio = 1;
	  fixed64 xuid = 2;
	  uint32 tick = 3;
}

message CCLCMsg_BaselineAck {
	  int32 baseline_tick = 1;
	  int32 baseline_nr = 2;
}

message CCLCMsg_ListenEvents {
	repeated fixed32 event_mask = 1;
}

message CCLCMsg_RespondCvarValue {
	  int32 cookie = 1;
	  int32 status_code = 2;
	  string name = 3;
	  string value = 4;
}

message CCLCMsg_FileCRCCheck {
	  int32 code_path = 1;
	  string path = 2;
	  int32 code_filename = 3;
	  string filename = 4;
	  fixed32 crc = 5;
}

message CCLCMsg_LoadingProgress {
	  int32 progress = 1;
}

message CCLCMsg_SplitPlayerConnect {
	  string playername = 1;
}

message CCLCMsg_ClientMessage {
	  int32 msg_type = 1;
	  bytes data = 2;
}

message CCLCMsg_SplitPlayerDisconnect {
	  int32 slot = 1;
}

message CCLCMsg_ServerStatus {
	  bool simplified = 1;
}

message CCLCMsg_ServerPing {
}

message CCLCMsg_RequestPause {
	  RequestPause_t pause_type = 1;
	  int32 pause_group = 2;
}

message CCLCMsg_CmdKeyValues {
	  bytes data = 1;
}

message CSVCMsg_GameEventList {
	message key_t {
		  int32 type = 1;
		  string name = 2;
	}

	message descriptor_t {
		  int32 eventid = 1;
		  string name = 2;
		repeated CSVCMsg_GameEventList.key_t keys = 3;
	}

	repeated CSVCMsg_GameEventList.descriptor_t descriptors = 1;
}

message CSVCMsg_PacketEntities {
	  int32 max_entries = 1;
	  int32 updated_entries = 2;
	  bool is_delta = 3;
	  bool update_baseline = 4;
	  int32 baseline = 5;
	  int32 delta_from = 6;
	  bytes entity_data = 7;
	  bool pending_full_frame = 8;
	  uint32 active_spawngroup_handle = 9;
	  uint32 max_spawngroup_creationsequence = 10;
	  uint32 last_cmd_number = 11;
}

message CSVCMsg_ServerInfo {
	  int32 protocol = 1;
	  int32 server_count = 2;
	  bool is_dedicated = 3;
	  bool is_hltv = 4;
	  bool is_replay = 5;
	  int32 c_os = 6;
	  fixed32 map_crc = 7;
	  fixed32 client_crc = 8;
	  fixed32 string_table_crc = 9;
	  int32 max_clients = 10;
	  int32 max_classes = 11;
	  int32 player_slot = 12;
	  float tick_interval = 13;
	  string game_dir = 14;
	  string map_name = 15;
	  string sky_name = 16;
	  string host_name = 17;
	  string addon_name = 18;
	  CSVCMsg_GameSessionConfiguration game_session_config = 19;
	  bytes game_session_manifest = 20;
}

message CSVCMsg_ClassInfo {
	message class_t {
		  int32 class_id = 1;
		  string data_table_name = 2;
		  string class_name = 3;
	}

	  bool create_on_client = 1;
	repeated CSVCMsg_ClassInfo.class_t classes = 2;
}

message CSVCMsg_SetView {
	  int32 entity_index = 1;
	  int32 slot = 2;
}

message CSVCMsg_Print {
	  string text = 1;
}

message CSVCMsg_VoiceInit {
	  int32 quality = 1;
	  string codec = 2;
	  int32 version = 3;
}

message CSVCMsg_Sounds {
	message sounddata_t {
		  sint32 origin_x = 1;
		  sint32 origin_y = 2;
		  sint32 origin_z = 3;
		  uint32 volume = 4;
		  float delay_value = 5;
		  int32 sequence_number = 6;
		  int32 entity_index = 7;
		  int32 channel = 8;
		  int32 pitch = 9;
		  int32 flags = 10;
		  uint32 sound_num = 11;
		  fixed32 sound_num_handle = 12;
		  int32 speaker_entity = 13;
		  int32 random_seed = 14;
		  int32 sound_level = 15;
		  bool is_sentence = 16;
		  bool is_ambient = 17;
		  uint32 guid = 18;
		  fixed64 sound_resource_id = 19;
	}

	  bool reliable_sound = 1;
	repeated CSVCMsg_Sounds.sounddata_t sounds = 2;
}

message CSVCMsg_UpdateStringTable {
	  int32 table_id = 1;
	  int32 num_changed_entries = 2;
	  bytes string_data = 3;
}

message CSVCMsg_FullFrameSplit {
	  int32 tick = 1;
	  int32 section = 2;
	  int32 total = 3;
	  bytes data = 4;
}

message CSVCMsg_BSPDecal {
      CMsgVector pos = 1;
      int32 decal_texture_index = 2;
      int32 entity_index = 3;
      int32 model_index = 4;
      bool low_priority = 5;
}



